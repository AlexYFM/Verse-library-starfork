Search.setIndex({"docnames": ["_autosummary/verse", "_autosummary/verse.agents", "_autosummary/verse.agents.base_agent", "_autosummary/verse.agents.base_agent.BaseAgent", "_autosummary/verse.agents.example_agent", "_autosummary/verse.agents.example_agent.ball_agent", "_autosummary/verse.agents.example_agent.ball_agent.BallAgent", "_autosummary/verse.agents.example_agent.car_agent", "_autosummary/verse.agents.example_agent.car_agent.CarAgent", "_autosummary/verse.agents.example_agent.car_agent.CarAgentDebounced", "_autosummary/verse.agents.example_agent.car_agent.CarAgentSwitch2", "_autosummary/verse.agents.example_agent.car_agent.NPCAgent", "_autosummary/verse.agents.example_agent.car_agent.WeirdCarAgent", "_autosummary/verse.agents.example_agent.origin_agent", "_autosummary/verse.agents.example_agent.origin_agent.craft_agent", "_autosummary/verse.agents.example_agent.origin_agent.thermo_agent", "_autosummary/verse.agents.example_agent.origin_agent.vanderpol_agent", "_autosummary/verse.agents.example_agent.quadrotor_agent", "_autosummary/verse.agents.example_agent.quadrotor_agent.FFNNC", "_autosummary/verse.agents.example_agent.quadrotor_agent.QuadrotorAgent", "_autosummary/verse.agents.example_agent.robot_agent", "_autosummary/verse.agents.example_agent.robot_agent.RobotAgent", "_autosummary/verse.agents.example_agent.sign_agent", "_autosummary/verse.agents.example_agent.sign_agent.SignAgent", "_autosummary/verse.analysis", "_autosummary/verse.analysis.analysis_tree", "_autosummary/verse.analysis.analysis_tree.AnalysisTree", "_autosummary/verse.analysis.analysis_tree.AnalysisTreeNode", "_autosummary/verse.analysis.analysis_tree.AnalysisTreeNodeType", "_autosummary/verse.analysis.analysis_tree._color_interp", "_autosummary/verse.analysis.analysis_tree.color_interp", "_autosummary/verse.analysis.analysis_tree.first_transitions", "_autosummary/verse.analysis.analysis_tree.index_of", "_autosummary/verse.analysis.dryvr", "_autosummary/verse.analysis.dryvr.all_sensitivities_calc", "_autosummary/verse.analysis.dryvr.calcCenterPoint", "_autosummary/verse.analysis.dryvr.calcDelta", "_autosummary/verse.analysis.dryvr.calc_bloated_tube", "_autosummary/verse.analysis.dryvr.get_reachtube_segment", "_autosummary/verse.analysis.dryvr.randomPoint", "_autosummary/verse.analysis.dryvr.trimTraces", "_autosummary/verse.analysis.incremental", "_autosummary/verse.analysis.incremental.CachedRTTrans", "_autosummary/verse.analysis.incremental.CachedReachTrans", "_autosummary/verse.analysis.incremental.CachedSegment", "_autosummary/verse.analysis.incremental.CachedTransition", "_autosummary/verse.analysis.incremental.CachedTube", "_autosummary/verse.analysis.incremental.ReachTubeCache", "_autosummary/verse.analysis.incremental.SimTraceCache", "_autosummary/verse.analysis.incremental.TubeCache", "_autosummary/verse.analysis.incremental.combine_all", "_autosummary/verse.analysis.incremental.convert_reach_trans", "_autosummary/verse.analysis.incremental.convert_sim_trans", "_autosummary/verse.analysis.incremental.reach_trans_suit", "_autosummary/verse.analysis.incremental.sim_trans_suit", "_autosummary/verse.analysis.incremental.to_simulate", "_autosummary/verse.analysis.mixmonotone", "_autosummary/verse.analysis.mixmonotone.calculate_bloated_tube_mixmono_cont", "_autosummary/verse.analysis.mixmonotone.calculate_bloated_tube_mixmono_disc", "_autosummary/verse.analysis.mixmonotone.compute_reachtube_mixmono_cont", "_autosummary/verse.analysis.mixmonotone.compute_reachtube_mixmono_disc", "_autosummary/verse.analysis.mixmonotone.find_max", "_autosummary/verse.analysis.mixmonotone.find_max_symbolic", "_autosummary/verse.analysis.mixmonotone.find_min", "_autosummary/verse.analysis.mixmonotone.find_min_symbolic", "_autosummary/verse.analysis.simulator", "_autosummary/verse.analysis.simulator.SimConsts", "_autosummary/verse.analysis.simulator.Simulator", "_autosummary/verse.analysis.simulator.checkHeight", "_autosummary/verse.analysis.simulator.check_sim_transitions", "_autosummary/verse.analysis.simulator.convertEnumToStr", "_autosummary/verse.analysis.simulator.convertStrToEnum", "_autosummary/verse.analysis.simulator.disc_field", "_autosummary/verse.analysis.simulator.pack_env", "_autosummary/verse.analysis.simulator.red", "_autosummary/verse.analysis.utils", "_autosummary/verse.analysis.utils.are_polygons_intersecting", "_autosummary/verse.analysis.utils.class_from_path", "_autosummary/verse.analysis.utils.confidence_ellipsoid", "_autosummary/verse.analysis.utils.confidence_polytope", "_autosummary/verse.analysis.utils.constrain", "_autosummary/verse.analysis.utils.dedup", "_autosummary/verse.analysis.utils.distance_to_circle", "_autosummary/verse.analysis.utils.distance_to_rect", "_autosummary/verse.analysis.utils.do_every", "_autosummary/verse.analysis.utils.get_class_path", "_autosummary/verse.analysis.utils.has_corner_inside", "_autosummary/verse.analysis.utils.interval_distance", "_autosummary/verse.analysis.utils.is_consistent_dataset", "_autosummary/verse.analysis.utils.is_valid_observation", "_autosummary/verse.analysis.utils.lmap", "_autosummary/verse.analysis.utils.near_split", "_autosummary/verse.analysis.utils.not_zero", "_autosummary/verse.analysis.utils.point_in_ellipse", "_autosummary/verse.analysis.utils.point_in_rectangle", "_autosummary/verse.analysis.utils.point_in_rotated_rectangle", "_autosummary/verse.analysis.utils.project_polygon", "_autosummary/verse.analysis.utils.rect_corners", "_autosummary/verse.analysis.utils.rotated_rectangles_intersect", "_autosummary/verse.analysis.utils.sample_rect", "_autosummary/verse.analysis.utils.solve_trinom", "_autosummary/verse.analysis.utils.to_serializable", "_autosummary/verse.analysis.utils.wrap_to_pi", "_autosummary/verse.analysis.verifier", "_autosummary/verse.analysis.verifier.ReachConsts", "_autosummary/verse.analysis.verifier.Verifier", "_autosummary/verse.analysis.verifier.checkHeight", "_autosummary/verse.analysis.verifier.combine_rect", "_autosummary/verse.automaton", "_autosummary/verse.automaton.guard", "_autosummary/verse.automaton.guard.GuardExpressionAst", "_autosummary/verse.automaton.guard.LogicTreeNode", "_autosummary/verse.automaton.guard.NodeSubstituter", "_autosummary/verse.automaton.guard.ValueSubstituter", "_autosummary/verse.automaton.hybrid_automaton", "_autosummary/verse.automaton.hybrid_automaton.HybridAutomaton", "_autosummary/verse.automaton.hybrid_io_automaton", "_autosummary/verse.automaton.hybrid_io_automaton.HybridIoAutomaton", "_autosummary/verse.automaton.reset", "_autosummary/verse.automaton.reset.ResetExpression", "_autosummary/verse.map", "_autosummary/verse.map.example_map", "_autosummary/verse.map.example_map.intersection", "_autosummary/verse.map.example_map.intersection.Intersection", "_autosummary/verse.map.example_map.map_tacas", "_autosummary/verse.map.example_map.map_tacas.M1", "_autosummary/verse.map.example_map.map_tacas.M2", "_autosummary/verse.map.example_map.map_tacas.M3", "_autosummary/verse.map.example_map.map_tacas.M5", "_autosummary/verse.map.example_map.map_tacas.M6", "_autosummary/verse.map.example_map.map_tacas.get_end", "_autosummary/verse.map.example_map.simple_map", "_autosummary/verse.map.example_map.simple_map.SimpleMap", "_autosummary/verse.map.example_map.simple_map.SimpleMap2", "_autosummary/verse.map.example_map.simple_map2", "_autosummary/verse.map.example_map.simple_map2.SimpleMap2", "_autosummary/verse.map.example_map.simple_map2.SimpleMap3", "_autosummary/verse.map.example_map.simple_map2.SimpleMap4", "_autosummary/verse.map.example_map.simple_map2.SimpleMap4Switch2", "_autosummary/verse.map.example_map.simple_map2.SimpleMap5", "_autosummary/verse.map.example_map.simple_map2.SimpleMap6", "_autosummary/verse.map.example_map.simple_map_3d", "_autosummary/verse.map.example_map.simple_map_3d.SimpleMap1", "_autosummary/verse.map.example_map.simple_map_3d.SimpleMap2", "_autosummary/verse.map.example_map.simple_map_3d.SimpleMap3", "_autosummary/verse.map.example_map.simple_map_3d.SimpleMap4", "_autosummary/verse.map.example_map.simple_map_3d.SimpleMap5", "_autosummary/verse.map.example_map.simple_map_3d.SimpleMap6", "_autosummary/verse.map.example_map.simple_map_3d.SimpleMap7", "_autosummary/verse.map.example_map.simple_map_3d.get_center_radius", "_autosummary/verse.map.example_map.simple_map_3d.get_end", "_autosummary/verse.map.lane", "_autosummary/verse.map.lane.Lane", "_autosummary/verse.map.lane_3d", "_autosummary/verse.map.lane_3d.Lane_3d", "_autosummary/verse.map.lane_map", "_autosummary/verse.map.lane_map.LaneMap", "_autosummary/verse.map.lane_map_3d", "_autosummary/verse.map.lane_map_3d.LaneMap_3d", "_autosummary/verse.map.lane_segment", "_autosummary/verse.map.lane_segment.AbstractLane", "_autosummary/verse.map.lane_segment.CircularLane", "_autosummary/verse.map.lane_segment.LaneSegment", "_autosummary/verse.map.lane_segment.LineType", "_autosummary/verse.map.lane_segment.StraightLane", "_autosummary/verse.map.lane_segment_3d", "_autosummary/verse.map.lane_segment_3d.AbstractLane_3d", "_autosummary/verse.map.lane_segment_3d.CircularLane_3d_v1", "_autosummary/verse.map.lane_segment_3d.CircularLane_3d_v2", "_autosummary/verse.map.lane_segment_3d.LineType_3d", "_autosummary/verse.map.lane_segment_3d.StraightLane_3d", "_autosummary/verse.map.lane_segment_3d.func_a", "_autosummary/verse.map.lane_segment_3d.func_b", "_autosummary/verse.map.lane_segment_3d.get_center_radius", "_autosummary/verse.map.lane_segment_3d.get_coor_by_rt", "_autosummary/verse.map.lane_segment_3d.get_rtp_by_coor", "_autosummary/verse.map.lane_segment_3d.get_theta_by_coor", "_autosummary/verse.map.opendrive_parser", "_autosummary/verse.map.opendrive_parser.check_valid_side", "_autosummary/verse.map.opendrive_parser.condense_matrix", "_autosummary/verse.map.opendrive_parser.file_parser", "_autosummary/verse.map.opendrive_parser.opendrive_map", "_autosummary/verse.map.opendrive_parser.road_traverser", "_autosummary/verse.parser", "_autosummary/verse.parser.astunparser", "_autosummary/verse.parser.astunparser.Unparser", "_autosummary/verse.parser.astunparser.interleave", "_autosummary/verse.parser.astunparser.main", "_autosummary/verse.parser.astunparser.roundtrip", "_autosummary/verse.parser.astunparser.testdir", "_autosummary/verse.parser.astunparser.unparse", "_autosummary/verse.parser.parser", "_autosummary/verse.parser.parser.ArgSubstituter", "_autosummary/verse.parser.parser.Assert", "_autosummary/verse.parser.parser.CompiledAssert", "_autosummary/verse.parser.parser.CondVal", "_autosummary/verse.parser.parser.CondValCase", "_autosummary/verse.parser.parser.ControllerIR", "_autosummary/verse.parser.parser.CustomIR", "_autosummary/verse.parser.parser.Env", "_autosummary/verse.parser.parser.Lambda", "_autosummary/verse.parser.parser.LambdaArg", "_autosummary/verse.parser.parser.ModeDef", "_autosummary/verse.parser.parser.ModePath", "_autosummary/verse.parser.parser.Reduction", "_autosummary/verse.parser.parser.ReductionType", "_autosummary/verse.parser.parser.ScopeLevel", "_autosummary/verse.parser.parser.StateDef", "_autosummary/verse.parser.parser._Assert", "_autosummary/verse.parser.parser.ast_dump", "_autosummary/verse.parser.parser.compile_expr", "_autosummary/verse.parser.parser.find", "_autosummary/verse.parser.parser.fully_cond", "_autosummary/verse.parser.parser.is_main_check", "_autosummary/verse.parser.parser.merge_assert", "_autosummary/verse.parser.parser.merge_conds", "_autosummary/verse.parser.parser.merge_if", "_autosummary/verse.parser.parser.merge_if_single", "_autosummary/verse.parser.parser.merge_if_val", "_autosummary/verse.parser.parser.not_ir_ast", "_autosummary/verse.parser.parser.proc", "_autosummary/verse.parser.parser.proc_assign", "_autosummary/verse.parser.parser.unparse", "_autosummary/verse.plotter", "_autosummary/verse.plotter.plotter2D", "_autosummary/verse.plotter.plotter2D.check_dim", "_autosummary/verse.plotter.plotter2D.create_anime_dict", "_autosummary/verse.plotter.plotter2D.draw_map", "_autosummary/verse.plotter.plotter2D.duration", "_autosummary/verse.plotter.plotter2D.get_text_pos", "_autosummary/verse.plotter.plotter2D.num_digits", "_autosummary/verse.plotter.plotter2D.reachtube_anime", "_autosummary/verse.plotter.plotter2D.reachtube_tree", "_autosummary/verse.plotter.plotter2D.reachtube_tree_single", "_autosummary/verse.plotter.plotter2D.sample_trace", "_autosummary/verse.plotter.plotter2D.simulation_anime", "_autosummary/verse.plotter.plotter2D.simulation_tree", "_autosummary/verse.plotter.plotter2D.simulation_tree_single", "_autosummary/verse.plotter.plotter2D.update_style", "_autosummary/verse.plotter.plotter2D_old", "_autosummary/verse.plotter.plotter2D_old.generate_simulation_anime", "_autosummary/verse.plotter.plotter2D_old.plot", "_autosummary/verse.plotter.plotter2D_old.plot_map", "_autosummary/verse.plotter.plotter2D_old.plot_reachtube_tree", "_autosummary/verse.plotter.plotter2D_old.plot_simulation_tree", "_autosummary/verse.plotter.plotter3D", "_autosummary/verse.plotter.plotter3D.plot3dMap", "_autosummary/verse.plotter.plotter3D.plot3dReachtube", "_autosummary/verse.plotter.plotter3D.plot3dReachtubeSingle", "_autosummary/verse.plotter.plotter3D.plot_line_3d", "_autosummary/verse.plotter.plotter3D.plot_point_3d", "_autosummary/verse.plotter.plotter3D.plot_polytope_3d", "_autosummary/verse.plotter.plotter3D_new", "_autosummary/verse.plotter.plotter3D_new.check_dim", "_autosummary/verse.plotter.plotter3D_new.draw_map_3d", "_autosummary/verse.plotter.plotter3D_new.reachtube_tree_3d", "_autosummary/verse.plotter.plotter3D_new.reachtube_tree_single_3d", "_autosummary/verse.plotter.plotter3D_new.sample_trace", "_autosummary/verse.plotter.plotter3D_new.simulation_tree_3d", "_autosummary/verse.plotter.plotter3D_new.simulation_tree_single_3d", "_autosummary/verse.plotter.plotter3D_new.update_style", "_autosummary/verse.scenario", "_autosummary/verse.scenario.scenario", "_autosummary/verse.scenario.scenario.Benchmark", "_autosummary/verse.scenario.scenario.ExprConfig", "_autosummary/verse.scenario.scenario.Scenario", "_autosummary/verse.scenario.scenario.ScenarioConfig", "_autosummary/verse.scenario.scenario.check_ray_init", "_autosummary/verse.scenario.scenario.red", "_autosummary/verse.sensor", "_autosummary/verse.sensor.base_sensor", "_autosummary/verse.sensor.base_sensor.BaseSensor", "_autosummary/verse.sensor.base_sensor.add_states_2d", "_autosummary/verse.sensor.base_sensor.add_states_3d", "_autosummary/verse.sensor.base_sensor.adds", "_autosummary/verse.sensor.base_sensor.set_states_2d", "_autosummary/verse.sensor.base_sensor.set_states_3d", "_autosummary/verse.sensor.base_sensor.sets", "_autosummary/verse.sensor.example_sensor", "_autosummary/verse.sensor.example_sensor.craft_sensor", "_autosummary/verse.sensor.example_sensor.craft_sensor.CraftSensor", "_autosummary/verse.sensor.example_sensor.craft_sensor.add_states_2d_ball", "_autosummary/verse.sensor.example_sensor.craft_sensor.add_states_3d_ball", "_autosummary/verse.sensor.example_sensor.craft_sensor.adds", "_autosummary/verse.sensor.example_sensor.craft_sensor.set_states_2d_ball", "_autosummary/verse.sensor.example_sensor.craft_sensor.set_states_3d_ball", "_autosummary/verse.sensor.example_sensor.craft_sensor.sets", "_autosummary/verse.sensor.example_sensor.quadrotor_sensor", "_autosummary/verse.sensor.example_sensor.quadrotor_sensor.QuadrotorSensor", "_autosummary/verse.sensor.example_sensor.quadrotor_sensor.add_states_2d_ball", "_autosummary/verse.sensor.example_sensor.quadrotor_sensor.add_states_3d_ball", "_autosummary/verse.sensor.example_sensor.quadrotor_sensor.adds", "_autosummary/verse.sensor.example_sensor.quadrotor_sensor.set_states_2d_ball", "_autosummary/verse.sensor.example_sensor.quadrotor_sensor.set_states_3d_ball", "_autosummary/verse.sensor.example_sensor.quadrotor_sensor.sets", "_autosummary/verse.sensor.example_sensor.single_sensor", "_autosummary/verse.sensor.example_sensor.single_sensor.FakeSensor3", "_autosummary/verse.sensor.example_sensor.single_sensor.FakeSensor4", "_autosummary/verse.sensor.example_sensor.single_sensor.SingleSensor", "_autosummary/verse.sensor.example_sensor.single_sensor.add_states_2d", "_autosummary/verse.sensor.example_sensor.single_sensor.add_states_2d_ball", "_autosummary/verse.sensor.example_sensor.single_sensor.add_states_3d", "_autosummary/verse.sensor.example_sensor.single_sensor.add_states_3d_ball", "_autosummary/verse.sensor.example_sensor.single_sensor.adds", "_autosummary/verse.sensor.example_sensor.single_sensor.set_states_2d", "_autosummary/verse.sensor.example_sensor.single_sensor.set_states_2d_ball", "_autosummary/verse.sensor.example_sensor.single_sensor.set_states_3d", "_autosummary/verse.sensor.example_sensor.single_sensor.set_states_3d_ball", "_autosummary/verse.sensor.example_sensor.single_sensor.sets", "_autosummary/verse.sensor.example_sensor.thermo_sensor", "_autosummary/verse.sensor.example_sensor.thermo_sensor.ThermoSensor", "_autosummary/verse.sensor.example_sensor.thermo_sensor.add_states_2d_ball", "_autosummary/verse.sensor.example_sensor.thermo_sensor.add_states_3d_ball", "_autosummary/verse.sensor.example_sensor.thermo_sensor.adds", "_autosummary/verse.sensor.example_sensor.thermo_sensor.set_states_2d_ball", "_autosummary/verse.sensor.example_sensor.thermo_sensor.set_states_3d_ball", "_autosummary/verse.sensor.example_sensor.thermo_sensor.sets", "agent", "contributors", "creating_scenario_in_verse", "getting_started", "index", "map", "outputs", "parser", "plotting", "scenario", "sensor"], "filenames": ["_autosummary\\verse.rst", "_autosummary\\verse.agents.rst", "_autosummary\\verse.agents.base_agent.rst", "_autosummary\\verse.agents.base_agent.BaseAgent.rst", "_autosummary\\verse.agents.example_agent.rst", "_autosummary\\verse.agents.example_agent.ball_agent.rst", "_autosummary\\verse.agents.example_agent.ball_agent.BallAgent.rst", "_autosummary\\verse.agents.example_agent.car_agent.rst", "_autosummary\\verse.agents.example_agent.car_agent.CarAgent.rst", "_autosummary\\verse.agents.example_agent.car_agent.CarAgentDebounced.rst", "_autosummary\\verse.agents.example_agent.car_agent.CarAgentSwitch2.rst", "_autosummary\\verse.agents.example_agent.car_agent.NPCAgent.rst", "_autosummary\\verse.agents.example_agent.car_agent.WeirdCarAgent.rst", "_autosummary\\verse.agents.example_agent.origin_agent.rst", "_autosummary\\verse.agents.example_agent.origin_agent.craft_agent.rst", "_autosummary\\verse.agents.example_agent.origin_agent.thermo_agent.rst", "_autosummary\\verse.agents.example_agent.origin_agent.vanderpol_agent.rst", "_autosummary\\verse.agents.example_agent.quadrotor_agent.rst", "_autosummary\\verse.agents.example_agent.quadrotor_agent.FFNNC.rst", "_autosummary\\verse.agents.example_agent.quadrotor_agent.QuadrotorAgent.rst", "_autosummary\\verse.agents.example_agent.robot_agent.rst", "_autosummary\\verse.agents.example_agent.robot_agent.RobotAgent.rst", "_autosummary\\verse.agents.example_agent.sign_agent.rst", "_autosummary\\verse.agents.example_agent.sign_agent.SignAgent.rst", "_autosummary\\verse.analysis.rst", "_autosummary\\verse.analysis.analysis_tree.rst", "_autosummary\\verse.analysis.analysis_tree.AnalysisTree.rst", "_autosummary\\verse.analysis.analysis_tree.AnalysisTreeNode.rst", "_autosummary\\verse.analysis.analysis_tree.AnalysisTreeNodeType.rst", "_autosummary\\verse.analysis.analysis_tree._color_interp.rst", "_autosummary\\verse.analysis.analysis_tree.color_interp.rst", "_autosummary\\verse.analysis.analysis_tree.first_transitions.rst", "_autosummary\\verse.analysis.analysis_tree.index_of.rst", "_autosummary\\verse.analysis.dryvr.rst", "_autosummary\\verse.analysis.dryvr.all_sensitivities_calc.rst", "_autosummary\\verse.analysis.dryvr.calcCenterPoint.rst", "_autosummary\\verse.analysis.dryvr.calcDelta.rst", "_autosummary\\verse.analysis.dryvr.calc_bloated_tube.rst", "_autosummary\\verse.analysis.dryvr.get_reachtube_segment.rst", "_autosummary\\verse.analysis.dryvr.randomPoint.rst", "_autosummary\\verse.analysis.dryvr.trimTraces.rst", "_autosummary\\verse.analysis.incremental.rst", "_autosummary\\verse.analysis.incremental.CachedRTTrans.rst", "_autosummary\\verse.analysis.incremental.CachedReachTrans.rst", "_autosummary\\verse.analysis.incremental.CachedSegment.rst", "_autosummary\\verse.analysis.incremental.CachedTransition.rst", "_autosummary\\verse.analysis.incremental.CachedTube.rst", "_autosummary\\verse.analysis.incremental.ReachTubeCache.rst", "_autosummary\\verse.analysis.incremental.SimTraceCache.rst", "_autosummary\\verse.analysis.incremental.TubeCache.rst", "_autosummary\\verse.analysis.incremental.combine_all.rst", "_autosummary\\verse.analysis.incremental.convert_reach_trans.rst", "_autosummary\\verse.analysis.incremental.convert_sim_trans.rst", "_autosummary\\verse.analysis.incremental.reach_trans_suit.rst", "_autosummary\\verse.analysis.incremental.sim_trans_suit.rst", "_autosummary\\verse.analysis.incremental.to_simulate.rst", "_autosummary\\verse.analysis.mixmonotone.rst", "_autosummary\\verse.analysis.mixmonotone.calculate_bloated_tube_mixmono_cont.rst", "_autosummary\\verse.analysis.mixmonotone.calculate_bloated_tube_mixmono_disc.rst", "_autosummary\\verse.analysis.mixmonotone.compute_reachtube_mixmono_cont.rst", "_autosummary\\verse.analysis.mixmonotone.compute_reachtube_mixmono_disc.rst", "_autosummary\\verse.analysis.mixmonotone.find_max.rst", "_autosummary\\verse.analysis.mixmonotone.find_max_symbolic.rst", "_autosummary\\verse.analysis.mixmonotone.find_min.rst", "_autosummary\\verse.analysis.mixmonotone.find_min_symbolic.rst", "_autosummary\\verse.analysis.simulator.rst", "_autosummary\\verse.analysis.simulator.SimConsts.rst", "_autosummary\\verse.analysis.simulator.Simulator.rst", "_autosummary\\verse.analysis.simulator.checkHeight.rst", "_autosummary\\verse.analysis.simulator.check_sim_transitions.rst", "_autosummary\\verse.analysis.simulator.convertEnumToStr.rst", "_autosummary\\verse.analysis.simulator.convertStrToEnum.rst", "_autosummary\\verse.analysis.simulator.disc_field.rst", "_autosummary\\verse.analysis.simulator.pack_env.rst", "_autosummary\\verse.analysis.simulator.red.rst", "_autosummary\\verse.analysis.utils.rst", "_autosummary\\verse.analysis.utils.are_polygons_intersecting.rst", "_autosummary\\verse.analysis.utils.class_from_path.rst", "_autosummary\\verse.analysis.utils.confidence_ellipsoid.rst", "_autosummary\\verse.analysis.utils.confidence_polytope.rst", "_autosummary\\verse.analysis.utils.constrain.rst", "_autosummary\\verse.analysis.utils.dedup.rst", "_autosummary\\verse.analysis.utils.distance_to_circle.rst", "_autosummary\\verse.analysis.utils.distance_to_rect.rst", "_autosummary\\verse.analysis.utils.do_every.rst", "_autosummary\\verse.analysis.utils.get_class_path.rst", "_autosummary\\verse.analysis.utils.has_corner_inside.rst", "_autosummary\\verse.analysis.utils.interval_distance.rst", "_autosummary\\verse.analysis.utils.is_consistent_dataset.rst", "_autosummary\\verse.analysis.utils.is_valid_observation.rst", "_autosummary\\verse.analysis.utils.lmap.rst", "_autosummary\\verse.analysis.utils.near_split.rst", "_autosummary\\verse.analysis.utils.not_zero.rst", "_autosummary\\verse.analysis.utils.point_in_ellipse.rst", "_autosummary\\verse.analysis.utils.point_in_rectangle.rst", "_autosummary\\verse.analysis.utils.point_in_rotated_rectangle.rst", "_autosummary\\verse.analysis.utils.project_polygon.rst", "_autosummary\\verse.analysis.utils.rect_corners.rst", "_autosummary\\verse.analysis.utils.rotated_rectangles_intersect.rst", "_autosummary\\verse.analysis.utils.sample_rect.rst", "_autosummary\\verse.analysis.utils.solve_trinom.rst", "_autosummary\\verse.analysis.utils.to_serializable.rst", "_autosummary\\verse.analysis.utils.wrap_to_pi.rst", "_autosummary\\verse.analysis.verifier.rst", "_autosummary\\verse.analysis.verifier.ReachConsts.rst", "_autosummary\\verse.analysis.verifier.Verifier.rst", "_autosummary\\verse.analysis.verifier.checkHeight.rst", "_autosummary\\verse.analysis.verifier.combine_rect.rst", "_autosummary\\verse.automaton.rst", "_autosummary\\verse.automaton.guard.rst", "_autosummary\\verse.automaton.guard.GuardExpressionAst.rst", "_autosummary\\verse.automaton.guard.LogicTreeNode.rst", "_autosummary\\verse.automaton.guard.NodeSubstituter.rst", "_autosummary\\verse.automaton.guard.ValueSubstituter.rst", "_autosummary\\verse.automaton.hybrid_automaton.rst", "_autosummary\\verse.automaton.hybrid_automaton.HybridAutomaton.rst", "_autosummary\\verse.automaton.hybrid_io_automaton.rst", "_autosummary\\verse.automaton.hybrid_io_automaton.HybridIoAutomaton.rst", "_autosummary\\verse.automaton.reset.rst", "_autosummary\\verse.automaton.reset.ResetExpression.rst", "_autosummary\\verse.map.rst", "_autosummary\\verse.map.example_map.rst", "_autosummary\\verse.map.example_map.intersection.rst", "_autosummary\\verse.map.example_map.intersection.Intersection.rst", "_autosummary\\verse.map.example_map.map_tacas.rst", "_autosummary\\verse.map.example_map.map_tacas.M1.rst", "_autosummary\\verse.map.example_map.map_tacas.M2.rst", "_autosummary\\verse.map.example_map.map_tacas.M3.rst", "_autosummary\\verse.map.example_map.map_tacas.M5.rst", "_autosummary\\verse.map.example_map.map_tacas.M6.rst", "_autosummary\\verse.map.example_map.map_tacas.get_end.rst", "_autosummary\\verse.map.example_map.simple_map.rst", "_autosummary\\verse.map.example_map.simple_map.SimpleMap.rst", "_autosummary\\verse.map.example_map.simple_map.SimpleMap2.rst", "_autosummary\\verse.map.example_map.simple_map2.rst", "_autosummary\\verse.map.example_map.simple_map2.SimpleMap2.rst", "_autosummary\\verse.map.example_map.simple_map2.SimpleMap3.rst", "_autosummary\\verse.map.example_map.simple_map2.SimpleMap4.rst", "_autosummary\\verse.map.example_map.simple_map2.SimpleMap4Switch2.rst", "_autosummary\\verse.map.example_map.simple_map2.SimpleMap5.rst", "_autosummary\\verse.map.example_map.simple_map2.SimpleMap6.rst", "_autosummary\\verse.map.example_map.simple_map_3d.rst", "_autosummary\\verse.map.example_map.simple_map_3d.SimpleMap1.rst", "_autosummary\\verse.map.example_map.simple_map_3d.SimpleMap2.rst", "_autosummary\\verse.map.example_map.simple_map_3d.SimpleMap3.rst", "_autosummary\\verse.map.example_map.simple_map_3d.SimpleMap4.rst", "_autosummary\\verse.map.example_map.simple_map_3d.SimpleMap5.rst", "_autosummary\\verse.map.example_map.simple_map_3d.SimpleMap6.rst", "_autosummary\\verse.map.example_map.simple_map_3d.SimpleMap7.rst", "_autosummary\\verse.map.example_map.simple_map_3d.get_center_radius.rst", "_autosummary\\verse.map.example_map.simple_map_3d.get_end.rst", "_autosummary\\verse.map.lane.rst", "_autosummary\\verse.map.lane.Lane.rst", "_autosummary\\verse.map.lane_3d.rst", "_autosummary\\verse.map.lane_3d.Lane_3d.rst", "_autosummary\\verse.map.lane_map.rst", "_autosummary\\verse.map.lane_map.LaneMap.rst", "_autosummary\\verse.map.lane_map_3d.rst", "_autosummary\\verse.map.lane_map_3d.LaneMap_3d.rst", "_autosummary\\verse.map.lane_segment.rst", "_autosummary\\verse.map.lane_segment.AbstractLane.rst", "_autosummary\\verse.map.lane_segment.CircularLane.rst", "_autosummary\\verse.map.lane_segment.LaneSegment.rst", "_autosummary\\verse.map.lane_segment.LineType.rst", "_autosummary\\verse.map.lane_segment.StraightLane.rst", "_autosummary\\verse.map.lane_segment_3d.rst", "_autosummary\\verse.map.lane_segment_3d.AbstractLane_3d.rst", "_autosummary\\verse.map.lane_segment_3d.CircularLane_3d_v1.rst", "_autosummary\\verse.map.lane_segment_3d.CircularLane_3d_v2.rst", "_autosummary\\verse.map.lane_segment_3d.LineType_3d.rst", "_autosummary\\verse.map.lane_segment_3d.StraightLane_3d.rst", "_autosummary\\verse.map.lane_segment_3d.func_a.rst", "_autosummary\\verse.map.lane_segment_3d.func_b.rst", "_autosummary\\verse.map.lane_segment_3d.get_center_radius.rst", "_autosummary\\verse.map.lane_segment_3d.get_coor_by_rt.rst", "_autosummary\\verse.map.lane_segment_3d.get_rtp_by_coor.rst", "_autosummary\\verse.map.lane_segment_3d.get_theta_by_coor.rst", "_autosummary\\verse.map.opendrive_parser.rst", "_autosummary\\verse.map.opendrive_parser.check_valid_side.rst", "_autosummary\\verse.map.opendrive_parser.condense_matrix.rst", "_autosummary\\verse.map.opendrive_parser.file_parser.rst", "_autosummary\\verse.map.opendrive_parser.opendrive_map.rst", "_autosummary\\verse.map.opendrive_parser.road_traverser.rst", "_autosummary\\verse.parser.rst", "_autosummary\\verse.parser.astunparser.rst", "_autosummary\\verse.parser.astunparser.Unparser.rst", "_autosummary\\verse.parser.astunparser.interleave.rst", "_autosummary\\verse.parser.astunparser.main.rst", "_autosummary\\verse.parser.astunparser.roundtrip.rst", "_autosummary\\verse.parser.astunparser.testdir.rst", "_autosummary\\verse.parser.astunparser.unparse.rst", "_autosummary\\verse.parser.parser.rst", "_autosummary\\verse.parser.parser.ArgSubstituter.rst", "_autosummary\\verse.parser.parser.Assert.rst", "_autosummary\\verse.parser.parser.CompiledAssert.rst", "_autosummary\\verse.parser.parser.CondVal.rst", "_autosummary\\verse.parser.parser.CondValCase.rst", "_autosummary\\verse.parser.parser.ControllerIR.rst", "_autosummary\\verse.parser.parser.CustomIR.rst", "_autosummary\\verse.parser.parser.Env.rst", "_autosummary\\verse.parser.parser.Lambda.rst", "_autosummary\\verse.parser.parser.LambdaArg.rst", "_autosummary\\verse.parser.parser.ModeDef.rst", "_autosummary\\verse.parser.parser.ModePath.rst", "_autosummary\\verse.parser.parser.Reduction.rst", "_autosummary\\verse.parser.parser.ReductionType.rst", "_autosummary\\verse.parser.parser.ScopeLevel.rst", "_autosummary\\verse.parser.parser.StateDef.rst", "_autosummary\\verse.parser.parser._Assert.rst", "_autosummary\\verse.parser.parser.ast_dump.rst", "_autosummary\\verse.parser.parser.compile_expr.rst", "_autosummary\\verse.parser.parser.find.rst", "_autosummary\\verse.parser.parser.fully_cond.rst", "_autosummary\\verse.parser.parser.is_main_check.rst", "_autosummary\\verse.parser.parser.merge_assert.rst", "_autosummary\\verse.parser.parser.merge_conds.rst", "_autosummary\\verse.parser.parser.merge_if.rst", "_autosummary\\verse.parser.parser.merge_if_single.rst", "_autosummary\\verse.parser.parser.merge_if_val.rst", "_autosummary\\verse.parser.parser.not_ir_ast.rst", "_autosummary\\verse.parser.parser.proc.rst", "_autosummary\\verse.parser.parser.proc_assign.rst", "_autosummary\\verse.parser.parser.unparse.rst", "_autosummary\\verse.plotter.rst", "_autosummary\\verse.plotter.plotter2D.rst", "_autosummary\\verse.plotter.plotter2D.check_dim.rst", "_autosummary\\verse.plotter.plotter2D.create_anime_dict.rst", "_autosummary\\verse.plotter.plotter2D.draw_map.rst", "_autosummary\\verse.plotter.plotter2D.duration.rst", "_autosummary\\verse.plotter.plotter2D.get_text_pos.rst", "_autosummary\\verse.plotter.plotter2D.num_digits.rst", "_autosummary\\verse.plotter.plotter2D.reachtube_anime.rst", "_autosummary\\verse.plotter.plotter2D.reachtube_tree.rst", "_autosummary\\verse.plotter.plotter2D.reachtube_tree_single.rst", "_autosummary\\verse.plotter.plotter2D.sample_trace.rst", "_autosummary\\verse.plotter.plotter2D.simulation_anime.rst", "_autosummary\\verse.plotter.plotter2D.simulation_tree.rst", "_autosummary\\verse.plotter.plotter2D.simulation_tree_single.rst", "_autosummary\\verse.plotter.plotter2D.update_style.rst", "_autosummary\\verse.plotter.plotter2D_old.rst", "_autosummary\\verse.plotter.plotter2D_old.generate_simulation_anime.rst", "_autosummary\\verse.plotter.plotter2D_old.plot.rst", "_autosummary\\verse.plotter.plotter2D_old.plot_map.rst", "_autosummary\\verse.plotter.plotter2D_old.plot_reachtube_tree.rst", "_autosummary\\verse.plotter.plotter2D_old.plot_simulation_tree.rst", "_autosummary\\verse.plotter.plotter3D.rst", "_autosummary\\verse.plotter.plotter3D.plot3dMap.rst", "_autosummary\\verse.plotter.plotter3D.plot3dReachtube.rst", "_autosummary\\verse.plotter.plotter3D.plot3dReachtubeSingle.rst", "_autosummary\\verse.plotter.plotter3D.plot_line_3d.rst", "_autosummary\\verse.plotter.plotter3D.plot_point_3d.rst", "_autosummary\\verse.plotter.plotter3D.plot_polytope_3d.rst", "_autosummary\\verse.plotter.plotter3D_new.rst", "_autosummary\\verse.plotter.plotter3D_new.check_dim.rst", "_autosummary\\verse.plotter.plotter3D_new.draw_map_3d.rst", "_autosummary\\verse.plotter.plotter3D_new.reachtube_tree_3d.rst", "_autosummary\\verse.plotter.plotter3D_new.reachtube_tree_single_3d.rst", "_autosummary\\verse.plotter.plotter3D_new.sample_trace.rst", "_autosummary\\verse.plotter.plotter3D_new.simulation_tree_3d.rst", "_autosummary\\verse.plotter.plotter3D_new.simulation_tree_single_3d.rst", "_autosummary\\verse.plotter.plotter3D_new.update_style.rst", "_autosummary\\verse.scenario.rst", "_autosummary\\verse.scenario.scenario.rst", "_autosummary\\verse.scenario.scenario.Benchmark.rst", "_autosummary\\verse.scenario.scenario.ExprConfig.rst", "_autosummary\\verse.scenario.scenario.Scenario.rst", "_autosummary\\verse.scenario.scenario.ScenarioConfig.rst", "_autosummary\\verse.scenario.scenario.check_ray_init.rst", "_autosummary\\verse.scenario.scenario.red.rst", "_autosummary\\verse.sensor.rst", "_autosummary\\verse.sensor.base_sensor.rst", "_autosummary\\verse.sensor.base_sensor.BaseSensor.rst", "_autosummary\\verse.sensor.base_sensor.add_states_2d.rst", "_autosummary\\verse.sensor.base_sensor.add_states_3d.rst", "_autosummary\\verse.sensor.base_sensor.adds.rst", "_autosummary\\verse.sensor.base_sensor.set_states_2d.rst", "_autosummary\\verse.sensor.base_sensor.set_states_3d.rst", "_autosummary\\verse.sensor.base_sensor.sets.rst", "_autosummary\\verse.sensor.example_sensor.rst", "_autosummary\\verse.sensor.example_sensor.craft_sensor.rst", "_autosummary\\verse.sensor.example_sensor.craft_sensor.CraftSensor.rst", "_autosummary\\verse.sensor.example_sensor.craft_sensor.add_states_2d_ball.rst", "_autosummary\\verse.sensor.example_sensor.craft_sensor.add_states_3d_ball.rst", "_autosummary\\verse.sensor.example_sensor.craft_sensor.adds.rst", "_autosummary\\verse.sensor.example_sensor.craft_sensor.set_states_2d_ball.rst", "_autosummary\\verse.sensor.example_sensor.craft_sensor.set_states_3d_ball.rst", "_autosummary\\verse.sensor.example_sensor.craft_sensor.sets.rst", "_autosummary\\verse.sensor.example_sensor.quadrotor_sensor.rst", "_autosummary\\verse.sensor.example_sensor.quadrotor_sensor.QuadrotorSensor.rst", "_autosummary\\verse.sensor.example_sensor.quadrotor_sensor.add_states_2d_ball.rst", "_autosummary\\verse.sensor.example_sensor.quadrotor_sensor.add_states_3d_ball.rst", "_autosummary\\verse.sensor.example_sensor.quadrotor_sensor.adds.rst", "_autosummary\\verse.sensor.example_sensor.quadrotor_sensor.set_states_2d_ball.rst", "_autosummary\\verse.sensor.example_sensor.quadrotor_sensor.set_states_3d_ball.rst", "_autosummary\\verse.sensor.example_sensor.quadrotor_sensor.sets.rst", "_autosummary\\verse.sensor.example_sensor.single_sensor.rst", "_autosummary\\verse.sensor.example_sensor.single_sensor.FakeSensor3.rst", "_autosummary\\verse.sensor.example_sensor.single_sensor.FakeSensor4.rst", "_autosummary\\verse.sensor.example_sensor.single_sensor.SingleSensor.rst", "_autosummary\\verse.sensor.example_sensor.single_sensor.add_states_2d.rst", "_autosummary\\verse.sensor.example_sensor.single_sensor.add_states_2d_ball.rst", "_autosummary\\verse.sensor.example_sensor.single_sensor.add_states_3d.rst", "_autosummary\\verse.sensor.example_sensor.single_sensor.add_states_3d_ball.rst", "_autosummary\\verse.sensor.example_sensor.single_sensor.adds.rst", "_autosummary\\verse.sensor.example_sensor.single_sensor.set_states_2d.rst", "_autosummary\\verse.sensor.example_sensor.single_sensor.set_states_2d_ball.rst", "_autosummary\\verse.sensor.example_sensor.single_sensor.set_states_3d.rst", "_autosummary\\verse.sensor.example_sensor.single_sensor.set_states_3d_ball.rst", "_autosummary\\verse.sensor.example_sensor.single_sensor.sets.rst", "_autosummary\\verse.sensor.example_sensor.thermo_sensor.rst", "_autosummary\\verse.sensor.example_sensor.thermo_sensor.ThermoSensor.rst", "_autosummary\\verse.sensor.example_sensor.thermo_sensor.add_states_2d_ball.rst", "_autosummary\\verse.sensor.example_sensor.thermo_sensor.add_states_3d_ball.rst", "_autosummary\\verse.sensor.example_sensor.thermo_sensor.adds.rst", "_autosummary\\verse.sensor.example_sensor.thermo_sensor.set_states_2d_ball.rst", "_autosummary\\verse.sensor.example_sensor.thermo_sensor.set_states_3d_ball.rst", "_autosummary\\verse.sensor.example_sensor.thermo_sensor.sets.rst", "agent.md", "contributors.rst", "creating_scenario_in_verse.md", "getting_started.rst", "index.rst", "map.rst", "outputs.rst", "parser.md", "plotting.rst", "scenario.rst", "sensor.rst"], "titles": ["verse", "verse.agents", "verse.agents.base_agent", "verse.agents.base_agent.BaseAgent", "verse.agents.example_agent", "verse.agents.example_agent.ball_agent", "verse.agents.example_agent.ball_agent.BallAgent", "verse.agents.example_agent.car_agent", "verse.agents.example_agent.car_agent.CarAgent", "verse.agents.example_agent.car_agent.CarAgentDebounced", "verse.agents.example_agent.car_agent.CarAgentSwitch2", "verse.agents.example_agent.car_agent.NPCAgent", "verse.agents.example_agent.car_agent.WeirdCarAgent", "verse.agents.example_agent.origin_agent", "verse.agents.example_agent.origin_agent.craft_agent", "verse.agents.example_agent.origin_agent.thermo_agent", "verse.agents.example_agent.origin_agent.vanderpol_agent", "verse.agents.example_agent.quadrotor_agent", "verse.agents.example_agent.quadrotor_agent.FFNNC", "verse.agents.example_agent.quadrotor_agent.QuadrotorAgent", "verse.agents.example_agent.robot_agent", "verse.agents.example_agent.robot_agent.RobotAgent", "verse.agents.example_agent.sign_agent", "verse.agents.example_agent.sign_agent.SignAgent", "verse.analysis", "verse.analysis.analysis_tree", "verse.analysis.analysis_tree.AnalysisTree", "verse.analysis.analysis_tree.AnalysisTreeNode", "verse.analysis.analysis_tree.AnalysisTreeNodeType", "verse.analysis.analysis_tree._color_interp", "verse.analysis.analysis_tree.color_interp", "verse.analysis.analysis_tree.first_transitions", "verse.analysis.analysis_tree.index_of", "verse.analysis.dryvr", "verse.analysis.dryvr.all_sensitivities_calc", "verse.analysis.dryvr.calcCenterPoint", "verse.analysis.dryvr.calcDelta", "verse.analysis.dryvr.calc_bloated_tube", "verse.analysis.dryvr.get_reachtube_segment", "verse.analysis.dryvr.randomPoint", "verse.analysis.dryvr.trimTraces", "verse.analysis.incremental", "verse.analysis.incremental.CachedRTTrans", "verse.analysis.incremental.CachedReachTrans", "verse.analysis.incremental.CachedSegment", "verse.analysis.incremental.CachedTransition", "verse.analysis.incremental.CachedTube", "verse.analysis.incremental.ReachTubeCache", "verse.analysis.incremental.SimTraceCache", "verse.analysis.incremental.TubeCache", "verse.analysis.incremental.combine_all", "verse.analysis.incremental.convert_reach_trans", "verse.analysis.incremental.convert_sim_trans", "verse.analysis.incremental.reach_trans_suit", "verse.analysis.incremental.sim_trans_suit", "verse.analysis.incremental.to_simulate", "verse.analysis.mixmonotone", "verse.analysis.mixmonotone.calculate_bloated_tube_mixmono_cont", "verse.analysis.mixmonotone.calculate_bloated_tube_mixmono_disc", "verse.analysis.mixmonotone.compute_reachtube_mixmono_cont", "verse.analysis.mixmonotone.compute_reachtube_mixmono_disc", "verse.analysis.mixmonotone.find_max", "verse.analysis.mixmonotone.find_max_symbolic", "verse.analysis.mixmonotone.find_min", "verse.analysis.mixmonotone.find_min_symbolic", "verse.analysis.simulator", "verse.analysis.simulator.SimConsts", "verse.analysis.simulator.Simulator", "verse.analysis.simulator.checkHeight", "verse.analysis.simulator.check_sim_transitions", "verse.analysis.simulator.convertEnumToStr", "verse.analysis.simulator.convertStrToEnum", "verse.analysis.simulator.disc_field", "verse.analysis.simulator.pack_env", "verse.analysis.simulator.red", "verse.analysis.utils", "verse.analysis.utils.are_polygons_intersecting", "verse.analysis.utils.class_from_path", "verse.analysis.utils.confidence_ellipsoid", "verse.analysis.utils.confidence_polytope", "verse.analysis.utils.constrain", "verse.analysis.utils.dedup", "verse.analysis.utils.distance_to_circle", "verse.analysis.utils.distance_to_rect", "verse.analysis.utils.do_every", "verse.analysis.utils.get_class_path", "verse.analysis.utils.has_corner_inside", "verse.analysis.utils.interval_distance", "verse.analysis.utils.is_consistent_dataset", "verse.analysis.utils.is_valid_observation", "verse.analysis.utils.lmap", "verse.analysis.utils.near_split", "verse.analysis.utils.not_zero", "verse.analysis.utils.point_in_ellipse", "verse.analysis.utils.point_in_rectangle", "verse.analysis.utils.point_in_rotated_rectangle", "verse.analysis.utils.project_polygon", "verse.analysis.utils.rect_corners", "verse.analysis.utils.rotated_rectangles_intersect", "verse.analysis.utils.sample_rect", "verse.analysis.utils.solve_trinom", "verse.analysis.utils.to_serializable", "verse.analysis.utils.wrap_to_pi", "verse.analysis.verifier", "verse.analysis.verifier.ReachConsts", "verse.analysis.verifier.Verifier", "verse.analysis.verifier.checkHeight", "verse.analysis.verifier.combine_rect", "verse.automaton", "verse.automaton.guard", "verse.automaton.guard.GuardExpressionAst", "verse.automaton.guard.LogicTreeNode", "verse.automaton.guard.NodeSubstituter", "verse.automaton.guard.ValueSubstituter", "verse.automaton.hybrid_automaton", "verse.automaton.hybrid_automaton.HybridAutomaton", "verse.automaton.hybrid_io_automaton", "verse.automaton.hybrid_io_automaton.HybridIoAutomaton", "verse.automaton.reset", "verse.automaton.reset.ResetExpression", "verse.map", "verse.map.example_map", "verse.map.example_map.intersection", "verse.map.example_map.intersection.Intersection", "verse.map.example_map.map_tacas", "verse.map.example_map.map_tacas.M1", "verse.map.example_map.map_tacas.M2", "verse.map.example_map.map_tacas.M3", "verse.map.example_map.map_tacas.M5", "verse.map.example_map.map_tacas.M6", "verse.map.example_map.map_tacas.get_end", "verse.map.example_map.simple_map", "verse.map.example_map.simple_map.SimpleMap", "verse.map.example_map.simple_map.SimpleMap2", "verse.map.example_map.simple_map2", "verse.map.example_map.simple_map2.SimpleMap2", "verse.map.example_map.simple_map2.SimpleMap3", "verse.map.example_map.simple_map2.SimpleMap4", "verse.map.example_map.simple_map2.SimpleMap4Switch2", "verse.map.example_map.simple_map2.SimpleMap5", "verse.map.example_map.simple_map2.SimpleMap6", "verse.map.example_map.simple_map_3d", "verse.map.example_map.simple_map_3d.SimpleMap1", "verse.map.example_map.simple_map_3d.SimpleMap2", "verse.map.example_map.simple_map_3d.SimpleMap3", "verse.map.example_map.simple_map_3d.SimpleMap4", "verse.map.example_map.simple_map_3d.SimpleMap5", "verse.map.example_map.simple_map_3d.SimpleMap6", "verse.map.example_map.simple_map_3d.SimpleMap7", "verse.map.example_map.simple_map_3d.get_center_radius", "verse.map.example_map.simple_map_3d.get_end", "verse.map.lane", "verse.map.lane.Lane", "verse.map.lane_3d", "verse.map.lane_3d.Lane_3d", "verse.map.lane_map", "verse.map.lane_map.LaneMap", "verse.map.lane_map_3d", "verse.map.lane_map_3d.LaneMap_3d", "verse.map.lane_segment", "verse.map.lane_segment.AbstractLane", "verse.map.lane_segment.CircularLane", "verse.map.lane_segment.LaneSegment", "verse.map.lane_segment.LineType", "verse.map.lane_segment.StraightLane", "verse.map.lane_segment_3d", "verse.map.lane_segment_3d.AbstractLane_3d", "verse.map.lane_segment_3d.CircularLane_3d_v1", "verse.map.lane_segment_3d.CircularLane_3d_v2", "verse.map.lane_segment_3d.LineType_3d", "verse.map.lane_segment_3d.StraightLane_3d", "verse.map.lane_segment_3d.func_a", "verse.map.lane_segment_3d.func_b", "verse.map.lane_segment_3d.get_center_radius", "verse.map.lane_segment_3d.get_coor_by_rt", "verse.map.lane_segment_3d.get_rtp_by_coor", "verse.map.lane_segment_3d.get_theta_by_coor", "verse.map.opendrive_parser", "verse.map.opendrive_parser.check_valid_side", "verse.map.opendrive_parser.condense_matrix", "verse.map.opendrive_parser.file_parser", "verse.map.opendrive_parser.opendrive_map", "verse.map.opendrive_parser.road_traverser", "verse.parser", "verse.parser.astunparser", "verse.parser.astunparser.Unparser", "verse.parser.astunparser.interleave", "verse.parser.astunparser.main", "verse.parser.astunparser.roundtrip", "verse.parser.astunparser.testdir", "verse.parser.astunparser.unparse", "verse.parser.parser", "verse.parser.parser.ArgSubstituter", "verse.parser.parser.Assert", "verse.parser.parser.CompiledAssert", "verse.parser.parser.CondVal", "verse.parser.parser.CondValCase", "verse.parser.parser.ControllerIR", "verse.parser.parser.CustomIR", "verse.parser.parser.Env", "verse.parser.parser.Lambda", "verse.parser.parser.LambdaArg", "verse.parser.parser.ModeDef", "verse.parser.parser.ModePath", "verse.parser.parser.Reduction", "verse.parser.parser.ReductionType", "verse.parser.parser.ScopeLevel", "verse.parser.parser.StateDef", "verse.parser.parser._Assert", "verse.parser.parser.ast_dump", "verse.parser.parser.compile_expr", "verse.parser.parser.find", "verse.parser.parser.fully_cond", "verse.parser.parser.is_main_check", "verse.parser.parser.merge_assert", "verse.parser.parser.merge_conds", "verse.parser.parser.merge_if", "verse.parser.parser.merge_if_single", "verse.parser.parser.merge_if_val", "verse.parser.parser.not_ir_ast", "verse.parser.parser.proc", "verse.parser.parser.proc_assign", "verse.parser.parser.unparse", "verse.plotter", "verse.plotter.plotter2D", "verse.plotter.plotter2D.check_dim", "verse.plotter.plotter2D.create_anime_dict", "verse.plotter.plotter2D.draw_map", "verse.plotter.plotter2D.duration", "verse.plotter.plotter2D.get_text_pos", "verse.plotter.plotter2D.num_digits", "verse.plotter.plotter2D.reachtube_anime", "verse.plotter.plotter2D.reachtube_tree", "verse.plotter.plotter2D.reachtube_tree_single", "verse.plotter.plotter2D.sample_trace", "verse.plotter.plotter2D.simulation_anime", "verse.plotter.plotter2D.simulation_tree", "verse.plotter.plotter2D.simulation_tree_single", "verse.plotter.plotter2D.update_style", "verse.plotter.plotter2D_old", "verse.plotter.plotter2D_old.generate_simulation_anime", "verse.plotter.plotter2D_old.plot", "verse.plotter.plotter2D_old.plot_map", "verse.plotter.plotter2D_old.plot_reachtube_tree", "verse.plotter.plotter2D_old.plot_simulation_tree", "verse.plotter.plotter3D", "verse.plotter.plotter3D.plot3dMap", "verse.plotter.plotter3D.plot3dReachtube", "verse.plotter.plotter3D.plot3dReachtubeSingle", "verse.plotter.plotter3D.plot_line_3d", "verse.plotter.plotter3D.plot_point_3d", "verse.plotter.plotter3D.plot_polytope_3d", "verse.plotter.plotter3D_new", "verse.plotter.plotter3D_new.check_dim", "verse.plotter.plotter3D_new.draw_map_3d", "verse.plotter.plotter3D_new.reachtube_tree_3d", "verse.plotter.plotter3D_new.reachtube_tree_single_3d", "verse.plotter.plotter3D_new.sample_trace", "verse.plotter.plotter3D_new.simulation_tree_3d", "verse.plotter.plotter3D_new.simulation_tree_single_3d", "verse.plotter.plotter3D_new.update_style", "verse.scenario", "verse.scenario.scenario", "verse.scenario.scenario.Benchmark", "verse.scenario.scenario.ExprConfig", "verse.scenario.scenario.Scenario", "verse.scenario.scenario.ScenarioConfig", "verse.scenario.scenario.check_ray_init", "verse.scenario.scenario.red", "verse.sensor", "verse.sensor.base_sensor", "verse.sensor.base_sensor.BaseSensor", "verse.sensor.base_sensor.add_states_2d", "verse.sensor.base_sensor.add_states_3d", "verse.sensor.base_sensor.adds", "verse.sensor.base_sensor.set_states_2d", "verse.sensor.base_sensor.set_states_3d", "verse.sensor.base_sensor.sets", "verse.sensor.example_sensor", "verse.sensor.example_sensor.craft_sensor", "verse.sensor.example_sensor.craft_sensor.CraftSensor", "verse.sensor.example_sensor.craft_sensor.add_states_2d_ball", "verse.sensor.example_sensor.craft_sensor.add_states_3d_ball", "verse.sensor.example_sensor.craft_sensor.adds", "verse.sensor.example_sensor.craft_sensor.set_states_2d_ball", "verse.sensor.example_sensor.craft_sensor.set_states_3d_ball", "verse.sensor.example_sensor.craft_sensor.sets", "verse.sensor.example_sensor.quadrotor_sensor", "verse.sensor.example_sensor.quadrotor_sensor.QuadrotorSensor", "verse.sensor.example_sensor.quadrotor_sensor.add_states_2d_ball", "verse.sensor.example_sensor.quadrotor_sensor.add_states_3d_ball", "verse.sensor.example_sensor.quadrotor_sensor.adds", "verse.sensor.example_sensor.quadrotor_sensor.set_states_2d_ball", "verse.sensor.example_sensor.quadrotor_sensor.set_states_3d_ball", "verse.sensor.example_sensor.quadrotor_sensor.sets", "verse.sensor.example_sensor.single_sensor", "verse.sensor.example_sensor.single_sensor.FakeSensor3", "verse.sensor.example_sensor.single_sensor.FakeSensor4", "verse.sensor.example_sensor.single_sensor.SingleSensor", "verse.sensor.example_sensor.single_sensor.add_states_2d", "verse.sensor.example_sensor.single_sensor.add_states_2d_ball", "verse.sensor.example_sensor.single_sensor.add_states_3d", "verse.sensor.example_sensor.single_sensor.add_states_3d_ball", "verse.sensor.example_sensor.single_sensor.adds", "verse.sensor.example_sensor.single_sensor.set_states_2d", "verse.sensor.example_sensor.single_sensor.set_states_2d_ball", "verse.sensor.example_sensor.single_sensor.set_states_3d", "verse.sensor.example_sensor.single_sensor.set_states_3d_ball", "verse.sensor.example_sensor.single_sensor.sets", "verse.sensor.example_sensor.thermo_sensor", "verse.sensor.example_sensor.thermo_sensor.ThermoSensor", "verse.sensor.example_sensor.thermo_sensor.add_states_2d_ball", "verse.sensor.example_sensor.thermo_sensor.add_states_3d_ball", "verse.sensor.example_sensor.thermo_sensor.adds", "verse.sensor.example_sensor.thermo_sensor.set_states_2d_ball", "verse.sensor.example_sensor.thermo_sensor.set_states_3d_ball", "verse.sensor.example_sensor.thermo_sensor.sets", "Agent", "Contributors", "Creating Scenario in Verse", "Getting Started", "Welcome to verse\u2019s documentation!", "Map", "Simulations", "Parser", "Visualization", "Scenario", "Sensor"], "terms": {"modul": [0, 1, 4, 18, 24, 108, 120, 121, 183, 223, 224, 261, 269, 278, 321, 324], "class": [2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 41, 42, 43, 44, 45, 46, 47, 48, 49, 65, 66, 67, 103, 104, 105, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 184, 185, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 262, 263, 264, 265, 266, 270, 271, 279, 280, 287, 288, 295, 296, 297, 298, 309, 310, 319, 324], "id": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 19, 21, 23, 27, 31, 115, 117, 152, 154, 160, 161, 162, 164, 166, 167, 168, 170, 323], "code": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 19, 21, 23, 185, 224, 239, 319, 324], "none": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 23, 26, 27, 32, 37, 39, 42, 43, 44, 45, 46, 66, 76, 88, 91, 99, 104, 105, 111, 115, 117, 152, 160, 161, 162, 164, 166, 167, 168, 170, 185, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 211, 218, 225, 231, 232, 233, 235, 236, 237, 240, 241, 242, 243, 244, 246, 247, 249, 250, 251, 253, 255, 256, 258, 259, 264, 266, 267, 319, 325], "file_nam": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 19, 21, 23, 180, 181, 319], "initial_st": [3, 8, 9, 10, 11], "initial_mod": [3, 8, 9, 10, 11], "static_param": 3, "uncertain_param": [3, 27, 57, 58], "base": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 23, 26, 27, 28, 42, 43, 44, 45, 46, 47, 48, 49, 66, 67, 104, 105, 110, 111, 112, 113, 115, 117, 119, 123, 125, 126, 127, 128, 129, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 152, 154, 156, 158, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 185, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 212, 263, 264, 265, 266, 271, 280, 288, 296, 297, 298, 310, 325], "object": [3, 18, 26, 27, 37, 42, 43, 44, 45, 46, 47, 48, 49, 66, 67, 104, 105, 110, 111, 115, 119, 152, 154, 156, 158, 160, 162, 163, 166, 169, 185, 193, 194, 197, 199, 200, 201, 202, 203, 206, 207, 208, 263, 264, 265, 266, 271, 280, 288, 296, 297, 298, 310, 325], "method": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 23, 26, 27, 37, 38, 47, 48, 49, 67, 105, 110, 112, 113, 115, 117, 123, 125, 126, 127, 128, 129, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 152, 154, 156, 158, 160, 161, 162, 164, 166, 167, 168, 170, 185, 192, 195, 196, 197, 198, 199, 200, 204, 207, 263, 264, 265, 271, 280, 288, 296, 297, 298, 310, 324], "tc_simul": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 19, 21, 23], "mode": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 23, 27, 37, 43, 57, 58, 69, 115, 117, 185, 188, 202, 319, 323, 324, 325], "initialset": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 19, 21, 23], "time_horizon": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 19, 21, 23, 37, 57, 58, 59, 60, 105], "time_step": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 19, 21, 23, 37, 57, 58, 59, 60, 66, 104, 105, 231, 235, 325], "map": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 23, 31, 66, 69, 90, 104, 227, 231, 232, 235, 236, 240, 242, 254, 255, 258, 321, 325], "abstract": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 19, 21, 23, 160, 166, 167, 168, 170, 185], "simul": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 19, 21, 23, 26, 27, 28, 31, 37, 40, 207, 235, 236, 237, 258, 259, 265, 319, 321, 324, 325], "function": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 23, 25, 33, 35, 36, 37, 39, 41, 56, 65, 75, 81, 103, 110, 112, 113, 124, 141, 165, 177, 184, 185, 191, 192, 200, 204, 224, 228, 239, 245, 252, 262, 270, 279, 287, 295, 309, 319, 321, 323, 324], "paramet": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 23, 27, 76, 78, 79, 86, 88, 89, 93, 94, 95, 98, 107, 160, 161, 164, 166, 167, 168, 170, 325], "str": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 23, 26, 27, 29, 31, 37, 42, 43, 44, 45, 53, 54, 55, 72, 73, 77, 78, 85, 104, 110, 113, 160, 164, 166, 170, 192, 193, 194, 196, 197, 199, 201, 202, 203, 204, 206, 207, 208, 217, 218, 263, 264, 266], "The": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 23, 27, 35, 36, 87, 88, 91, 110, 319, 320, 321, 323, 324, 325], "current": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 23, 26, 27, 185, 319, 324], "list": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 23, 26, 27, 35, 36, 37, 39, 40, 42, 43, 44, 45, 46, 53, 54, 66, 69, 76, 81, 83, 90, 91, 97, 99, 101, 104, 105, 107, 152, 154, 156, 158, 161, 167, 168, 195, 196, 197, 199, 200, 202, 206, 207, 208, 211, 214, 225, 241, 243, 244, 263, 264, 323, 324], "float": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 23, 26, 27, 29, 31, 35, 36, 37, 39, 43, 45, 46, 53, 54, 66, 73, 76, 78, 79, 80, 84, 86, 87, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 102, 104, 123, 160, 161, 164, 166, 167, 168, 170, 230, 319, 323], "initi": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 23, 27, 35, 36, 37, 319, 323], "condit": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 19, 21, 23, 27, 195, 196, 212, 319], "perform": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 23, 110, 325], "time": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 23, 27, 31, 37, 323, 324, 325], "horizon": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 19, 21, 23, 37], "lanemap": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 19, 21, 23, 66, 104, 110, 123, 125, 126, 127, 132, 133, 135, 136, 137, 138, 139, 140, 227], "option": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 23, 160, 161, 164, 166, 167, 168, 170], "provid": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 23, 319, 320], "i": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 23, 26, 27, 35, 36, 88, 89, 93, 94, 95, 110, 160, 161, 164, 166, 167, 168, 170, 185, 195, 212, 219, 235, 319, 320, 321, 323, 324, 325], "us": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 23, 26, 37, 105, 110, 219, 228, 319, 320, 321, 323, 324, 325], "__init__": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 23, 26, 27, 42, 43, 44, 45, 46, 47, 48, 49, 66, 67, 104, 105, 110, 111, 112, 113, 115, 117, 119, 123, 125, 126, 127, 128, 129, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 152, 154, 156, 158, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 185, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 263, 264, 265, 266, 271, 280, 288, 296, 297, 298, 310, 319], "constructor": [3, 8, 9, 10, 11, 12, 14, 15, 16, 19, 21, 23], "actual": [3, 8, 9, 10, 11, 12, 14, 15, 16, 19, 21, 23, 195, 324], "python": [3, 8, 9, 10, 11, 12, 14, 15, 16, 19, 21, 23, 319, 320, 321, 324, 325], "control": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 19, 21, 23, 324], "file": [3, 8, 9, 10, 11, 12, 14, 15, 16, 19, 21, 23, 26, 184, 185, 224, 239, 321, 323, 324], "name": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 23, 37, 185, 188, 201, 319], "baseag": [6, 8, 11, 14, 15, 16, 19, 21, 23, 27, 55, 69, 70, 71, 72, 73], "dynam": [6, 8, 9, 10, 11, 12, 14, 15, 16, 19, 21, 23, 115, 117], "frictionless": 6, "billiard": 6, "ball": [6, 320], "2d": [6, 76, 107, 321], "plane": 6, "set_initi": [6, 8, 9, 10, 11, 12, 14, 15, 16, 19, 21, 23, 319], "set_initial_mod": [6, 8, 9, 10, 11, 12, 14, 15, 16, 19, 21, 23], "set_initial_st": [6, 8, 9, 10, 11, 12, 14, 15, 16, 19, 21, 23], "set_static_paramet": [6, 8, 9, 10, 11, 12, 14, 15, 16, 19, 21, 23], "set_uncertain_paramet": [6, 8, 9, 10, 11, 12, 14, 15, 16, 19, 21, 23], "contructor": 6, "tha": 6, "exactli": [6, 18], "one": [6, 18, 26, 107, 233, 237, 256, 259, 319, 324, 325], "follow": [6, 18, 319, 323, 324], "should": [6, 18, 88, 325], "given": [6, 18, 27, 37, 160, 161, 164, 166, 167, 168, 170, 233, 237, 256, 259, 325], "pyhton": 6, "string": [6, 18, 37, 110, 319], "ddefn": 6, "static": [6, 26, 27, 105, 197, 207, 232, 233, 236, 237, 255, 256, 258, 259, 319, 323, 325], "t": [6, 18, 26, 78, 79, 81, 185, 211, 319, 324], "state": [6, 11, 18, 26, 69, 319, 323, 324], "defin": [6, 18, 319, 321, 324], "rh": 6, "od": 6, "trajectori": 6, "speed": [8, 9, 10, 325], "2": [8, 9, 10, 18, 26, 123, 225, 231, 232, 233, 235, 236, 237, 251, 253, 255, 256, 258, 259, 319, 324, 325], "accel": [8, 9, 10], "1": [8, 9, 10, 18, 78, 88, 89, 160, 161, 164, 166, 167, 168, 170, 225, 228, 231, 232, 233, 234, 235, 236, 237, 241, 243, 244, 246, 249, 253, 254, 255, 256, 257, 258, 259, 319, 325], "action_handl": [8, 9, 10, 11, 12, 14, 15, 19], "init": [8, 9, 10, 11, 12, 18, 23, 27, 43, 45, 50, 51, 52, 57, 58, 323], "time_bound": [8, 9, 10, 11, 12, 14, 15, 16, 19, 21], "lane_map": [8, 9, 10, 11, 12, 14, 15, 16, 19, 21, 37, 57, 58, 66, 104, 105, 246], "ndarrai": [8, 9, 10, 11, 12, 14, 15, 16, 19, 21, 27, 34, 38, 44, 76, 78, 79, 80, 83, 86, 88, 89, 90, 93, 94, 95, 96, 97, 98, 101, 160, 161, 164, 166, 167, 168, 170], "ani": [8, 9, 10, 11, 12, 18, 27, 44, 55, 73, 81, 194, 203, 220, 319, 324], "dtype": [8, 9, 10, 11, 12, 18, 27, 44], "float64": [8, 9, 10, 11, 12, 18, 27, 44], "carag": [9, 10, 12], "tupl": [11, 18, 42, 44, 55, 69, 76, 78, 79, 83, 86, 90, 96, 98, 160, 161, 164, 166, 167, 168, 170], "comput": [11, 18, 78, 79, 83, 160, 161, 164, 166, 167, 168, 170, 319, 324, 325], "steer": 11, "acceler": 11, "lane": [11, 123, 156, 160, 161, 163, 164, 166, 167, 168, 169, 170, 319, 325], "target": [11, 18, 221], "stanlei": 11, "like": [11, 18, 319, 324], "rule": 11, "passive_dynam": 14, "proxa_dynam": 14, "proxb_dynam": 14, "initialcondit": [14, 15, 16, 19, 21], "d_in": 18, "6": 18, "d_out": 18, "8": [18, 185, 188, 265, 266, 320], "__call__": 18, "intern": 18, "share": 18, "both": [18, 39, 110, 164, 170], "nn": 18, "scriptmodul": 18, "add_modul": 18, "add": [18, 319], "child": [18, 26, 27, 111, 323], "can": [18, 27, 28, 91, 110, 160, 161, 164, 166, 167, 168, 170, 219, 319, 320, 321, 323, 324, 325], "access": 18, "an": [18, 32, 78, 93, 185, 205, 319, 320, 321, 324, 325], "attribut": [18, 224], "arg": [18, 35, 36, 37, 39, 40, 61, 63, 101, 163, 169, 187, 192, 197, 198, 200, 264, 271, 280, 288, 296, 297, 298, 310], "from": [18, 26, 27, 31, 123, 160, 161, 164, 166, 167, 168, 170, 195, 200, 319, 321, 324], "thi": [18, 26, 27, 37, 39, 110, 164, 170, 185, 224, 239, 319, 324, 325], "ad": 18, "appli": [18, 200, 204], "fn": [18, 26], "callabl": [18, 77, 81, 85, 211], "recurs": [18, 185], "everi": [18, 325], "submodul": 18, "return": [18, 26, 31, 32, 35, 36, 37, 39, 40, 76, 78, 79, 83, 88, 89, 91, 93, 95, 97, 98, 105, 107, 110, 160, 161, 164, 166, 167, 168, 170, 319, 324, 325], "children": [18, 27], "well": [18, 26, 324], "self": [18, 27, 319], "typic": [18, 325], "includ": [18, 26, 97], "model": 18, "see": [18, 76, 83, 110, 204, 324], "also": [18, 319, 324], "doc": 18, "each": [18, 26, 27, 31, 123, 186, 323, 324], "exampl": [18, 123, 319, 320, 324], "torch": 18, "no_grad": 18, "def": [18, 200, 319], "init_weight": 18, "m": [18, 160, 161, 164, 166, 167, 168, 170, 320], "print": [18, 185], "type": [18, 27, 28, 81, 163, 164, 169, 170, 185, 199, 202, 206, 207, 208, 219, 319, 323, 324, 325], "linear": [18, 90], "weight": [18, 160, 161, 164, 166, 167, 168, 170], "fill_": 18, "0": [18, 78, 89, 92, 110, 160, 161, 164, 166, 167, 168, 170, 227, 241, 243, 244, 246, 251, 254, 319], "net": 18, "sequenti": 18, "in_featur": 18, "out_featur": 18, "bia": 18, "true": [18, 26, 110, 154, 161, 167, 168, 173, 174, 175, 176, 214, 216, 217, 218, 247, 248, 251, 264, 265, 266], "contain": [18, 26, 37, 79, 88, 110, 324, 325], "tensor": 18, "bfloat16": 18, "cast": 18, "all": [18, 26, 27, 40, 105, 110, 195, 232, 236, 255, 258, 320, 324, 325], "point": [18, 26, 35, 39, 76, 93, 94, 95, 166, 167, 168, 170, 175, 176, 250, 325], "buffer": 18, "datatyp": 18, "modifi": 18, "place": 18, "bool": [18, 26, 53, 54, 76, 84, 86, 88, 89, 93, 94, 95, 97, 98, 110, 160, 161, 164, 166, 167, 168, 170, 197, 201, 211, 212, 213, 219, 264, 266, 267], "iter": [18, 32, 204], "over": [18, 78, 79, 204], "yield": 18, "otherwis": [18, 325], "onli": [18, 35, 36, 110, 319, 324, 325], "ar": [18, 26, 76, 196, 228, 319, 324, 325], "direct": [18, 82, 123, 319], "member": [18, 207, 324], "buf": 18, "size": [18, 91, 123], "20l": 18, "1l": 18, "5l": 18, "immedi": 18, "cpu": 18, "move": [18, 319], "cuda": 18, "devic": 18, "int": [18, 26, 27, 32, 37, 39, 42, 43, 44, 45, 66, 104, 123, 161, 164, 167, 168, 170, 225, 231, 232, 233, 234, 235, 236, 237, 241, 243, 244, 253, 255, 256, 257, 258, 259, 266, 323], "gpu": 18, "make": [18, 321], "associ": [18, 319], "differ": [18, 28, 321, 324, 325], "so": [18, 324], "call": [18, 110, 112, 113, 186, 192, 324], "befor": 18, "construct": [18, 27, 324], "optim": 18, "live": 18, "while": [18, 319], "being": [18, 324], "specifi": [18, 319, 325], "copi": [18, 27, 319], "doubl": 18, "eval": 18, "set": [18, 26, 27, 35, 36, 37, 42, 44, 91, 199, 207, 319, 325], "evalu": [18, 110, 324], "ha": [18, 86, 164, 170, 324, 325], "effect": 18, "certain": 18, "document": [18, 319, 325], "particular": 18, "detail": [18, 319, 320, 325], "behavior": 18, "train": 18, "thei": [18, 98, 324], "affect": 18, "e": [18, 26, 123, 210, 222, 320, 324], "g": [18, 123, 324], "dropout": 18, "batchnorm": 18, "etc": 18, "equival": 18, "fals": [18, 97, 110, 161, 164, 167, 168, 170, 209, 214, 216, 217, 218, 235, 264, 265, 266, 325], "local": [18, 160, 161, 164, 166, 167, 168, 170], "disabl": 18, "grad": 18, "comparison": 18, "between": [18, 35, 36, 39, 83, 87, 186, 319], "sever": [18, 91, 320], "similar": [18, 324, 325], "mechan": 18, "mai": [18, 324, 325], "confus": 18, "extra_repr": 18, "extra": 18, "represent": 18, "To": [18, 319, 320], "custom": [18, 324], "inform": [18, 325], "you": [18, 91, 325], "re": 18, "implement": 18, "your": 18, "own": 18, "singl": [18, 37, 196, 204, 324], "line": [18, 83, 123, 163, 164, 169, 170, 185, 227, 231, 232, 235, 236, 325], "multi": 18, "accept": 18, "forward": [18, 319], "x": [18, 76, 80, 90, 91, 92, 94, 102, 319, 325], "overridden": 18, "subclass": 18, "although": 18, "recip": 18, "pass": [18, 319], "need": [18, 110, 207, 319, 324], "within": [18, 26], "instanc": [18, 27, 160, 161, 164, 166, 167, 168, 170], "afterward": 18, "instead": [18, 324], "sinc": [18, 35, 36, 319, 324, 325], "former": 18, "take": [18, 319, 324], "care": 18, "run": [18, 263, 320], "regist": 18, "hook": 18, "latter": 18, "silent": 18, "ignor": [18, 319], "them": [18, 324, 325], "get_buff": 18, "exist": [18, 112, 113, 192, 319], "throw": 18, "error": [18, 324], "docstr": 18, "get_submodul": 18, "more": [18, 319, 320, 324, 325], "explan": 18, "": [18, 26, 27, 28, 74, 268, 319, 324, 325], "how": [18, 319, 320, 324], "correctli": 18, "fulli": [18, 26], "qualifi": 18, "look": [18, 319], "referenc": 18, "rais": 18, "attributeerror": 18, "If": [18, 110, 213, 325], "refer": [18, 319], "invalid": 18, "path": [18, 43, 45, 77, 184, 197], "resolv": [18, 324], "someth": 18, "get_extra_st": 18, "state_dict": 18, "correspond": [18, 26, 160, 161, 164, 166, 167, 168, 170, 319], "set_extra_st": 18, "store": [18, 27, 110, 323, 324], "when": [18, 31, 37, 123, 319, 324, 325], "build": 18, "note": [18, 325], "pickleabl": 18, "ensur": 18, "work": [18, 319, 321], "serial": [18, 160, 161, 164, 166, 167, 168, 170], "we": [18, 35, 36, 110, 319, 324, 325], "backward": 18, "compat": 18, "guarante": [18, 26], "other": [18, 26, 27, 319, 324], "break": 18, "pickl": 18, "form": [18, 323, 324], "chang": [18, 164, 170], "get_paramet": 18, "For": [18, 26, 319, 325], "let": 18, "sai": 18, "have": [18, 110, 319, 324, 325], "A": [18, 26, 27, 76, 83, 160, 161, 163, 164, 166, 167, 169, 170, 195, 196, 200, 204, 251, 319, 320], "net_b": 18, "net_c": 18, "conv": 18, "conv2d": 18, "16": 18, "33": 18, "kernel_s": 18, "3": [18, 123, 253, 255, 256, 258, 259, 319, 320, 324, 325], "stride": 18, "100": [18, 250], "200": 18, "diagram": 18, "show": [18, 232, 233, 236, 237, 255, 256, 258, 259, 319, 325], "nest": 18, "which": [18, 160, 161, 164, 166, 167, 168, 170, 319, 321, 323, 324, 325], "itself": 18, "two": [18, 76, 98, 319, 325], "check": [18, 26, 37, 76, 86, 88, 89, 93, 94, 95, 105, 110, 197, 212, 324, 325], "whether": [18, 26, 88, 160, 161, 164, 166, 167, 168, 170], "would": [18, 324], "runtim": 18, "bound": [18, 35, 36, 37, 39, 78], "degre": 18, "queri": 18, "against": 18, "named_modul": 18, "achiev": [18, 324], "same": [18, 26, 40, 324, 325], "result": [18, 110, 195, 319, 323], "o": [18, 324], "n": [18, 88, 130, 149, 150, 171, 172, 173, 174, 175, 176, 325], "number": [18, 26, 27, 37, 91, 123, 325], "transit": [18, 27, 31, 42, 43, 44, 45, 51, 52, 319, 325], "simpl": [18, 204, 319, 324], "some": [18, 207, 212, 219, 324, 325], "alwai": [18, 35, 36, 91], "abov": [18, 319], "half": 18, "ipu": 18, "argument": [18, 324], "load_state_dict": 18, "strict": [18, 26], "its": [18, 160, 166, 319], "descend": 18, "kei": [18, 27], "must": [18, 204], "match": 18, "dict": [18, 27, 31, 43, 45, 53, 54, 55, 66, 73, 78, 79, 88, 104, 110, 142, 143, 144, 145, 146, 160, 161, 164, 166, 167, 168, 170, 192, 196, 197, 199, 206, 217, 218], "persist": 18, "strictli": 18, "enforc": 18, "default": [18, 325], "namedtupl": 18, "missing_kei": 18, "unexpected_kei": 18, "field": [18, 72], "miss": [18, 105, 320], "unexpect": 18, "runtimeerror": 18, "network": 18, "duplic": 18, "onc": [18, 324], "In": [18, 319, 324], "l": [18, 32, 81, 211], "idx": [18, 61, 63], "enumer": [18, 205], "named_buff": 18, "prefix": [18, 26], "prepend": 18, "running_var": 18, "named_children": 18, "conv4": 18, "conv5": 18, "memo": 18, "remove_dupl": 18, "alreadi": [18, 105, 110], "remov": 18, "named_paramet": 18, "param": [18, 83, 91, 97, 105], "register_backward_hook": 18, "removablehandl": 18, "deprec": 18, "favor": 18, "register_full_backward_hook": 18, "futur": 18, "version": [18, 320], "util": 18, "handl": [18, 110], "register_buff": 18, "consid": [18, 324], "running_mean": 18, "part": [18, 319, 324], "save": [18, 26], "alongsid": 18, "non": 18, "oper": 18, "zero": 18, "num_featur": 18, "register_forward_hook": 18, "after": [18, 40], "output": [18, 78, 79, 88, 185, 188, 224, 239, 324], "It": [18, 227, 231, 232, 233, 235, 236, 237, 255, 256, 258, 259, 325], "signatur": 18, "input": [18, 110, 319, 324], "posit": [18, 97, 160, 161, 164, 166, 167, 168, 170, 319, 325], "keyword": 18, "won": 18, "inplac": 18, "register_forward_pre_hook": 18, "pre": [18, 193, 194, 208, 319], "invok": 18, "user": [18, 319, 325], "either": [18, 27, 28, 37, 39, 91, 200], "valu": [18, 26, 27, 28, 36, 90, 110, 195, 196, 204, 205, 212, 325], "wrap": 18, "unless": [18, 324], "gradient": [18, 26], "respect": [18, 26], "grad_input": 18, "grad_output": 18, "new": [18, 89, 164, 170, 320, 324], "subsequ": 18, "kwarg": [18, 163, 169, 198, 271, 280, 288, 296, 297, 298, 310], "entri": 18, "technic": 18, "reason": 18, "receiv": 18, "view": 18, "similarli": 18, "caller": 18, "allow": [18, 324], "register_load_state_dict_post_hook": 18, "post": 18, "incompatible_kei": 18, "consist": [18, 88, 224, 239], "modif": 18, "expect": 18, "addit": [18, 324], "thrown": 18, "clearn": 18, "out": [18, 27], "avoid": [18, 319], "register_modul": 18, "alia": [18, 160, 161, 164, 166, 167, 168, 170], "register_paramet": 18, "requires_grad_": 18, "requires_grad": 18, "autograd": 18, "record": 18, "help": 18, "freez": 18, "finetun": 18, "individu": 18, "gan": 18, "found": [18, 32, 320], "share_memori": 18, "share_memory_": 18, "destin": 18, "keep_var": 18, "dictionari": [18, 78, 79, 88], "whole": [18, 212], "averag": 18, "order": [18, 26, 324], "howev": 18, "releas": 18, "pleas": 18, "design": 18, "end": [18, 26, 149, 164, 166, 167, 168, 170, 173, 249, 319, 324], "updat": [18, 105, 319, 320], "ordereddict": 18, "creat": [18, 160, 161, 164, 166, 167, 168, 170, 320, 321], "compos": 18, "detach": 18, "non_block": 18, "memory_format": 18, "channels_last": 18, "Its": [18, 325], "complex": 18, "integr": 18, "unchang": [18, 27], "tri": 18, "convert": [18, 160, 161, 164, 166, 167, 168, 170, 324], "asynchron": 18, "host": 18, "possibl": [18, 324], "pin": 18, "memori": 18, "below": [18, 228, 319, 324], "desir": [18, 90], "whose": 18, "format": [18, 185, 323], "4d": 18, "1913": 18, "3420": 18, "5113": 18, "2325": 18, "gpu1": 18, "1914": 18, "5112": 18, "2324": 18, "float16": 18, "cdoubl": 18, "3741": 18, "j": 18, "2382": 18, "5593": 18, "4443": 18, "complex128": 18, "ones": [18, 324], "6122": 18, "1150": 18, "to_empti": 18, "without": [18, 27, 110, 235, 325], "storag": 18, "dst_type": 18, "xpu": 18, "zero_grad": 18, "set_to_non": 18, "under": 18, "context": 18, "t_v_pair": [19, 142, 143, 144, 145, 146, 319], "box_sid": [19, 142, 143, 144, 145, 146, 319], "runmodel": 19, "lanemap_3d": [19, 128, 129, 142, 143, 144, 145, 146, 147, 148, 254], "root": [26, 27, 68, 106, 231, 232, 233, 234, 235, 236, 237, 240, 243, 244, 247, 255, 256, 257, 258, 259, 325], "analysistreenod": [26, 28, 231, 232, 233, 235, 236, 237, 255, 256, 258, 259], "tree": [26, 31, 185, 190, 212], "reachabl": [26, 160, 161, 164, 166, 167, 168, 170, 319, 321], "scenario": [26, 320, 321, 323, 325], "produc": 26, "tol": 26, "constain": 26, "bloat": [26, 37, 105], "small": [26, 93], "close": [26, 319], "enough": 26, "requir": [26, 319, 320], "agent": [26, 27, 31, 57, 58, 69, 70, 71, 72, 73, 110, 233, 237, 256, 259, 320, 321, 323, 324], "dump": [26, 197, 199, 209, 264, 323], "json": [26, 160, 161, 164, 166, 167, 168, 170, 323], "data": [26, 27, 78, 79, 88, 111, 227, 231, 232, 233, 235, 236, 237, 238, 241, 254, 255, 256, 258, 259, 260, 325], "is_equ": 26, "compar": [26, 264], "trace": [26, 27, 28, 40, 44, 107, 231, 232, 233, 235, 236, 237, 255, 256, 258, 259, 319, 323, 325], "simpli": [26, 324], "rang": [26, 27, 90], "start": [26, 130, 149, 150, 164, 166, 167, 168, 170, 173, 249, 319, 321], "dimens": [26, 325], "leav": [26, 185], "load": 26, "node": [26, 27, 112, 113, 192, 197, 209, 213, 220, 323, 325], "visual": [26, 319, 321], "graph": [26, 325], "networkx": 26, "edg": [26, 97, 115, 117, 247, 248, 251], "denot": [26, 28], "parent": [26, 27, 323], "relationship": 26, "color": [26, 227, 233, 237, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 254, 256, 259, 319, 325], "accord": [26, 89, 185, 325], "red": [26, 251], "blue": [26, 249, 250], "start_tim": [26, 27, 323], "where": [26, 78, 79, 325], "signifi": 26, "newer": 26, "older": 26, "visualize_dot": 26, "filenam": [26, 188], "otyp": 26, "liter": 26, "png": 26, "svg": 26, "pdf": [26, 320], "jpg": 26, "font": 26, "rather": 26, "graphviz": 26, "doesn": [26, 324], "extens": 26, "dot": 26, "sequenc": [27, 76, 86, 90, 93, 94, 96, 98, 161, 164, 167, 168, 170], "height": 27, "assert_hit": [27, 323], "ndigit": 27, "analysistreenodetyp": 27, "contin": [27, 110], "execut": [27, 324], "system": [27, 324], "happen": [27, 324], "discret": [27, 110, 319, 324], "per": [27, 123, 324], "assert": [27, 42, 44, 197, 200, 206], "hit": 27, "label": [27, 193, 194, 208, 325], "empti": [27, 197, 200], "get_mod": 27, "agent_id": [27, 51, 52, 105, 233, 237, 243, 244, 247, 256, 259], "filter": 27, "get_track": 27, "track": [27, 319, 324], "depth": 27, "analysistre": [27, 31, 66, 104, 231, 232, 233, 235, 236, 237, 255, 256, 258, 259], "integ": [27, 325], "uniqu": 27, "amongst": 27, "digit": [27, 325], "round": 27, "new_child": 27, "item": [27, 32, 186], "root_from_init": 27, "earliest": 27, "simtrac": [27, 323], "reachtub": [27, 107, 224, 239, 321, 324, 325], "uncertainti": [27, 324], "enum": [28, 205, 319, 324], "reach": [28, 37], "tube": [28, 37, 46, 105, 248], "c1": 29, "c2": 29, "mix": 29, "collect": 31, "first": [31, 88, 319], "_t": [32, 185], "get": [32, 105, 160, 161, 164, 166, 167, 168, 170, 321], "index": [32, 105, 321], "training_trac": [34, 38], "initial_radii": [34, 38], "lower": [35, 36, 37, 39], "upper": [35, 36, 37, 39, 78], "calcul": [35, 36, 37, 87, 105], "center": [35, 82, 86, 93, 95, 97, 98, 123, 161, 167, 174, 175, 176, 325], "support": [35, 36, 39, 324], "assu": [35, 36], "lowerbound": [35, 36], "upperbound": [35, 36], "delta": [35, 36, 78], "mode_label": [37, 105], "initial_set": [37, 59, 60, 105], "sim_func": [37, 105], "bloating_method": 37, "kvalu": [37, 105], "sim_trace_num": [37, 105], "guard_check": [37, 105], "guard_str": [37, 105], "determin": [37, 164, 170, 319, 324, 325], "global": 37, "pw": 37, "discrep": 37, "core": 37, "guard": [37, 69, 115, 117, 324], "pwglobal": 38, "arrai": 38, "seed": [39, 99], "pick": 39, "random": 39, "trim": 40, "length": [40, 86, 93, 95, 97, 98, 123], "gener": [40, 204, 323, 324, 325], "cachedreachtran": 42, "node_id": [42, 44], "dest": 43, "reset": [43, 115, 117], "reset_idx": 43, "parser": [43, 45, 321], "modepath": [43, 45, 197], "numpi": 44, "cachedtransit": 44, "disc": [45, 69, 73, 207, 272, 273, 275, 276, 281, 282, 284, 285, 289, 290, 292, 293, 299, 300, 301, 302, 304, 305, 306, 307, 311, 312, 314, 315], "cont": [45, 69, 73, 207, 272, 273, 281, 282, 289, 290, 299, 300, 301, 302, 311, 312], "add_tub": [47, 49], "check_hit": [47, 48, 49], "get_cached_init": [47, 48], "iter_tre": [47, 48], "query_cont": [47, 48], "add_seg": 48, "transit_ag": [51, 52], "trans_ind": [51, 52], "b": [53, 54, 76, 80, 83, 100, 197, 241, 242, 243, 244, 247, 251], "old_ag": 55, "new_ag": 55, "cach": [55, 105], "cachedseg": 55, "uncertain_var_bound": [59, 60], "decomposit": [59, 60], "expr_func": [61, 63], "jac_func": [61, 63], "var_rang": [61, 62, 63, 64], "num_var": [61, 63], "expr": [62, 64, 192, 193, 198, 200, 203, 204, 208, 214, 216], "run_num": [66, 104], "past_run": [66, 104], "analysis_tre": [66, 104, 259], "sensor": [66, 104, 319, 321, 324], "basesensor": [66, 104], "agent_dict": [66, 104], "config": [67, 105, 160, 161, 164, 166, 167, 168, 170, 264, 265], "get_transition_simul": 67, "get_transition_simulate_simpl": 67, "proc_result": [67, 105], "simulate_on": 67, "simulate_simpl": [67, 265], "max_height": [68, 106], "inp": [70, 71], "dl": [70, 71], "ego_ty_nam": 73, "track_map": [73, 110, 319], "displacement_a": 76, "displacement_b": 76, "polygon": [76, 96], "intersect": [76, 83, 98], "http": [76, 83], "www": 76, "codeproject": 76, "com": [76, 83], "articl": 76, "15573": 76, "collis": 76, "detect": 76, "y": [76, 78, 79, 89, 90, 94, 319, 325], "veloc": 76, "translat": 76, "vector": 76, "lambda_": 78, "1e": 78, "05": 78, "sigma": [78, 89], "param_bound": 78, "confid": [78, 79, 88, 89], "ellipsoid": [78, 88, 89], "theta": [78, 79, 88, 89, 166, 167, 168, 170, 174], "phi": [78, 79, 89], "featur": [78, 79, 88, 89], "phi_0": [78, 79, 88], "phi_n": [78, 79, 88], "y_0": [78, 79, 88], "y_n": [78, 79, 88], "lambda": [78, 81, 196, 197, 206, 217, 218, 324], "l2": 78, "regular": 78, "level": [78, 164, 170, 185, 228], "nois": [78, 89], "covari": [78, 89], "norm": 78, "estim": [78, 79, 89], "gramian": [78, 79, 89], "matrix": [78, 79, 89], "g_n_lambda": [78, 79], "radiu": [78, 79, 82, 89, 161, 167, 175], "beta_n": [78, 79], "parameter_box": [79, 88], "polytop": 79, "box": [79, 88, 321], "theta_min": [79, 88], "theta_max": [79, 88], "vertic": 79, "f": [81, 186, 211], "rect": [83, 97, 99, 107], "segment": 83, "rectangl": [83, 94, 95, 97, 98, 325], "math": 83, "stackexchang": 83, "2788041": 83, "r": [83, 174, 176, 319, 320], "q": 83, "c": [83, 100, 215], "d": [83, 274, 277, 283, 286, 291, 294, 303, 308, 313, 316], "distanc": [83, 87, 123, 160, 161, 164, 166, 167, 168, 170], "rq": 83, "abcd": 83, "durat": [84, 226], "timer": 84, "cl": 85, "rect1": [86, 98], "rect2": [86, 98], "corner": [86, 97], "insid": [86, 93, 94, 95, 319], "width": [86, 93, 95, 97, 98, 123, 160, 161, 164, 166, 167, 168, 170, 246], "angl": [86, 93, 95, 97, 98], "min_a": 87, "max_a": 87, "min_b": 87, "max_b": 87, "mina": 87, "maxa": 87, "minb": 87, "maxb": 87, "neg": 87, "interv": [87, 110], "overlap": 87, "dataset": 88, "last": 88, "observ": [88, 89, 319], "obtain": [88, 319, 324], "beta": 89, "valid": [89, 324], "v": [90, 206, 319], "num_bin": 91, "size_bin": 91, "split": 91, "bin": 91, "even": 91, "distribut": 91, "sum": 91, "equal": [91, 197], "total": 91, "ep": 92, "01": 92, "ellips": 93, "main": [93, 224, 239], "axi": [93, 96, 319], "big": 93, "rect_min": 94, "rect_max": 94, "x_min": 94, "y_min": 94, "x_max": 94, "y_max": 94, "rotat": [95, 98], "rad": [95, 160, 161, 164, 166, 167, 168, 170], "include_midpoint": 97, "include_cent": 97, "middl": 97, "do": [98, 110, 324], "init_seg_length": [104, 265, 266], "reachability_method": [104, 265, 266], "apply_cont_var_updat": 105, "apply_reset": 105, "compute_full_reachtub": 105, "compute_full_reachtube_step": 105, "get_transition_verify_opt": 105, "calculate_full_bloated_tube_simpl": 105, "cached_tube_info": 105, "increment": [105, 265, 266], "combine_seg_length": 105, "1000": [105, 265, 266], "full": [105, 325], "noncach": 105, "tba": 105, "check_cache_bloated_tub": 105, "combin": [105, 107, 195, 319, 325], "seg": 105, "guard_list": 110, "guard_idx": 110, "evaluate_guard": 110, "evaluate_guard_cont": 110, "parse_any_al": 110, "parse_any_all_new": 110, "unroll_any_al": 110, "unroll_any_all_new": 110, "evaluate_guard_disc": 110, "discrete_variable_dict": 110, "continuous_variable_dict": 110, "involv": 110, "variabl": [110, 115, 207, 319, 324], "evaluate_guard_hybrid": 110, "atom": 110, "continu": [110, 319, 321, 324], "hybrid": [110, 321], "especi": 110, "want": 110, "arithmet": 110, "replac": 110, "temp": 110, "constant": 110, "By": 110, "now": [110, 319], "becom": 110, "what": 110, "generate_z3_express": 110, "automat": 110, "satisfi": [110, 324], "is_contain": 110, "th": 110, "en": 110, "unsatisfi": 110, "val": [111, 113, 196, 203, 221, 230, 272, 273, 274, 275, 276, 277, 281, 282, 283, 284, 285, 286, 289, 290, 291, 292, 293, 294, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316], "mode_guard": 111, "old_nod": 112, "new_nod": 112, "nodetransform": [112, 113, 192], "visit_const": [112, 113, 192], "visit_reduct": [112, 113], "generic_visit": [112, 113, 192], "explicit": [112, 113, 192], "visitor": [112, 113, 192], "visit": [112, 113, 192], "visit_attribut": 113, "visit_nam": 113, "discrete_vari": [115, 117], "generate_automaton_json": [115, 117], "input_vari": 117, "output_vari": 117, "internal_vari": 117, "hybridautomaton": 117, "20": [123, 161, 164, 167, 168, 170, 246, 319], "300": 123, "cross": 123, "curv": [123, 160, 166], "straight": [123, 164, 170, 319], "meet": 123, "road": [123, 160, 166, 182], "outsid": 123, "north": 123, "add_lan": [123, 125, 126, 127, 128, 129, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 156, 158], "get_all_speed_limit": [123, 125, 126, 127, 132, 133, 135, 136, 137, 138, 139, 140, 156], "get_altitud": [123, 125, 126, 127, 132, 133, 135, 136, 137, 138, 139, 140, 154, 156], "get_lane_head": [123, 125, 126, 127, 132, 133, 135, 136, 137, 138, 139, 140, 156], "get_lane_seg": [123, 125, 126, 127, 128, 129, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 152, 154, 156, 158], "get_lane_width": [123, 125, 126, 127, 128, 129, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 152, 154, 156, 158], "get_lateral_dist": [123, 125, 126, 127, 128, 129, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 152, 154, 156, 158], "get_longitudinal_posit": [123, 125, 126, 127, 128, 129, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 152, 154, 156, 158], "get_phys_lan": [123, 125, 126, 127, 132, 133, 135, 136, 137, 138, 139, 140, 156], "get_speed_limit": [123, 125, 126, 127, 132, 133, 135, 136, 137, 138, 139, 140, 152, 156], "h": [123, 125, 126, 127, 128, 129, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 156, 158, 319], "h_exist": [123, 125, 126, 127, 128, 129, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 156, 158], "lane_geometri": [123, 125, 126, 127, 128, 129, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 156, 158], "left_lan": [126, 128, 129, 137, 142, 143, 144, 145, 146, 147, 148, 158], "right_lan": [126, 128, 129, 137, 142, 143, 144, 145, 146, 147, 148, 158], "altitud": [128, 129, 142, 143, 144, 145, 146, 147, 148, 158, 166, 167, 168, 170], "check_guard_box": [128, 129, 142, 143, 144, 145, 146, 147, 148, 158], "down_lan": [128, 129, 142, 143, 144, 145, 146, 147, 148, 158], "g_func": [128, 129, 142, 143, 144, 145, 146, 147, 148, 158], "get_curr_waypoint": [128, 129, 142, 143, 144, 145, 146, 147, 148, 158], "get_l_r_theta": [128, 129, 142, 143, 144, 145, 146, 147, 148, 154, 158], "get_next_point": [128, 129, 142, 143, 144, 145, 146, 147, 148, 158], "get_theta_angl": [128, 129, 142, 143, 144, 145, 146, 147, 148, 154, 158], "get_time_limit": [128, 129, 142, 143, 144, 145, 146, 147, 148, 158], "h_func": [128, 129, 142, 143, 144, 145, 146, 147, 148, 158], "has_down": [128, 129, 142, 143, 144, 145, 146, 147, 148, 158], "has_left": [128, 129, 142, 143, 144, 145, 146, 147, 148, 158], "has_right": [128, 129, 142, 143, 144, 145, 146, 147, 148, 158], "has_up": [128, 129, 142, 143, 144, 145, 146, 147, 148, 158], "pair_lan": [128, 129, 142, 143, 144, 145, 146, 147, 148, 158], "trans_func": [128, 129, 142, 143, 144, 145, 146, 147, 148, 158], "up_lan": [128, 129, 142, 143, 144, 145, 146, 147, 148, 158], "h_exist_func": 129, "len": [130, 150], "phase": [149, 173], "seg_list": [152, 154], "abstractlan": [152, 161, 164], "speed_limit": [152, 161, 164, 167, 168, 170], "get_head": 152, "abstractlane_3d": [154, 167, 170], "plot": [154, 264, 319, 325], "lane_seg_list": [156, 158], "lane_3d": 158, "describ": [160, 166, 319, 321], "central": [160, 166], "after_end": [160, 161, 164, 166, 167, 168, 170], "l1": [160, 161, 164, 166, 167, 168, 170], "distance_with_head": [160, 161, 164, 166, 167, 168, 170], "head": [160, 161, 164, 166, 167, 168, 170], "heading_weight": [160, 161, 164, 166, 167, 168, 170], "classmethod": [160, 161, 164, 166, 167, 168, 170], "from_config": [160, 161, 164, 166, 167, 168, 170], "heading_at": [160, 161, 164, 166, 167, 168, 170], "longitudin": [160, 161, 164, 166, 167, 168, 170], "coordin": [160, 161, 164, 166, 167, 168, 170, 325], "is_reachable_from": [160, 161, 164, 166, 167, 168, 170], "world": [160, 161, 164, 166, 167, 168, 170], "local_coordin": [160, 161, 164, 166, 167, 168, 170], "later": [160, 161, 164, 166, 167, 168, 170, 319, 320, 324], "metaclass__": [160, 161, 164, 166, 167, 168, 170], "abcmeta": [160, 161, 164, 166, 167, 168, 170], "on_lan": [160, 161, 164, 166, 167, 168, 170], "margin": [160, 161, 164, 166, 167, 168, 170, 325], "known": [160, 161, 164, 166, 167, 168, 170, 319], "supplementari": [160, 161, 164, 166, 167, 168, 170], "around": [160, 161, 164, 166, 167, 168, 170], "to_config": [160, 161, 164, 166, 167, 168, 170], "write": [160, 161, 164, 166, 167, 168, 170, 185], "width_at": [160, 161, 164, 166, 167, 168, 170], "start_phas": [161, 167], "end_phas": [161, 167], "clockwis": 161, "4": [161, 164, 167, 168, 170, 228, 319], "line_typ": [161, 164, 167, 168, 170], "linetyp": [161, 164], "forbidden": [161, 164, 167, 168, 170], "prioriti": [161, 164, 167, 168, 170], "go": [161, 164, 167, 170, 227, 237, 238, 319, 325], "circl": [161, 167], "arc": [161, 167], "lane_paramet": 162, "get_geometri": 162, "side": [163, 164, 169, 170, 178], "who": [164, 170], "right": [164, 170], "wai": [164, 170, 324, 325], "avg": [166, 167, 168, 170], "z": [166, 167, 168, 170, 319], "norm_vec": [167, 168], "right_rot": [167, 168, 173, 174, 175, 176], "linetype_3d": [167, 168, 170], "get_lane_cent": [167, 168, 170], "get_outer_cent": [167, 168], "get_sample_point": [167, 168, 170], "get_start_end_tang": [167, 168], "get_tang": [167, 168, 170], "delta_phas": 168, "circularlane_3d_v1": 168, "drive_way_matrix": 179, "width_2d": 179, "usag": [184, 325], "unpars": 184, "py": [184, 319, 320], "sourc": [184, 185, 325], "_io": [185, 188], "textiowrapp": [185, 188], "stdout": [185, 188], "w": [185, 188], "encod": [185, 188], "utf": [185, 188], "travers": 185, "ast": [185, 196, 197, 204, 206, 217, 218, 219, 220, 221, 324], "syntax": 185, "origin": 185, "disregard": 185, "sy": 185, "dispatch": 185, "enter": 185, "increas": 185, "indent": 185, "fill": [185, 325], "text": 185, "piec": 185, "decreas": 185, "append": [185, 324], "inter": 186, "seq": 186, "visit_arg": 192, "cond": [193, 194, 196, 203, 208], "_ast": [193, 203, 206, 208], "elem": 195, "condvalcas": [195, 324], "customir": [195, 196, 204], "case": [195, 196, 320, 324], "set_field": [195, 196, 198, 204], "condval": [196, 197, 206, 217, 218, 324], "reduct": [196, 197, 206, 217, 218], "scopevalu": [196, 197, 206, 217, 218], "implicitli": [196, 324], "ed": [196, 200, 324], "togeth": [196, 319, 324], "lambdaarg": [197, 200], "compiledassert": 197, "asserts_veri": 197, "state_def": [197, 199], "statedef": [197, 199], "mode_def": [197, 199], "modedef": [197, 199], "controller_cod": [197, 199], "from_env": 197, "pars": [197, 199], "ir_eq": 197, "ir": 197, "factori": [199, 202, 206, 207, 208], "scope": [199, 217, 324], "scopelevel": 199, "add_assert": 199, "add_hol": 199, "dump_scop": 199, "lookup": 199, "pop": 199, "push": 199, "trans_arg": 199, "bodi": [200, 324], "_assert": [200, 206, 214], "closur": 200, "come": [200, 320], "from_ast": 200, "typ": 201, "nonetyp": [201, 208], "is_list": 201, "cond_veri": 203, "var": 203, "val_veri": 203, "op": 204, "reductiontyp": 204, "claus": 204, "union": [206, 208], "forwardref": 206, "disc_typ": 207, "static_typ": 207, "verif": [207, 325], "all_var": 207, "test": [214, 216, 217, 218, 324], "orig": [214, 218], "env": [216, 217, 220, 221], "substitut": [219, 324], "dryvr": [224, 239, 265, 266], "num_dim": [225, 253], "x_dim": [225, 231, 232, 233, 235, 236, 237, 241, 243, 244, 247, 248, 253, 255, 256, 258, 259, 325], "y_dim": [225, 231, 232, 233, 235, 236, 237, 247, 248, 253, 255, 256, 258, 259, 325], "print_dim_list": [225, 231, 232, 233, 235, 236, 237, 253, 255, 256, 258, 259, 325], "10": 226, "rgba": [227, 254], "5": [227, 319], "fig": [227, 231, 232, 233, 235, 236, 237, 238, 240, 241, 242, 243, 244, 254, 255, 256, 258, 259, 260, 319, 325], "figur": [227, 231, 232, 233, 235, 236, 237, 238, 254, 255, 256, 258, 259, 260, 319, 325], "layout": [227, 231, 232, 233, 235, 236, 237, 238, 254, 255, 256, 258, 259, 260], "templat": [227, 231, 232, 233, 235, 236, 237, 238, 254, 255, 256, 258, 259, 260], "fill_typ": [227, 254], "draw": [227, 325], "These": [228, 324], "high": 228, "recommend": 228, "veh_mod": 229, "map_typ": [231, 232, 235, 236, 255, 258, 325], "scale_typ": [231, 232, 235, 236, 325], "label_mod": [231, 232, 235, 236, 325], "sample_r": [231, 232, 234, 235, 236, 255, 257, 258, 325], "speed_rat": [231, 235, 325], "combine_rect": [231, 232, 233, 255, 256, 325], "give": [231, 235], "anim": [231, 235, 325], "verfic": [231, 232, 233, 255, 256], "plot_color": [232, 233], "anime_mod": [235, 325], "normal": [235, 319, 324, 325], "full_trac": [235, 325], "trail": [235, 325], "faster": 235, "y_dim_list": [241, 243, 244], "x_lim": [241, 242, 243, 244], "y_lim": [241, 242, 243, 244], "k": 246, "ax": [246, 247, 248, 249, 250, 251, 319], "num": [246, 325], "z_dim": [247, 248, 253, 255, 256, 258, 259], "line_width": 249, "point_siz": 250, "tran": 251, "outlin": [254, 255, 258], "xrang": 255, "yrang": 255, "zrang": 255, "analysi": [259, 321, 324], "argv": 263, "kw": 263, "compare_run": 263, "replace_scenario": 263, "report": [263, 324], "swap_dl": 263, "scenarioconfig": [264, 265], "rest": 264, "sim": 264, "disp": 264, "from_arg": 264, "unsafe_continu": [265, 266], "parallel_sim_ahead": [265, 266], "parallel_ver_ahead": [265, 266], "parallel": [265, 266, 267], "try_loc": [265, 266], "add_ag": [265, 319], "check_init": 265, "cleanup_cach": 265, "set_init": 265, "set_init_singl": 265, "set_map": [265, 319], "set_sensor": 265, "simulate_multi": 265, "update_config": 265, "verifi": [265, 319, 321], "thing": [272, 273, 274, 275, 276, 277, 281, 282, 283, 284, 285, 286, 289, 290, 291, 292, 293, 294, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 324], "cont_var": [272, 273, 275, 276, 299, 301, 304, 306], "disc_var": [272, 273, 275, 276, 299, 301, 304, 306], "stat_var": [272, 273, 275, 276, 299, 301, 304, 306], "attr": [274, 277, 283, 286, 291, 294, 303, 308, 313, 316], "cnt": [275, 276, 284, 285, 292, 293, 304, 305, 306, 307, 314, 315], "sens": [280, 288, 296, 297, 310], "As": 317, "mention": [317, 324], "katherin": 318, "braught": 318, "sayan": 318, "mitra": 318, "loui": 318, "sungwoo": 318, "cho": 318, "keyi": 318, "shen": 318, "yangg": 318, "li": 318, "haoq": 318, "zhu": 318, "page": [319, 321], "intuit": 319, "about": [319, 324], "interact": [319, 320, 321], "tutori": [319, 320, 325], "instruct": 319, "jupyt": [319, 320], "notebook": [319, 320], "multipl": [319, 324, 325], "section": 319, "drone": 319, "upward": 319, "obstacl": 319, "t0": 319, "align": 319, "tavoidup": 319, "discuss": 319, "import": [319, 321, 324], "tutorial_map": 319, "m3": 319, "map1": 319, "tactic": 319, "decis": [319, 321], "logic": [319, 321], "flow": [319, 324], "evolut": [319, 321], "avoidup": 319, "know": [319, 324], "avail": 319, "auto": [319, 325], "craftmod": 319, "trackmod": 319, "_mode": 319, "identifi": 319, "craft_mod": 319, "track_mod": 319, "vx": 319, "vy": 319, "vz": 319, "hint": 319, "necessari": [319, 324], "ego": 319, "traight": 319, "20m": 319, "There": 319, "written": [319, 321], "express": [319, 321, 324], "subset": [319, 321], "decisionlog": 319, "next": 319, "deepcopi": 319, "incoper": 319, "definit": [319, 324], "sceanrio": 319, "tutorial_ag": 319, "droneag": 319, "drone1": 319, "dl_sec1": 319, "With": 319, "don": 319, "traces_simu": 319, "60": 319, "traces_veri": 319, "plotter": [319, 325], "plotter3d": 319, "pyvista": 319, "pv": 319, "warn": 319, "filterwarn": 319, "plotter2d": 319, "plotli": [319, 325], "graph_object": [319, 325], "reachtube_tre": 319, "set_jupyter_backend": 319, "plot3dmap": 319, "plot3dreachtub": 319, "set_background": 319, "e0e0e0": 319, "packag": 320, "instal": 320, "pip": 320, "depend": 320, "python3": 320, "anyth": 320, "txt": 320, "ipynb": 320, "demo": [320, 324], "folder": 320, "ball_bounc": 320, "read": 320, "comment": 320, "learn": 320, "librari": [321, 325], "black": 321, "port": 321, "across": 321, "scratch": 321, "opendr": 321, "instanti": 321, "goal": 321, "principl": 321, "limit": [321, 325], "common": 321, "paramter": 321, "3d": 321, "contributor": 321, "search": 321, "agent_nam": 323, "x1": 323, "x2": 323, "x3": 323, "primari": 324, "easier": 324, "backend": 324, "sat": 324, "solver": 324, "z3": 324, "activ": 324, "u": 324, "directli": [324, 325], "walk": 324, "interpret": 324, "environ": 324, "keep": 324, "themselv": 324, "done": 324, "larger": 324, "essenti": 324, "augment": 324, "explain": 324, "builtin": 324, "than": 324, "process": 324, "treat": [324, 325], "hole": 324, "symbol": 324, "noth": 324, "preserv": 324, "expand": 324, "caus": 324, "simplifi": 324, "introduc": 324, "compon": 324, "met": 324, "taken": 324, "assign": 324, "statement": 324, "somewher": 324, "branch": 324, "merg": 324, "els": 324, "invert": 324, "due": [324, 325], "usual": 324, "semant": 324, "snippet": 324, "42": 324, "could": 324, "whenev": 324, "trigger": 324, "except": 324, "arbitrari": 324, "loop": 324, "hard": 324, "analyz": 324, "comprehens": 324, "much": [324, 325], "better": 324, "encount": 324, "other_st": 324, "ll": 324, "unrol": 324, "back": 324, "veri": 324, "basic": 324, "No": 324, "specif": [324, 325], "unusu": 324, "infer": 324, "declar": 324, "assum": 324, "stem": 324, "vers": 325, "open": 325, "step": 325, "possibli": 325, "branc": 325, "api": 325, "occur": 325, "remain": 325, "omit": 325, "background": 325, "shown": 325, "indirectli": 325, "mous": 325, "hover": 325, "And": 325, "drawn": 325, "semitranspar": 325, "scale": 325, "axis": 325, "appropri": 325, "displai": 325, "indic": 325, "too": 325, "respons": 325, "slow": 325, "sampl": 325, "provoid": 325, "improv": 325, "up": 325, "rate": 325, "mayb": 325, "here": 325, "mean": 325}, "objects": {"": [[0, 0, 0, "-", "verse"]], "verse": [[1, 0, 0, "-", "agents"], [24, 0, 0, "-", "analysis"], [108, 0, 0, "-", "automaton"], [120, 0, 0, "-", "map"], [183, 0, 0, "-", "parser"], [223, 0, 0, "-", "plotter"], [261, 0, 0, "-", "scenario"], [269, 0, 0, "-", "sensor"]], "verse.agents": [[2, 0, 0, "-", "base_agent"], [4, 0, 0, "-", "example_agent"]], "verse.agents.base_agent": [[3, 1, 1, "", "BaseAgent"]], "verse.agents.base_agent.BaseAgent": [[3, 2, 1, "", "TC_simulate"], [3, 2, 1, "", "__init__"]], "verse.agents.example_agent": [[5, 0, 0, "-", "ball_agent"], [7, 0, 0, "-", "car_agent"], [13, 0, 0, "-", "origin_agent"], [17, 0, 0, "-", "quadrotor_agent"], [20, 0, 0, "-", "robot_agent"], [22, 0, 0, "-", "sign_agent"]], "verse.agents.example_agent.ball_agent": [[6, 1, 1, "", "BallAgent"]], "verse.agents.example_agent.ball_agent.BallAgent": [[6, 2, 1, "", "TC_simulate"], [6, 2, 1, "", "__init__"], [6, 2, 1, "", "dynamic"]], "verse.agents.example_agent.car_agent": [[8, 1, 1, "", "CarAgent"], [9, 1, 1, "", "CarAgentDebounced"], [10, 1, 1, "", "CarAgentSwitch2"], [11, 1, 1, "", "NPCAgent"], [12, 1, 1, "", "WeirdCarAgent"]], "verse.agents.example_agent.car_agent.CarAgent": [[8, 2, 1, "", "TC_simulate"], [8, 2, 1, "", "__init__"]], "verse.agents.example_agent.car_agent.CarAgentDebounced": [[9, 2, 1, "", "TC_simulate"], [9, 2, 1, "", "__init__"]], "verse.agents.example_agent.car_agent.CarAgentSwitch2": [[10, 2, 1, "", "TC_simulate"], [10, 2, 1, "", "__init__"]], "verse.agents.example_agent.car_agent.NPCAgent": [[11, 2, 1, "", "TC_simulate"], [11, 2, 1, "", "__init__"], [11, 2, 1, "", "action_handler"]], "verse.agents.example_agent.car_agent.WeirdCarAgent": [[12, 2, 1, "", "TC_simulate"], [12, 2, 1, "", "__init__"]], "verse.agents.example_agent.origin_agent": [[14, 1, 1, "", "craft_agent"], [15, 1, 1, "", "thermo_agent"], [16, 1, 1, "", "vanderpol_agent"]], "verse.agents.example_agent.origin_agent.craft_agent": [[14, 2, 1, "", "TC_simulate"], [14, 2, 1, "", "__init__"]], "verse.agents.example_agent.origin_agent.thermo_agent": [[15, 2, 1, "", "TC_simulate"], [15, 2, 1, "", "__init__"]], "verse.agents.example_agent.origin_agent.vanderpol_agent": [[16, 2, 1, "", "TC_simulate"], [16, 2, 1, "", "__init__"]], "verse.agents.example_agent.quadrotor_agent": [[18, 1, 1, "", "FFNNC"], [19, 1, 1, "", "QuadrotorAgent"]], "verse.agents.example_agent.quadrotor_agent.FFNNC": [[18, 2, 1, "", "__init__"], [18, 2, 1, "", "add_module"], [18, 2, 1, "", "apply"], [18, 2, 1, "", "bfloat16"], [18, 2, 1, "", "buffers"], [18, 2, 1, "", "children"], [18, 2, 1, "", "cpu"], [18, 2, 1, "", "cuda"], [18, 2, 1, "", "double"], [18, 2, 1, "", "eval"], [18, 2, 1, "", "extra_repr"], [18, 2, 1, "", "float"], [18, 2, 1, "", "forward"], [18, 2, 1, "", "get_buffer"], [18, 2, 1, "", "get_extra_state"], [18, 2, 1, "", "get_parameter"], [18, 2, 1, "", "get_submodule"], [18, 2, 1, "", "half"], [18, 2, 1, "", "ipu"], [18, 2, 1, "", "load_state_dict"], [18, 2, 1, "", "modules"], [18, 2, 1, "", "named_buffers"], [18, 2, 1, "", "named_children"], [18, 2, 1, "", "named_modules"], [18, 2, 1, "", "named_parameters"], [18, 2, 1, "", "parameters"], [18, 2, 1, "", "register_backward_hook"], [18, 2, 1, "", "register_buffer"], [18, 2, 1, "", "register_forward_hook"], [18, 2, 1, "", "register_forward_pre_hook"], [18, 2, 1, "", "register_full_backward_hook"], [18, 2, 1, "", "register_load_state_dict_post_hook"], [18, 2, 1, "", "register_module"], [18, 2, 1, "", "register_parameter"], [18, 2, 1, "", "requires_grad_"], [18, 2, 1, "", "set_extra_state"], [18, 2, 1, "", "share_memory"], [18, 2, 1, "", "state_dict"], [18, 2, 1, "", "to"], [18, 2, 1, "", "to_empty"], [18, 2, 1, "", "train"], [18, 2, 1, "", "type"], [18, 2, 1, "", "xpu"], [18, 2, 1, "", "zero_grad"]], "verse.agents.example_agent.quadrotor_agent.QuadrotorAgent": [[19, 2, 1, "", "TC_simulate"], [19, 2, 1, "", "__init__"]], "verse.agents.example_agent.robot_agent": [[21, 1, 1, "", "RobotAgent"]], "verse.agents.example_agent.robot_agent.RobotAgent": [[21, 2, 1, "", "TC_simulate"], [21, 2, 1, "", "__init__"]], "verse.agents.example_agent.sign_agent": [[23, 1, 1, "", "SignAgent"]], "verse.agents.example_agent.sign_agent.SignAgent": [[23, 2, 1, "", "TC_simulate"], [23, 2, 1, "", "__init__"]], "verse.analysis": [[25, 0, 0, "-", "analysis_tree"], [33, 0, 0, "-", "dryvr"], [41, 0, 0, "-", "incremental"], [56, 0, 0, "-", "mixmonotone"], [65, 0, 0, "-", "simulator"], [75, 0, 0, "-", "utils"], [103, 0, 0, "-", "verifier"]], "verse.analysis.analysis_tree": [[26, 1, 1, "", "AnalysisTree"], [27, 1, 1, "", "AnalysisTreeNode"], [28, 1, 1, "", "AnalysisTreeNodeType"], [29, 4, 1, "", "_color_interp"], [31, 4, 1, "", "first_transitions"], [32, 4, 1, "", "index_of"]], "verse.analysis.analysis_tree.AnalysisTree": [[26, 2, 1, "", "__init__"], [26, 2, 1, "", "contains"], [26, 2, 1, "", "dump"], [26, 2, 1, "", "is_equal"], [26, 2, 1, "", "leaves"], [26, 2, 1, "", "load"], [26, 3, 1, "", "nodes"], [26, 3, 1, "", "root"], [26, 2, 1, "", "visualize"], [26, 2, 1, "", "visualize_dot"]], "verse.analysis.analysis_tree.AnalysisTreeNode": [[27, 2, 1, "", "__init__"], [27, 3, 1, "", "agent"], [27, 3, 1, "", "assert_hits"], [27, 3, 1, "", "child"], [27, 2, 1, "", "get_mode"], [27, 2, 1, "", "get_track"], [27, 3, 1, "", "height"], [27, 3, 1, "", "id"], [27, 3, 1, "", "init"], [27, 3, 1, "", "mode"], [27, 3, 1, "", "ndigits"], [27, 2, 1, "", "new_child"], [27, 2, 1, "", "root_from_inits"], [27, 3, 1, "", "start_time"], [27, 3, 1, "", "static"], [27, 3, 1, "", "trace"], [27, 3, 1, "", "type"], [27, 3, 1, "", "uncertain_param"]], "verse.analysis.dryvr": [[34, 4, 1, "", "all_sensitivities_calc"], [35, 4, 1, "", "calcCenterPoint"], [36, 4, 1, "", "calcDelta"], [37, 4, 1, "", "calc_bloated_tube"], [38, 4, 1, "", "get_reachtube_segment"], [39, 4, 1, "", "randomPoint"], [40, 4, 1, "", "trimTraces"]], "verse.analysis.incremental": [[42, 1, 1, "", "CachedRTTrans"], [43, 1, 1, "", "CachedReachTrans"], [44, 1, 1, "", "CachedSegment"], [45, 1, 1, "", "CachedTransition"], [46, 1, 1, "", "CachedTube"], [47, 1, 1, "", "ReachTubeCache"], [48, 1, 1, "", "SimTraceCache"], [49, 1, 1, "", "TubeCache"], [50, 4, 1, "", "combine_all"], [51, 4, 1, "", "convert_reach_trans"], [52, 4, 1, "", "convert_sim_trans"], [53, 4, 1, "", "reach_trans_suit"], [54, 4, 1, "", "sim_trans_suit"], [55, 4, 1, "", "to_simulate"]], "verse.analysis.incremental.CachedRTTrans": [[42, 2, 1, "", "__init__"]], "verse.analysis.incremental.CachedReachTrans": [[43, 2, 1, "", "__init__"]], "verse.analysis.incremental.CachedSegment": [[44, 2, 1, "", "__init__"]], "verse.analysis.incremental.CachedTransition": [[45, 2, 1, "", "__init__"]], "verse.analysis.incremental.CachedTube": [[46, 2, 1, "", "__init__"]], "verse.analysis.incremental.ReachTubeCache": [[47, 2, 1, "", "__init__"]], "verse.analysis.incremental.SimTraceCache": [[48, 2, 1, "", "__init__"]], "verse.analysis.incremental.TubeCache": [[49, 2, 1, "", "__init__"]], "verse.analysis.mixmonotone": [[57, 4, 1, "", "calculate_bloated_tube_mixmono_cont"], [58, 4, 1, "", "calculate_bloated_tube_mixmono_disc"], [59, 4, 1, "", "compute_reachtube_mixmono_cont"], [60, 4, 1, "", "compute_reachtube_mixmono_disc"], [61, 4, 1, "", "find_max"], [62, 4, 1, "", "find_max_symbolic"], [63, 4, 1, "", "find_min"], [64, 4, 1, "", "find_min_symbolic"]], "verse.analysis.simulator": [[66, 1, 1, "", "SimConsts"], [67, 1, 1, "", "Simulator"], [68, 4, 1, "", "checkHeight"], [69, 4, 1, "", "check_sim_transitions"], [70, 4, 1, "", "convertEnumToStr"], [71, 4, 1, "", "convertStrToEnum"], [72, 4, 1, "", "disc_field"], [73, 4, 1, "", "pack_env"], [74, 4, 1, "", "red"]], "verse.analysis.simulator.SimConsts": [[66, 2, 1, "", "__init__"]], "verse.analysis.simulator.Simulator": [[67, 2, 1, "", "__init__"]], "verse.analysis.utils": [[76, 4, 1, "", "are_polygons_intersecting"], [77, 4, 1, "", "class_from_path"], [78, 4, 1, "", "confidence_ellipsoid"], [79, 4, 1, "", "confidence_polytope"], [80, 4, 1, "", "constrain"], [81, 4, 1, "", "dedup"], [82, 4, 1, "", "distance_to_circle"], [83, 4, 1, "", "distance_to_rect"], [84, 4, 1, "", "do_every"], [85, 4, 1, "", "get_class_path"], [86, 4, 1, "", "has_corner_inside"], [87, 4, 1, "", "interval_distance"], [88, 4, 1, "", "is_consistent_dataset"], [89, 4, 1, "", "is_valid_observation"], [90, 4, 1, "", "lmap"], [91, 4, 1, "", "near_split"], [92, 4, 1, "", "not_zero"], [93, 4, 1, "", "point_in_ellipse"], [94, 4, 1, "", "point_in_rectangle"], [95, 4, 1, "", "point_in_rotated_rectangle"], [96, 4, 1, "", "project_polygon"], [97, 4, 1, "", "rect_corners"], [98, 4, 1, "", "rotated_rectangles_intersect"], [99, 4, 1, "", "sample_rect"], [100, 4, 1, "", "solve_trinom"], [101, 4, 1, "", "to_serializable"], [102, 4, 1, "", "wrap_to_pi"]], "verse.analysis.verifier": [[104, 1, 1, "", "ReachConsts"], [105, 1, 1, "", "Verifier"], [106, 4, 1, "", "checkHeight"], [107, 4, 1, "", "combine_rect"]], "verse.analysis.verifier.ReachConsts": [[104, 2, 1, "", "__init__"]], "verse.analysis.verifier.Verifier": [[105, 2, 1, "", "__init__"], [105, 2, 1, "", "calculate_full_bloated_tube_simple"], [105, 2, 1, "", "check_cache_bloated_tube"]], "verse.automaton": [[109, 0, 0, "-", "guard"], [114, 0, 0, "-", "hybrid_automaton"], [116, 0, 0, "-", "hybrid_io_automaton"], [118, 0, 0, "-", "reset"]], "verse.automaton.guard": [[110, 1, 1, "", "GuardExpressionAst"], [111, 1, 1, "", "LogicTreeNode"], [112, 1, 1, "", "NodeSubstituter"], [113, 1, 1, "", "ValueSubstituter"]], "verse.automaton.guard.GuardExpressionAst": [[110, 2, 1, "", "__init__"], [110, 2, 1, "", "evaluate_guard_disc"], [110, 2, 1, "", "evaluate_guard_hybrid"], [110, 2, 1, "", "generate_z3_expression"]], "verse.automaton.guard.LogicTreeNode": [[111, 2, 1, "", "__init__"]], "verse.automaton.guard.NodeSubstituter": [[112, 2, 1, "", "__init__"], [112, 2, 1, "", "generic_visit"], [112, 2, 1, "", "visit"]], "verse.automaton.guard.ValueSubstituter": [[113, 2, 1, "", "__init__"], [113, 2, 1, "", "generic_visit"], [113, 2, 1, "", "visit"]], "verse.automaton.hybrid_automaton": [[115, 1, 1, "", "HybridAutomaton"]], "verse.automaton.hybrid_automaton.HybridAutomaton": [[115, 2, 1, "", "__init__"]], "verse.automaton.hybrid_io_automaton": [[117, 1, 1, "", "HybridIoAutomaton"]], "verse.automaton.hybrid_io_automaton.HybridIoAutomaton": [[117, 2, 1, "", "__init__"]], "verse.automaton.reset": [[119, 1, 1, "", "ResetExpression"]], "verse.automaton.reset.ResetExpression": [[119, 2, 1, "", "__init__"]], "verse.map": [[121, 0, 0, "-", "example_map"], [151, 0, 0, "-", "lane"], [153, 0, 0, "-", "lane_3d"], [155, 0, 0, "-", "lane_map"], [157, 0, 0, "-", "lane_map_3d"], [159, 0, 0, "-", "lane_segment"], [165, 0, 0, "-", "lane_segment_3d"], [177, 0, 0, "-", "opendrive_parser"]], "verse.map.example_map": [[122, 0, 0, "-", "intersection"], [124, 0, 0, "-", "map_tacas"], [131, 0, 0, "-", "simple_map"], [134, 0, 0, "-", "simple_map2"], [141, 0, 0, "-", "simple_map_3d"]], "verse.map.example_map.intersection": [[123, 1, 1, "", "Intersection"]], "verse.map.example_map.intersection.Intersection": [[123, 2, 1, "", "__init__"]], "verse.map.example_map.map_tacas": [[125, 1, 1, "", "M1"], [126, 1, 1, "", "M2"], [127, 1, 1, "", "M3"], [128, 1, 1, "", "M5"], [129, 1, 1, "", "M6"], [130, 4, 1, "", "get_end"]], "verse.map.example_map.map_tacas.M1": [[125, 2, 1, "", "__init__"]], "verse.map.example_map.map_tacas.M2": [[126, 2, 1, "", "__init__"]], "verse.map.example_map.map_tacas.M3": [[127, 2, 1, "", "__init__"]], "verse.map.example_map.map_tacas.M5": [[128, 2, 1, "", "__init__"]], "verse.map.example_map.map_tacas.M6": [[129, 2, 1, "", "__init__"]], "verse.map.example_map.simple_map": [[132, 1, 1, "", "SimpleMap"], [133, 1, 1, "", "SimpleMap2"]], "verse.map.example_map.simple_map.SimpleMap": [[132, 2, 1, "", "__init__"]], "verse.map.example_map.simple_map.SimpleMap2": [[133, 2, 1, "", "__init__"]], "verse.map.example_map.simple_map2": [[135, 1, 1, "", "SimpleMap2"], [136, 1, 1, "", "SimpleMap3"], [137, 1, 1, "", "SimpleMap4"], [138, 1, 1, "", "SimpleMap4Switch2"], [139, 1, 1, "", "SimpleMap5"], [140, 1, 1, "", "SimpleMap6"]], "verse.map.example_map.simple_map2.SimpleMap2": [[135, 2, 1, "", "__init__"]], "verse.map.example_map.simple_map2.SimpleMap3": [[136, 2, 1, "", "__init__"]], "verse.map.example_map.simple_map2.SimpleMap4": [[137, 2, 1, "", "__init__"]], "verse.map.example_map.simple_map2.SimpleMap4Switch2": [[138, 2, 1, "", "__init__"]], "verse.map.example_map.simple_map2.SimpleMap5": [[139, 2, 1, "", "__init__"]], "verse.map.example_map.simple_map2.SimpleMap6": [[140, 2, 1, "", "__init__"]], "verse.map.example_map.simple_map_3d": [[142, 1, 1, "", "SimpleMap1"], [143, 1, 1, "", "SimpleMap2"], [144, 1, 1, "", "SimpleMap3"], [145, 1, 1, "", "SimpleMap4"], [146, 1, 1, "", "SimpleMap5"], [147, 1, 1, "", "SimpleMap6"], [148, 1, 1, "", "SimpleMap7"], [149, 4, 1, "", "get_center_radius"], [150, 4, 1, "", "get_end"]], "verse.map.example_map.simple_map_3d.SimpleMap1": [[142, 2, 1, "", "__init__"]], "verse.map.example_map.simple_map_3d.SimpleMap2": [[143, 2, 1, "", "__init__"]], "verse.map.example_map.simple_map_3d.SimpleMap3": [[144, 2, 1, "", "__init__"]], "verse.map.example_map.simple_map_3d.SimpleMap4": [[145, 2, 1, "", "__init__"]], "verse.map.example_map.simple_map_3d.SimpleMap5": [[146, 2, 1, "", "__init__"]], "verse.map.example_map.simple_map_3d.SimpleMap6": [[147, 2, 1, "", "__init__"]], "verse.map.example_map.simple_map_3d.SimpleMap7": [[148, 2, 1, "", "__init__"]], "verse.map.lane": [[152, 1, 1, "", "Lane"]], "verse.map.lane.Lane": [[152, 2, 1, "", "__init__"]], "verse.map.lane_3d": [[154, 1, 1, "", "Lane_3d"]], "verse.map.lane_3d.Lane_3d": [[154, 2, 1, "", "__init__"]], "verse.map.lane_map": [[156, 1, 1, "", "LaneMap"]], "verse.map.lane_map.LaneMap": [[156, 2, 1, "", "__init__"]], "verse.map.lane_map_3d": [[158, 1, 1, "", "LaneMap_3d"]], "verse.map.lane_map_3d.LaneMap_3d": [[158, 2, 1, "", "__init__"]], "verse.map.lane_segment": [[160, 1, 1, "", "AbstractLane"], [161, 1, 1, "", "CircularLane"], [162, 1, 1, "", "LaneSegment"], [163, 1, 1, "", "LineType"], [164, 1, 1, "", "StraightLane"]], "verse.map.lane_segment.AbstractLane": [[160, 2, 1, "", "__init__"], [160, 2, 1, "", "distance"], [160, 2, 1, "", "distance_with_heading"], [160, 2, 1, "", "from_config"], [160, 2, 1, "", "heading_at"], [160, 2, 1, "", "is_reachable_from"], [160, 2, 1, "", "local_coordinates"], [160, 3, 1, "", "metaclass__"], [160, 2, 1, "", "on_lane"], [160, 2, 1, "", "position"], [160, 2, 1, "", "to_config"], [160, 2, 1, "", "width_at"]], "verse.map.lane_segment.CircularLane": [[161, 2, 1, "", "__init__"], [161, 2, 1, "", "distance"], [161, 2, 1, "", "distance_with_heading"], [161, 2, 1, "", "from_config"], [161, 2, 1, "", "heading_at"], [161, 2, 1, "", "is_reachable_from"], [161, 2, 1, "", "local_coordinates"], [161, 3, 1, "", "metaclass__"], [161, 2, 1, "", "on_lane"], [161, 2, 1, "", "position"], [161, 2, 1, "", "to_config"], [161, 2, 1, "", "width_at"]], "verse.map.lane_segment.LaneSegment": [[162, 2, 1, "", "__init__"]], "verse.map.lane_segment.LineType": [[163, 2, 1, "", "__init__"]], "verse.map.lane_segment.StraightLane": [[164, 2, 1, "", "__init__"], [164, 2, 1, "", "distance"], [164, 2, 1, "", "distance_with_heading"], [164, 2, 1, "", "from_config"], [164, 2, 1, "", "heading_at"], [164, 2, 1, "", "is_reachable_from"], [164, 2, 1, "", "local_coordinates"], [164, 3, 1, "", "metaclass__"], [164, 2, 1, "", "on_lane"], [164, 2, 1, "", "position"], [164, 2, 1, "", "to_config"], [164, 2, 1, "", "width_at"]], "verse.map.lane_segment_3d": [[166, 1, 1, "", "AbstractLane_3d"], [167, 1, 1, "", "CircularLane_3d_v1"], [168, 1, 1, "", "CircularLane_3d_v2"], [169, 1, 1, "", "LineType_3d"], [170, 1, 1, "", "StraightLane_3d"], [171, 4, 1, "", "func_a"], [172, 4, 1, "", "func_b"], [173, 4, 1, "", "get_center_radius"], [174, 4, 1, "", "get_coor_by_rt"], [175, 4, 1, "", "get_rtp_by_coor"], [176, 4, 1, "", "get_theta_by_coor"]], "verse.map.lane_segment_3d.AbstractLane_3d": [[166, 2, 1, "", "__init__"], [166, 2, 1, "", "altitude"], [166, 2, 1, "", "distance"], [166, 2, 1, "", "distance_with_heading"], [166, 2, 1, "", "from_config"], [166, 2, 1, "", "heading_at"], [166, 2, 1, "", "is_reachable_from"], [166, 2, 1, "", "local_coordinates"], [166, 3, 1, "", "metaclass__"], [166, 2, 1, "", "on_lane"], [166, 2, 1, "", "position"], [166, 2, 1, "", "to_config"], [166, 2, 1, "", "width_at"]], "verse.map.lane_segment_3d.CircularLane_3d_v1": [[167, 2, 1, "", "__init__"], [167, 2, 1, "", "altitude"], [167, 2, 1, "", "distance"], [167, 2, 1, "", "distance_with_heading"], [167, 2, 1, "", "from_config"], [167, 2, 1, "", "heading_at"], [167, 2, 1, "", "is_reachable_from"], [167, 2, 1, "", "local_coordinates"], [167, 3, 1, "", "metaclass__"], [167, 2, 1, "", "on_lane"], [167, 2, 1, "", "position"], [167, 2, 1, "", "to_config"], [167, 2, 1, "", "width_at"]], "verse.map.lane_segment_3d.CircularLane_3d_v2": [[168, 2, 1, "", "__init__"], [168, 2, 1, "", "altitude"], [168, 2, 1, "", "distance"], [168, 2, 1, "", "distance_with_heading"], [168, 2, 1, "", "from_config"], [168, 2, 1, "", "heading_at"], [168, 2, 1, "", "is_reachable_from"], [168, 2, 1, "", "local_coordinates"], [168, 3, 1, "", "metaclass__"], [168, 2, 1, "", "on_lane"], [168, 2, 1, "", "position"], [168, 2, 1, "", "to_config"], [168, 2, 1, "", "width_at"]], "verse.map.lane_segment_3d.LineType_3d": [[169, 2, 1, "", "__init__"]], "verse.map.lane_segment_3d.StraightLane_3d": [[170, 2, 1, "", "__init__"], [170, 2, 1, "", "altitude"], [170, 2, 1, "", "distance"], [170, 2, 1, "", "distance_with_heading"], [170, 2, 1, "", "from_config"], [170, 2, 1, "", "heading_at"], [170, 2, 1, "", "is_reachable_from"], [170, 2, 1, "", "local_coordinates"], [170, 3, 1, "", "metaclass__"], [170, 2, 1, "", "on_lane"], [170, 2, 1, "", "position"], [170, 2, 1, "", "to_config"], [170, 2, 1, "", "width_at"]], "verse.map.opendrive_parser": [[178, 4, 1, "", "check_valid_side"], [179, 4, 1, "", "condense_matrix"], [180, 4, 1, "", "file_parser"], [181, 4, 1, "", "opendrive_map"], [182, 4, 1, "", "road_traverser"]], "verse.parser": [[184, 0, 0, "-", "astunparser"], [191, 0, 0, "-", "parser"]], "verse.parser.astunparser": [[185, 1, 1, "", "Unparser"], [186, 4, 1, "", "interleave"], [187, 4, 1, "", "main"], [188, 4, 1, "", "roundtrip"], [189, 4, 1, "", "testdir"], [190, 4, 1, "", "unparse"]], "verse.parser.astunparser.Unparser": [[185, 2, 1, "", "__init__"], [185, 2, 1, "", "dispatch"], [185, 2, 1, "", "enter"], [185, 2, 1, "", "fill"], [185, 2, 1, "", "leave"], [185, 2, 1, "", "write"]], "verse.parser.parser": [[192, 1, 1, "", "ArgSubstituter"], [193, 1, 1, "", "Assert"], [194, 1, 1, "", "CompiledAssert"], [195, 1, 1, "", "CondVal"], [196, 1, 1, "", "CondValCase"], [197, 1, 1, "", "ControllerIR"], [198, 1, 1, "", "CustomIR"], [199, 1, 1, "", "Env"], [200, 1, 1, "", "Lambda"], [201, 1, 1, "", "LambdaArg"], [202, 1, 1, "", "ModeDef"], [203, 1, 1, "", "ModePath"], [204, 1, 1, "", "Reduction"], [205, 1, 1, "", "ReductionType"], [206, 1, 1, "", "ScopeLevel"], [207, 1, 1, "", "StateDef"], [208, 1, 1, "", "_Assert"], [209, 4, 1, "", "ast_dump"], [210, 4, 1, "", "compile_expr"], [211, 4, 1, "", "find"], [212, 4, 1, "", "fully_cond"], [213, 4, 1, "", "is_main_check"], [214, 4, 1, "", "merge_assert"], [215, 4, 1, "", "merge_conds"], [216, 4, 1, "", "merge_if"], [217, 4, 1, "", "merge_if_single"], [218, 4, 1, "", "merge_if_val"], [219, 4, 1, "", "not_ir_ast"], [220, 4, 1, "", "proc"], [221, 4, 1, "", "proc_assign"], [222, 4, 1, "", "unparse"]], "verse.parser.parser.ArgSubstituter": [[192, 2, 1, "", "__init__"], [192, 2, 1, "", "generic_visit"], [192, 2, 1, "", "visit"]], "verse.parser.parser.Assert": [[193, 2, 1, "", "__init__"]], "verse.parser.parser.CompiledAssert": [[194, 2, 1, "", "__init__"]], "verse.parser.parser.CondVal": [[195, 2, 1, "", "__init__"]], "verse.parser.parser.CondValCase": [[196, 2, 1, "", "__init__"]], "verse.parser.parser.ControllerIR": [[197, 2, 1, "", "__init__"], [197, 2, 1, "", "ir_eq"]], "verse.parser.parser.CustomIR": [[198, 2, 1, "", "__init__"]], "verse.parser.parser.Env": [[199, 2, 1, "", "__init__"]], "verse.parser.parser.Lambda": [[200, 2, 1, "", "__init__"]], "verse.parser.parser.LambdaArg": [[201, 2, 1, "", "__init__"]], "verse.parser.parser.ModeDef": [[202, 2, 1, "", "__init__"]], "verse.parser.parser.ModePath": [[203, 2, 1, "", "__init__"]], "verse.parser.parser.Reduction": [[204, 2, 1, "", "__init__"]], "verse.parser.parser.ScopeLevel": [[206, 2, 1, "", "__init__"]], "verse.parser.parser.StateDef": [[207, 2, 1, "", "__init__"]], "verse.parser.parser._Assert": [[208, 2, 1, "", "__init__"]], "verse.plotter": [[224, 0, 0, "-", "plotter2D"], [239, 0, 0, "-", "plotter2D_old"], [245, 0, 0, "-", "plotter3D"], [252, 0, 0, "-", "plotter3D_new"]], "verse.plotter.plotter2D": [[225, 4, 1, "", "check_dim"], [226, 4, 1, "", "create_anime_dict"], [227, 4, 1, "", "draw_map"], [228, 5, 1, "", "duration"], [229, 4, 1, "", "get_text_pos"], [230, 4, 1, "", "num_digits"], [231, 4, 1, "", "reachtube_anime"], [232, 4, 1, "", "reachtube_tree"], [233, 4, 1, "", "reachtube_tree_single"], [234, 4, 1, "", "sample_trace"], [235, 4, 1, "", "simulation_anime"], [236, 4, 1, "", "simulation_tree"], [237, 4, 1, "", "simulation_tree_single"], [238, 4, 1, "", "update_style"]], "verse.plotter.plotter2D_old": [[240, 4, 1, "", "generate_simulation_anime"], [241, 4, 1, "", "plot"], [242, 4, 1, "", "plot_map"], [243, 4, 1, "", "plot_reachtube_tree"], [244, 4, 1, "", "plot_simulation_tree"]], "verse.plotter.plotter3D": [[246, 4, 1, "", "plot3dMap"], [247, 4, 1, "", "plot3dReachtube"], [248, 4, 1, "", "plot3dReachtubeSingle"], [249, 4, 1, "", "plot_line_3d"], [250, 4, 1, "", "plot_point_3d"], [251, 4, 1, "", "plot_polytope_3d"]], "verse.plotter.plotter3D_new": [[253, 4, 1, "", "check_dim"], [254, 4, 1, "", "draw_map_3d"], [255, 4, 1, "", "reachtube_tree_3d"], [256, 4, 1, "", "reachtube_tree_single_3d"], [257, 4, 1, "", "sample_trace"], [258, 4, 1, "", "simulation_tree_3d"]], "verse.scenario": [[262, 0, 0, "-", "scenario"]], "verse.scenario.scenario": [[263, 1, 1, "", "Benchmark"], [264, 1, 1, "", "ExprConfig"], [265, 1, 1, "", "Scenario"], [266, 1, 1, "", "ScenarioConfig"], [267, 4, 1, "", "check_ray_init"], [268, 4, 1, "", "red"]], "verse.scenario.scenario.Benchmark": [[263, 2, 1, "", "__init__"]], "verse.scenario.scenario.ExprConfig": [[264, 2, 1, "", "__init__"]], "verse.scenario.scenario.Scenario": [[265, 2, 1, "", "__init__"]], "verse.scenario.scenario.ScenarioConfig": [[266, 2, 1, "", "__init__"]], "verse.sensor": [[270, 0, 0, "-", "base_sensor"], [278, 0, 0, "-", "example_sensor"]], "verse.sensor.base_sensor": [[271, 1, 1, "", "BaseSensor"], [272, 4, 1, "", "add_states_2d"], [273, 4, 1, "", "add_states_3d"], [274, 4, 1, "", "adds"], [275, 4, 1, "", "set_states_2d"], [276, 4, 1, "", "set_states_3d"], [277, 4, 1, "", "sets"]], "verse.sensor.base_sensor.BaseSensor": [[271, 2, 1, "", "__init__"]], "verse.sensor.example_sensor": [[279, 0, 0, "-", "craft_sensor"], [287, 0, 0, "-", "quadrotor_sensor"], [295, 0, 0, "-", "single_sensor"], [309, 0, 0, "-", "thermo_sensor"]], "verse.sensor.example_sensor.craft_sensor": [[280, 1, 1, "", "CraftSensor"], [281, 4, 1, "", "add_states_2d_ball"], [282, 4, 1, "", "add_states_3d_ball"], [283, 4, 1, "", "adds"], [284, 4, 1, "", "set_states_2d_ball"], [285, 4, 1, "", "set_states_3d_ball"], [286, 4, 1, "", "sets"]], "verse.sensor.example_sensor.craft_sensor.CraftSensor": [[280, 2, 1, "", "__init__"]], "verse.sensor.example_sensor.quadrotor_sensor": [[288, 1, 1, "", "QuadrotorSensor"], [289, 4, 1, "", "add_states_2d_ball"], [290, 4, 1, "", "add_states_3d_ball"], [291, 4, 1, "", "adds"], [292, 4, 1, "", "set_states_2d_ball"], [293, 4, 1, "", "set_states_3d_ball"], [294, 4, 1, "", "sets"]], "verse.sensor.example_sensor.quadrotor_sensor.QuadrotorSensor": [[288, 2, 1, "", "__init__"]], "verse.sensor.example_sensor.single_sensor": [[296, 1, 1, "", "FakeSensor3"], [297, 1, 1, "", "FakeSensor4"], [298, 1, 1, "", "SingleSensor"], [299, 4, 1, "", "add_states_2d"], [300, 4, 1, "", "add_states_2d_ball"], [301, 4, 1, "", "add_states_3d"], [302, 4, 1, "", "add_states_3d_ball"], [303, 4, 1, "", "adds"], [304, 4, 1, "", "set_states_2d"], [305, 4, 1, "", "set_states_2d_ball"], [306, 4, 1, "", "set_states_3d"], [307, 4, 1, "", "set_states_3d_ball"], [308, 4, 1, "", "sets"]], "verse.sensor.example_sensor.single_sensor.FakeSensor3": [[296, 2, 1, "", "__init__"]], "verse.sensor.example_sensor.single_sensor.FakeSensor4": [[297, 2, 1, "", "__init__"]], "verse.sensor.example_sensor.single_sensor.SingleSensor": [[298, 2, 1, "", "__init__"]], "verse.sensor.example_sensor.thermo_sensor": [[310, 1, 1, "", "ThermoSensor"], [311, 4, 1, "", "add_states_2d_ball"], [312, 4, 1, "", "add_states_3d_ball"], [313, 4, 1, "", "adds"], [314, 4, 1, "", "set_states_2d_ball"], [315, 4, 1, "", "set_states_3d_ball"], [316, 4, 1, "", "sets"]], "verse.sensor.example_sensor.thermo_sensor.ThermoSensor": [[310, 2, 1, "", "__init__"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:function", "5": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "data", "Python data"]}, "titleterms": {"vers": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 319, 321], "agent": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 317, 319], "base_ag": [2, 3], "baseag": 3, "example_ag": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "ball_ag": [5, 6], "ballag": 6, "car_ag": [7, 8, 9, 10, 11, 12], "carag": 8, "caragentdebounc": 9, "caragentswitch2": 10, "npcagent": 11, "weirdcarag": 12, "origin_ag": [13, 14, 15, 16], "craft_ag": 14, "thermo_ag": 15, "vanderpol_ag": 16, "quadrotor_ag": [17, 18, 19], "ffnnc": 18, "quadrotorag": 19, "robot_ag": [20, 21], "robotag": 21, "sign_ag": [22, 23], "signag": 23, "analysi": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "analysis_tre": [25, 26, 27, 28, 29, 30, 31, 32], "analysistre": 26, "analysistreenod": 27, "analysistreenodetyp": 28, "_color_interp": 29, "color_interp": 30, "first_transit": 31, "index_of": 32, "dryvr": [33, 34, 35, 36, 37, 38, 39, 40], "all_sensitivities_calc": 34, "calccenterpoint": 35, "calcdelta": 36, "calc_bloated_tub": 37, "get_reachtube_seg": 38, "randompoint": 39, "trimtrac": 40, "increment": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "cachedrttran": 42, "cachedreachtran": 43, "cachedseg": 44, "cachedtransit": 45, "cachedtub": 46, "reachtubecach": 47, "simtracecach": 48, "tubecach": 49, "combine_al": 50, "convert_reach_tran": 51, "convert_sim_tran": 52, "reach_trans_suit": 53, "sim_trans_suit": 54, "to_simul": 55, "mixmonoton": [56, 57, 58, 59, 60, 61, 62, 63, 64], "calculate_bloated_tube_mixmono_cont": 57, "calculate_bloated_tube_mixmono_disc": 58, "compute_reachtube_mixmono_cont": 59, "compute_reachtube_mixmono_disc": 60, "find_max": 61, "find_max_symbol": 62, "find_min": 63, "find_min_symbol": 64, "simul": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 323], "simconst": 66, "checkheight": [68, 106], "check_sim_transit": 69, "convertenumtostr": 70, "convertstrtoenum": 71, "disc_field": 72, "pack_env": 73, "red": [74, 268], "util": [75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "are_polygons_intersect": 76, "class_from_path": 77, "confidence_ellipsoid": 78, "confidence_polytop": 79, "constrain": 80, "dedup": 81, "distance_to_circl": 82, "distance_to_rect": 83, "do_everi": 84, "get_class_path": 85, "has_corner_insid": 86, "interval_dist": 87, "is_consistent_dataset": 88, "is_valid_observ": 89, "lmap": 90, "near_split": 91, "not_zero": 92, "point_in_ellips": 93, "point_in_rectangl": 94, "point_in_rotated_rectangl": 95, "project_polygon": 96, "rect_corn": 97, "rotated_rectangles_intersect": 98, "sample_rect": 99, "solve_trinom": 100, "to_serializ": 101, "wrap_to_pi": 102, "verifi": [103, 104, 105, 106, 107], "reachconst": 104, "combine_rect": 107, "automaton": [108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119], "guard": [109, 110, 111, 112, 113], "guardexpressionast": 110, "logictreenod": 111, "nodesubstitut": 112, "valuesubstitut": 113, "hybrid_automaton": [114, 115], "hybridautomaton": 115, "hybrid_io_automaton": [116, 117], "hybridioautomaton": 117, "reset": [118, 119], "resetexpress": 119, "map": [120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 319, 322], "example_map": [121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150], "intersect": [122, 123], "map_taca": [124, 125, 126, 127, 128, 129, 130], "m1": 125, "m2": 126, "m3": 127, "m5": 128, "m6": 129, "get_end": [130, 150], "simple_map": [131, 132, 133], "simplemap": 132, "simplemap2": [133, 135, 143], "simple_map2": [134, 135, 136, 137, 138, 139, 140], "simplemap3": [136, 144], "simplemap4": [137, 145], "simplemap4switch2": 138, "simplemap5": [139, 146], "simplemap6": [140, 147], "simple_map_3d": [141, 142, 143, 144, 145, 146, 147, 148, 149, 150], "simplemap1": 142, "simplemap7": 148, "get_center_radiu": [149, 173], "lane": [151, 152], "lane_3d": [153, 154], "lane_map": [155, 156], "lanemap": 156, "lane_map_3d": [157, 158], "lanemap_3d": 158, "lane_seg": [159, 160, 161, 162, 163, 164], "abstractlan": 160, "circularlan": 161, "laneseg": 162, "linetyp": 163, "straightlan": 164, "lane_segment_3d": [165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176], "abstractlane_3d": 166, "circularlane_3d_v1": 167, "circularlane_3d_v2": 168, "linetype_3d": 169, "straightlane_3d": 170, "func_a": 171, "func_b": 172, "get_coor_by_rt": 174, "get_rtp_by_coor": 175, "get_theta_by_coor": 176, "opendrive_pars": [177, 178, 179, 180, 181, 182], "check_valid_sid": 178, "condense_matrix": 179, "file_pars": 180, "opendrive_map": 181, "road_travers": 182, "parser": [183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 324], "astunpars": [184, 185, 186, 187, 188, 189, 190], "unpars": [185, 190, 222], "interleav": 186, "main": 187, "roundtrip": 188, "testdir": 189, "argsubstitut": 192, "assert": 193, "compiledassert": 194, "condval": 195, "condvalcas": 196, "controllerir": 197, "customir": 198, "env": 199, "lambda": 200, "lambdaarg": 201, "modedef": 202, "modepath": 203, "reduct": [204, 324], "reductiontyp": 205, "scopelevel": 206, "statedef": 207, "_assert": 208, "ast_dump": 209, "compile_expr": 210, "find": 211, "fully_cond": 212, "is_main_check": 213, "merge_assert": 214, "merge_cond": 215, "merge_if": 216, "merge_if_singl": 217, "merge_if_v": 218, "not_ir_ast": 219, "proc": 220, "proc_assign": 221, "plotter": [223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260], "plotter2d": [224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238], "check_dim": [225, 253], "create_anime_dict": 226, "draw_map": 227, "durat": 228, "get_text_po": 229, "num_digit": 230, "reachtube_anim": [231, 325], "reachtube_tre": [232, 325], "reachtube_tree_singl": 233, "sample_trac": [234, 257], "simulation_anim": [235, 325], "simulation_tre": [236, 325], "simulation_tree_singl": 237, "update_styl": [238, 260], "plotter2d_old": [239, 240, 241, 242, 243, 244], "generate_simulation_anim": 240, "plot": 241, "plot_map": 242, "plot_reachtube_tre": 243, "plot_simulation_tre": 244, "plotter3d": [245, 246, 247, 248, 249, 250, 251], "plot3dmap": 246, "plot3dreachtub": 247, "plot3dreachtubesingl": 248, "plot_line_3d": 249, "plot_point_3d": 250, "plot_polytope_3d": 251, "plotter3d_new": [252, 253, 254, 255, 256, 257, 258, 259, 260], "draw_map_3d": 254, "reachtube_tree_3d": 255, "reachtube_tree_single_3d": 256, "simulation_tree_3d": 258, "simulation_tree_single_3d": 259, "scenario": [261, 262, 263, 264, 265, 266, 267, 268, 319, 326], "benchmark": 263, "exprconfig": 264, "scenarioconfig": 266, "check_ray_init": 267, "sensor": [269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 327], "base_sensor": [270, 271, 272, 273, 274, 275, 276, 277], "basesensor": 271, "add_states_2d": [272, 299], "add_states_3d": [273, 301], "add": [274, 283, 291, 303, 313], "set_states_2d": [275, 304], "set_states_3d": [276, 306], "set": [277, 286, 294, 308, 316], "example_sensor": [278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316], "craft_sensor": [279, 280, 281, 282, 283, 284, 285, 286], "craftsensor": 280, "add_states_2d_bal": [281, 289, 300, 311], "add_states_3d_bal": [282, 290, 302, 312], "set_states_2d_bal": [284, 292, 305, 314], "set_states_3d_bal": [285, 293, 307, 315], "quadrotor_sensor": [287, 288, 289, 290, 291, 292, 293, 294], "quadrotorsensor": 288, "single_sensor": [295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308], "fakesensor3": 296, "fakesensor4": 297, "singlesensor": 298, "thermo_sensor": [309, 310, 311, 312, 313, 314, 315, 316], "thermosensor": 310, "contributor": 318, "creat": 319, "instanti": 319, "get": 320, "start": 320, "welcom": 321, "": 321, "document": 321, "content": 321, "api": 321, "indic": 321, "tabl": 321, "reachtub": 323, "goal": 324, "work": 324, "principl": 324, "condit": 324, "valu": 324, "name": 324, "limit": 324, "visual": 325, "function": 325, "list": 325, "common": 325, "paramter": 325, "2d": 325, "3d": 325}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"verse": [[0, "module-verse"]], "verse.agents": [[1, "module-verse.agents"]], "verse.agents.base_agent": [[2, "module-verse.agents.base_agent"]], "verse.agents.base_agent.BaseAgent": [[3, "verse-agents-base-agent-baseagent"]], "verse.agents.example_agent": [[4, "module-verse.agents.example_agent"]], "verse.agents.example_agent.ball_agent": [[5, "module-verse.agents.example_agent.ball_agent"]], "verse.agents.example_agent.ball_agent.BallAgent": [[6, "verse-agents-example-agent-ball-agent-ballagent"]], "verse.agents.example_agent.car_agent": [[7, "module-verse.agents.example_agent.car_agent"]], "verse.agents.example_agent.car_agent.CarAgent": [[8, "verse-agents-example-agent-car-agent-caragent"]], "verse.agents.example_agent.car_agent.CarAgentDebounced": [[9, "verse-agents-example-agent-car-agent-caragentdebounced"]], "verse.agents.example_agent.car_agent.CarAgentSwitch2": [[10, "verse-agents-example-agent-car-agent-caragentswitch2"]], "verse.agents.example_agent.car_agent.NPCAgent": [[11, "verse-agents-example-agent-car-agent-npcagent"]], "verse.agents.example_agent.car_agent.WeirdCarAgent": [[12, "verse-agents-example-agent-car-agent-weirdcaragent"]], "verse.agents.example_agent.origin_agent": [[13, "module-verse.agents.example_agent.origin_agent"]], "verse.agents.example_agent.origin_agent.craft_agent": [[14, "verse-agents-example-agent-origin-agent-craft-agent"]], "verse.agents.example_agent.origin_agent.thermo_agent": [[15, "verse-agents-example-agent-origin-agent-thermo-agent"]], "verse.agents.example_agent.origin_agent.vanderpol_agent": [[16, "verse-agents-example-agent-origin-agent-vanderpol-agent"]], "verse.agents.example_agent.quadrotor_agent": [[17, "module-verse.agents.example_agent.quadrotor_agent"]], "verse.agents.example_agent.quadrotor_agent.FFNNC": [[18, "verse-agents-example-agent-quadrotor-agent-ffnnc"]], "verse.agents.example_agent.quadrotor_agent.QuadrotorAgent": [[19, "verse-agents-example-agent-quadrotor-agent-quadrotoragent"]], "verse.agents.example_agent.robot_agent": [[20, "module-verse.agents.example_agent.robot_agent"]], "verse.agents.example_agent.robot_agent.RobotAgent": [[21, "verse-agents-example-agent-robot-agent-robotagent"]], "verse.agents.example_agent.sign_agent": [[22, "module-verse.agents.example_agent.sign_agent"]], "verse.agents.example_agent.sign_agent.SignAgent": [[23, "verse-agents-example-agent-sign-agent-signagent"]], "verse.analysis": [[24, "module-verse.analysis"]], "verse.analysis.analysis_tree": [[25, "module-verse.analysis.analysis_tree"]], "verse.analysis.analysis_tree.AnalysisTree": [[26, "verse-analysis-analysis-tree-analysistree"]], "verse.analysis.analysis_tree.AnalysisTreeNode": [[27, "verse-analysis-analysis-tree-analysistreenode"]], "verse.analysis.analysis_tree.AnalysisTreeNodeType": [[28, "verse-analysis-analysis-tree-analysistreenodetype"]], "verse.analysis.analysis_tree._color_interp": [[29, "verse-analysis-analysis-tree-color-interp"]], "verse.analysis.analysis_tree.color_interp": [[30, "verse-analysis-analysis-tree-color-interp"]], "verse.analysis.analysis_tree.first_transitions": [[31, "verse-analysis-analysis-tree-first-transitions"]], "verse.analysis.analysis_tree.index_of": [[32, "verse-analysis-analysis-tree-index-of"]], "verse.analysis.dryvr": [[33, "module-verse.analysis.dryvr"]], "verse.analysis.dryvr.all_sensitivities_calc": [[34, "verse-analysis-dryvr-all-sensitivities-calc"]], "verse.analysis.dryvr.calcCenterPoint": [[35, "verse-analysis-dryvr-calccenterpoint"]], "verse.analysis.dryvr.calcDelta": [[36, "verse-analysis-dryvr-calcdelta"]], "verse.analysis.dryvr.calc_bloated_tube": [[37, "verse-analysis-dryvr-calc-bloated-tube"]], "verse.analysis.dryvr.get_reachtube_segment": [[38, "verse-analysis-dryvr-get-reachtube-segment"]], "verse.analysis.dryvr.randomPoint": [[39, "verse-analysis-dryvr-randompoint"]], "verse.analysis.dryvr.trimTraces": [[40, "verse-analysis-dryvr-trimtraces"]], "verse.analysis.incremental": [[41, "module-verse.analysis.incremental"]], "verse.analysis.incremental.CachedRTTrans": [[42, "verse-analysis-incremental-cachedrttrans"]], "verse.analysis.incremental.CachedReachTrans": [[43, "verse-analysis-incremental-cachedreachtrans"]], "verse.analysis.incremental.CachedSegment": [[44, "verse-analysis-incremental-cachedsegment"]], "verse.analysis.incremental.CachedTransition": [[45, "verse-analysis-incremental-cachedtransition"]], "verse.analysis.incremental.CachedTube": [[46, "verse-analysis-incremental-cachedtube"]], "verse.analysis.incremental.ReachTubeCache": [[47, "verse-analysis-incremental-reachtubecache"]], "verse.analysis.incremental.SimTraceCache": [[48, "verse-analysis-incremental-simtracecache"]], "verse.analysis.incremental.TubeCache": [[49, "verse-analysis-incremental-tubecache"]], "verse.analysis.incremental.combine_all": [[50, "verse-analysis-incremental-combine-all"]], "verse.analysis.incremental.convert_reach_trans": [[51, "verse-analysis-incremental-convert-reach-trans"]], "verse.analysis.incremental.convert_sim_trans": [[52, "verse-analysis-incremental-convert-sim-trans"]], "verse.analysis.incremental.reach_trans_suit": [[53, "verse-analysis-incremental-reach-trans-suit"]], "verse.analysis.incremental.sim_trans_suit": [[54, "verse-analysis-incremental-sim-trans-suit"]], "verse.analysis.incremental.to_simulate": [[55, "verse-analysis-incremental-to-simulate"]], "verse.analysis.mixmonotone": [[56, "module-verse.analysis.mixmonotone"]], "verse.analysis.mixmonotone.calculate_bloated_tube_mixmono_cont": [[57, "verse-analysis-mixmonotone-calculate-bloated-tube-mixmono-cont"]], "verse.analysis.mixmonotone.calculate_bloated_tube_mixmono_disc": [[58, "verse-analysis-mixmonotone-calculate-bloated-tube-mixmono-disc"]], "verse.analysis.mixmonotone.compute_reachtube_mixmono_cont": [[59, "verse-analysis-mixmonotone-compute-reachtube-mixmono-cont"]], "verse.analysis.mixmonotone.compute_reachtube_mixmono_disc": [[60, "verse-analysis-mixmonotone-compute-reachtube-mixmono-disc"]], "verse.analysis.mixmonotone.find_max": [[61, "verse-analysis-mixmonotone-find-max"]], "verse.analysis.mixmonotone.find_max_symbolic": [[62, "verse-analysis-mixmonotone-find-max-symbolic"]], "verse.analysis.mixmonotone.find_min": [[63, "verse-analysis-mixmonotone-find-min"]], "verse.analysis.mixmonotone.find_min_symbolic": [[64, "verse-analysis-mixmonotone-find-min-symbolic"]], "verse.analysis.simulator": [[65, "module-verse.analysis.simulator"]], "verse.analysis.simulator.SimConsts": [[66, "verse-analysis-simulator-simconsts"]], "verse.analysis.simulator.Simulator": [[67, "verse-analysis-simulator-simulator"]], "verse.analysis.simulator.checkHeight": [[68, "verse-analysis-simulator-checkheight"]], "verse.analysis.simulator.check_sim_transitions": [[69, "verse-analysis-simulator-check-sim-transitions"]], "verse.analysis.simulator.convertEnumToStr": [[70, "verse-analysis-simulator-convertenumtostr"]], "verse.analysis.simulator.convertStrToEnum": [[71, "verse-analysis-simulator-convertstrtoenum"]], "verse.analysis.simulator.disc_field": [[72, "verse-analysis-simulator-disc-field"]], "verse.analysis.simulator.pack_env": [[73, "verse-analysis-simulator-pack-env"]], "verse.analysis.simulator.red": [[74, "verse-analysis-simulator-red"]], "verse.analysis.utils": [[75, "module-verse.analysis.utils"]], "verse.analysis.utils.are_polygons_intersecting": [[76, "verse-analysis-utils-are-polygons-intersecting"]], "verse.analysis.utils.class_from_path": [[77, "verse-analysis-utils-class-from-path"]], "verse.analysis.utils.confidence_ellipsoid": [[78, "verse-analysis-utils-confidence-ellipsoid"]], "verse.analysis.utils.confidence_polytope": [[79, "verse-analysis-utils-confidence-polytope"]], "verse.analysis.utils.constrain": [[80, "verse-analysis-utils-constrain"]], "verse.analysis.utils.dedup": [[81, "verse-analysis-utils-dedup"]], "verse.analysis.utils.distance_to_circle": [[82, "verse-analysis-utils-distance-to-circle"]], "verse.analysis.utils.distance_to_rect": [[83, "verse-analysis-utils-distance-to-rect"]], "verse.analysis.utils.do_every": [[84, "verse-analysis-utils-do-every"]], "verse.analysis.utils.get_class_path": [[85, "verse-analysis-utils-get-class-path"]], "verse.analysis.utils.has_corner_inside": [[86, "verse-analysis-utils-has-corner-inside"]], "verse.analysis.utils.interval_distance": [[87, "verse-analysis-utils-interval-distance"]], "verse.analysis.utils.is_consistent_dataset": [[88, "verse-analysis-utils-is-consistent-dataset"]], "verse.analysis.utils.is_valid_observation": [[89, "verse-analysis-utils-is-valid-observation"]], "verse.analysis.utils.lmap": [[90, "verse-analysis-utils-lmap"]], "verse.analysis.utils.near_split": [[91, "verse-analysis-utils-near-split"]], "verse.analysis.utils.not_zero": [[92, "verse-analysis-utils-not-zero"]], "verse.analysis.utils.point_in_ellipse": [[93, "verse-analysis-utils-point-in-ellipse"]], "verse.analysis.utils.point_in_rectangle": [[94, "verse-analysis-utils-point-in-rectangle"]], "verse.analysis.utils.point_in_rotated_rectangle": [[95, "verse-analysis-utils-point-in-rotated-rectangle"]], "verse.analysis.utils.project_polygon": [[96, "verse-analysis-utils-project-polygon"]], "verse.analysis.utils.rect_corners": [[97, "verse-analysis-utils-rect-corners"]], "verse.analysis.utils.rotated_rectangles_intersect": [[98, "verse-analysis-utils-rotated-rectangles-intersect"]], "verse.analysis.utils.sample_rect": [[99, "verse-analysis-utils-sample-rect"]], "verse.analysis.utils.solve_trinom": [[100, "verse-analysis-utils-solve-trinom"]], "verse.analysis.utils.to_serializable": [[101, "verse-analysis-utils-to-serializable"]], "verse.analysis.utils.wrap_to_pi": [[102, "verse-analysis-utils-wrap-to-pi"]], "verse.analysis.verifier": [[103, "module-verse.analysis.verifier"]], "verse.analysis.verifier.ReachConsts": [[104, "verse-analysis-verifier-reachconsts"]], "verse.analysis.verifier.Verifier": [[105, "verse-analysis-verifier-verifier"]], "verse.analysis.verifier.checkHeight": [[106, "verse-analysis-verifier-checkheight"]], "verse.analysis.verifier.combine_rect": [[107, "verse-analysis-verifier-combine-rect"]], "verse.automaton": [[108, "module-verse.automaton"]], "verse.automaton.guard": [[109, "module-verse.automaton.guard"]], "verse.automaton.guard.GuardExpressionAst": [[110, "verse-automaton-guard-guardexpressionast"]], "verse.automaton.guard.LogicTreeNode": [[111, "verse-automaton-guard-logictreenode"]], "verse.automaton.guard.NodeSubstituter": [[112, "verse-automaton-guard-nodesubstituter"]], "verse.automaton.guard.ValueSubstituter": [[113, "verse-automaton-guard-valuesubstituter"]], "verse.automaton.hybrid_automaton": [[114, "module-verse.automaton.hybrid_automaton"]], "verse.automaton.hybrid_automaton.HybridAutomaton": [[115, "verse-automaton-hybrid-automaton-hybridautomaton"]], "verse.automaton.hybrid_io_automaton": [[116, "module-verse.automaton.hybrid_io_automaton"]], "verse.automaton.hybrid_io_automaton.HybridIoAutomaton": [[117, "verse-automaton-hybrid-io-automaton-hybridioautomaton"]], "verse.automaton.reset": [[118, "module-verse.automaton.reset"]], "verse.automaton.reset.ResetExpression": [[119, "verse-automaton-reset-resetexpression"]], "verse.map": [[120, "module-verse.map"]], "verse.map.example_map": [[121, "module-verse.map.example_map"]], "verse.map.example_map.intersection": [[122, "module-verse.map.example_map.intersection"]], "verse.map.example_map.intersection.Intersection": [[123, "verse-map-example-map-intersection-intersection"]], "verse.map.example_map.map_tacas": [[124, "module-verse.map.example_map.map_tacas"]], "verse.map.example_map.map_tacas.M1": [[125, "verse-map-example-map-map-tacas-m1"]], "verse.map.example_map.map_tacas.M2": [[126, "verse-map-example-map-map-tacas-m2"]], "verse.map.example_map.map_tacas.M3": [[127, "verse-map-example-map-map-tacas-m3"]], "verse.map.example_map.map_tacas.M5": [[128, "verse-map-example-map-map-tacas-m5"]], "verse.map.example_map.map_tacas.M6": [[129, "verse-map-example-map-map-tacas-m6"]], "verse.map.example_map.map_tacas.get_end": [[130, "verse-map-example-map-map-tacas-get-end"]], "verse.map.example_map.simple_map": [[131, "module-verse.map.example_map.simple_map"]], "verse.map.example_map.simple_map.SimpleMap": [[132, "verse-map-example-map-simple-map-simplemap"]], "verse.map.example_map.simple_map.SimpleMap2": [[133, "verse-map-example-map-simple-map-simplemap2"]], "verse.map.example_map.simple_map2": [[134, "module-verse.map.example_map.simple_map2"]], "verse.map.example_map.simple_map2.SimpleMap2": [[135, "verse-map-example-map-simple-map2-simplemap2"]], "verse.map.example_map.simple_map2.SimpleMap3": [[136, "verse-map-example-map-simple-map2-simplemap3"]], "verse.map.example_map.simple_map2.SimpleMap4": [[137, "verse-map-example-map-simple-map2-simplemap4"]], "verse.map.example_map.simple_map2.SimpleMap4Switch2": [[138, "verse-map-example-map-simple-map2-simplemap4switch2"]], "verse.map.example_map.simple_map2.SimpleMap5": [[139, "verse-map-example-map-simple-map2-simplemap5"]], "verse.map.example_map.simple_map2.SimpleMap6": [[140, "verse-map-example-map-simple-map2-simplemap6"]], "verse.map.example_map.simple_map_3d": [[141, "module-verse.map.example_map.simple_map_3d"]], "verse.map.example_map.simple_map_3d.SimpleMap1": [[142, "verse-map-example-map-simple-map-3d-simplemap1"]], "verse.map.example_map.simple_map_3d.SimpleMap2": [[143, "verse-map-example-map-simple-map-3d-simplemap2"]], "verse.map.example_map.simple_map_3d.SimpleMap3": [[144, "verse-map-example-map-simple-map-3d-simplemap3"]], "verse.map.example_map.simple_map_3d.SimpleMap4": [[145, "verse-map-example-map-simple-map-3d-simplemap4"]], "verse.map.example_map.simple_map_3d.SimpleMap5": [[146, "verse-map-example-map-simple-map-3d-simplemap5"]], "verse.map.example_map.simple_map_3d.SimpleMap6": [[147, "verse-map-example-map-simple-map-3d-simplemap6"]], "verse.map.example_map.simple_map_3d.SimpleMap7": [[148, "verse-map-example-map-simple-map-3d-simplemap7"]], "verse.map.example_map.simple_map_3d.get_center_radius": [[149, "verse-map-example-map-simple-map-3d-get-center-radius"]], "verse.map.example_map.simple_map_3d.get_end": [[150, "verse-map-example-map-simple-map-3d-get-end"]], "verse.map.lane": [[151, "module-verse.map.lane"]], "verse.map.lane.Lane": [[152, "verse-map-lane-lane"]], "verse.map.lane_3d": [[153, "module-verse.map.lane_3d"]], "verse.map.lane_3d.Lane_3d": [[154, "verse-map-lane-3d-lane-3d"]], "verse.map.lane_map": [[155, "module-verse.map.lane_map"]], "verse.map.lane_map.LaneMap": [[156, "verse-map-lane-map-lanemap"]], "verse.map.lane_map_3d": [[157, "module-verse.map.lane_map_3d"]], "verse.map.lane_map_3d.LaneMap_3d": [[158, "verse-map-lane-map-3d-lanemap-3d"]], "verse.map.lane_segment": [[159, "module-verse.map.lane_segment"]], "verse.map.lane_segment.AbstractLane": [[160, "verse-map-lane-segment-abstractlane"]], "verse.map.lane_segment.CircularLane": [[161, "verse-map-lane-segment-circularlane"]], "verse.map.lane_segment.LaneSegment": [[162, "verse-map-lane-segment-lanesegment"]], "verse.map.lane_segment.LineType": [[163, "verse-map-lane-segment-linetype"]], "verse.map.lane_segment.StraightLane": [[164, "verse-map-lane-segment-straightlane"]], "verse.map.lane_segment_3d": [[165, "module-verse.map.lane_segment_3d"]], "verse.map.lane_segment_3d.AbstractLane_3d": [[166, "verse-map-lane-segment-3d-abstractlane-3d"]], "verse.map.lane_segment_3d.CircularLane_3d_v1": [[167, "verse-map-lane-segment-3d-circularlane-3d-v1"]], "verse.map.lane_segment_3d.CircularLane_3d_v2": [[168, "verse-map-lane-segment-3d-circularlane-3d-v2"]], "verse.map.lane_segment_3d.LineType_3d": [[169, "verse-map-lane-segment-3d-linetype-3d"]], "verse.map.lane_segment_3d.StraightLane_3d": [[170, "verse-map-lane-segment-3d-straightlane-3d"]], "verse.map.lane_segment_3d.func_a": [[171, "verse-map-lane-segment-3d-func-a"]], "verse.map.lane_segment_3d.func_b": [[172, "verse-map-lane-segment-3d-func-b"]], "verse.map.lane_segment_3d.get_center_radius": [[173, "verse-map-lane-segment-3d-get-center-radius"]], "verse.map.lane_segment_3d.get_coor_by_rt": [[174, "verse-map-lane-segment-3d-get-coor-by-rt"]], "verse.map.lane_segment_3d.get_rtp_by_coor": [[175, "verse-map-lane-segment-3d-get-rtp-by-coor"]], "verse.map.lane_segment_3d.get_theta_by_coor": [[176, "verse-map-lane-segment-3d-get-theta-by-coor"]], "verse.map.opendrive_parser": [[177, "module-verse.map.opendrive_parser"]], "verse.map.opendrive_parser.check_valid_side": [[178, "verse-map-opendrive-parser-check-valid-side"]], "verse.map.opendrive_parser.condense_matrix": [[179, "verse-map-opendrive-parser-condense-matrix"]], "verse.map.opendrive_parser.file_parser": [[180, "verse-map-opendrive-parser-file-parser"]], "verse.map.opendrive_parser.opendrive_map": [[181, "verse-map-opendrive-parser-opendrive-map"]], "verse.map.opendrive_parser.road_traverser": [[182, "verse-map-opendrive-parser-road-traverser"]], "verse.parser": [[183, "module-verse.parser"]], "verse.parser.astunparser": [[184, "module-verse.parser.astunparser"]], "verse.parser.astunparser.Unparser": [[185, "verse-parser-astunparser-unparser"]], "verse.parser.astunparser.interleave": [[186, "verse-parser-astunparser-interleave"]], "verse.parser.astunparser.main": [[187, "verse-parser-astunparser-main"]], "verse.parser.astunparser.roundtrip": [[188, "verse-parser-astunparser-roundtrip"]], "verse.parser.astunparser.testdir": [[189, "verse-parser-astunparser-testdir"]], "verse.parser.astunparser.unparse": [[190, "verse-parser-astunparser-unparse"]], "verse.parser.parser": [[191, "module-verse.parser.parser"]], "verse.parser.parser.ArgSubstituter": [[192, "verse-parser-parser-argsubstituter"]], "verse.parser.parser.Assert": [[193, "verse-parser-parser-assert"]], "verse.parser.parser.CompiledAssert": [[194, "verse-parser-parser-compiledassert"]], "verse.parser.parser.CondVal": [[195, "verse-parser-parser-condval"]], "verse.parser.parser.CondValCase": [[196, "verse-parser-parser-condvalcase"]], "verse.parser.parser.ControllerIR": [[197, "verse-parser-parser-controllerir"]], "verse.parser.parser.CustomIR": [[198, "verse-parser-parser-customir"]], "verse.parser.parser.Env": [[199, "verse-parser-parser-env"]], "verse.parser.parser.Lambda": [[200, "verse-parser-parser-lambda"]], "verse.parser.parser.LambdaArg": [[201, "verse-parser-parser-lambdaarg"]], "verse.parser.parser.ModeDef": [[202, "verse-parser-parser-modedef"]], "verse.parser.parser.ModePath": [[203, "verse-parser-parser-modepath"]], "verse.parser.parser.Reduction": [[204, "verse-parser-parser-reduction"]], "verse.parser.parser.ReductionType": [[205, "verse-parser-parser-reductiontype"]], "verse.parser.parser.ScopeLevel": [[206, "verse-parser-parser-scopelevel"]], "verse.parser.parser.StateDef": [[207, "verse-parser-parser-statedef"]], "verse.parser.parser._Assert": [[208, "verse-parser-parser-assert"]], "verse.parser.parser.ast_dump": [[209, "verse-parser-parser-ast-dump"]], "verse.parser.parser.compile_expr": [[210, "verse-parser-parser-compile-expr"]], "verse.parser.parser.find": [[211, "verse-parser-parser-find"]], "verse.parser.parser.fully_cond": [[212, "verse-parser-parser-fully-cond"]], "verse.parser.parser.is_main_check": [[213, "verse-parser-parser-is-main-check"]], "verse.parser.parser.merge_assert": [[214, "verse-parser-parser-merge-assert"]], "verse.parser.parser.merge_conds": [[215, "verse-parser-parser-merge-conds"]], "verse.parser.parser.merge_if": [[216, "verse-parser-parser-merge-if"]], "verse.parser.parser.merge_if_single": [[217, "verse-parser-parser-merge-if-single"]], "verse.parser.parser.merge_if_val": [[218, "verse-parser-parser-merge-if-val"]], "verse.parser.parser.not_ir_ast": [[219, "verse-parser-parser-not-ir-ast"]], "verse.parser.parser.proc": [[220, "verse-parser-parser-proc"]], "verse.parser.parser.proc_assign": [[221, "verse-parser-parser-proc-assign"]], "verse.parser.parser.unparse": [[222, "verse-parser-parser-unparse"]], "verse.plotter": [[223, "module-verse.plotter"]], "verse.plotter.plotter2D": [[224, "module-verse.plotter.plotter2D"]], "verse.plotter.plotter2D.check_dim": [[225, "verse-plotter-plotter2d-check-dim"]], "verse.plotter.plotter2D.create_anime_dict": [[226, "verse-plotter-plotter2d-create-anime-dict"]], "verse.plotter.plotter2D.draw_map": [[227, "verse-plotter-plotter2d-draw-map"]], "verse.plotter.plotter2D.duration": [[228, "verse-plotter-plotter2d-duration"]], "verse.plotter.plotter2D.get_text_pos": [[229, "verse-plotter-plotter2d-get-text-pos"]], "verse.plotter.plotter2D.num_digits": [[230, "verse-plotter-plotter2d-num-digits"]], "verse.plotter.plotter2D.reachtube_anime": [[231, "verse-plotter-plotter2d-reachtube-anime"]], "verse.plotter.plotter2D.reachtube_tree": [[232, "verse-plotter-plotter2d-reachtube-tree"]], "verse.plotter.plotter2D.reachtube_tree_single": [[233, "verse-plotter-plotter2d-reachtube-tree-single"]], "verse.plotter.plotter2D.sample_trace": [[234, "verse-plotter-plotter2d-sample-trace"]], "verse.plotter.plotter2D.simulation_anime": [[235, "verse-plotter-plotter2d-simulation-anime"]], "verse.plotter.plotter2D.simulation_tree": [[236, "verse-plotter-plotter2d-simulation-tree"]], "verse.plotter.plotter2D.simulation_tree_single": [[237, "verse-plotter-plotter2d-simulation-tree-single"]], "verse.plotter.plotter2D.update_style": [[238, "verse-plotter-plotter2d-update-style"]], "verse.plotter.plotter2D_old": [[239, "module-verse.plotter.plotter2D_old"]], "verse.plotter.plotter2D_old.generate_simulation_anime": [[240, "verse-plotter-plotter2d-old-generate-simulation-anime"]], "verse.plotter.plotter2D_old.plot": [[241, "verse-plotter-plotter2d-old-plot"]], "verse.plotter.plotter2D_old.plot_map": [[242, "verse-plotter-plotter2d-old-plot-map"]], "verse.plotter.plotter2D_old.plot_reachtube_tree": [[243, "verse-plotter-plotter2d-old-plot-reachtube-tree"]], "verse.plotter.plotter2D_old.plot_simulation_tree": [[244, "verse-plotter-plotter2d-old-plot-simulation-tree"]], "verse.plotter.plotter3D": [[245, "module-verse.plotter.plotter3D"]], "verse.plotter.plotter3D.plot3dMap": [[246, "verse-plotter-plotter3d-plot3dmap"]], "verse.plotter.plotter3D.plot3dReachtube": [[247, "verse-plotter-plotter3d-plot3dreachtube"]], "verse.plotter.plotter3D.plot3dReachtubeSingle": [[248, "verse-plotter-plotter3d-plot3dreachtubesingle"]], "verse.plotter.plotter3D.plot_line_3d": [[249, "verse-plotter-plotter3d-plot-line-3d"]], "verse.plotter.plotter3D.plot_point_3d": [[250, "verse-plotter-plotter3d-plot-point-3d"]], "verse.plotter.plotter3D.plot_polytope_3d": [[251, "verse-plotter-plotter3d-plot-polytope-3d"]], "verse.plotter.plotter3D_new": [[252, "module-verse.plotter.plotter3D_new"]], "verse.plotter.plotter3D_new.check_dim": [[253, "verse-plotter-plotter3d-new-check-dim"]], "verse.plotter.plotter3D_new.draw_map_3d": [[254, "verse-plotter-plotter3d-new-draw-map-3d"]], "verse.plotter.plotter3D_new.reachtube_tree_3d": [[255, "verse-plotter-plotter3d-new-reachtube-tree-3d"]], "verse.plotter.plotter3D_new.reachtube_tree_single_3d": [[256, "verse-plotter-plotter3d-new-reachtube-tree-single-3d"]], "verse.plotter.plotter3D_new.sample_trace": [[257, "verse-plotter-plotter3d-new-sample-trace"]], "verse.plotter.plotter3D_new.simulation_tree_3d": [[258, "verse-plotter-plotter3d-new-simulation-tree-3d"]], "verse.plotter.plotter3D_new.simulation_tree_single_3d": [[259, "verse-plotter-plotter3d-new-simulation-tree-single-3d"]], "verse.plotter.plotter3D_new.update_style": [[260, "verse-plotter-plotter3d-new-update-style"]], "verse.scenario": [[261, "module-verse.scenario"]], "verse.scenario.scenario": [[262, "module-verse.scenario.scenario"]], "verse.scenario.scenario.Benchmark": [[263, "verse-scenario-scenario-benchmark"]], "verse.scenario.scenario.ExprConfig": [[264, "verse-scenario-scenario-exprconfig"]], "verse.scenario.scenario.Scenario": [[265, "verse-scenario-scenario-scenario"]], "verse.scenario.scenario.ScenarioConfig": [[266, "verse-scenario-scenario-scenarioconfig"]], "verse.scenario.scenario.check_ray_init": [[267, "verse-scenario-scenario-check-ray-init"]], "verse.scenario.scenario.red": [[268, "verse-scenario-scenario-red"]], "verse.sensor": [[269, "module-verse.sensor"]], "verse.sensor.base_sensor": [[270, "module-verse.sensor.base_sensor"]], "verse.sensor.base_sensor.BaseSensor": [[271, "verse-sensor-base-sensor-basesensor"]], "verse.sensor.base_sensor.add_states_2d": [[272, "verse-sensor-base-sensor-add-states-2d"]], "verse.sensor.base_sensor.add_states_3d": [[273, "verse-sensor-base-sensor-add-states-3d"]], "verse.sensor.base_sensor.adds": [[274, "verse-sensor-base-sensor-adds"]], "verse.sensor.base_sensor.set_states_2d": [[275, "verse-sensor-base-sensor-set-states-2d"]], "verse.sensor.base_sensor.set_states_3d": [[276, "verse-sensor-base-sensor-set-states-3d"]], "verse.sensor.base_sensor.sets": [[277, "verse-sensor-base-sensor-sets"]], "verse.sensor.example_sensor": [[278, "module-verse.sensor.example_sensor"]], "verse.sensor.example_sensor.craft_sensor": [[279, "module-verse.sensor.example_sensor.craft_sensor"]], "verse.sensor.example_sensor.craft_sensor.CraftSensor": [[280, "verse-sensor-example-sensor-craft-sensor-craftsensor"]], "verse.sensor.example_sensor.craft_sensor.add_states_2d_ball": [[281, "verse-sensor-example-sensor-craft-sensor-add-states-2d-ball"]], "verse.sensor.example_sensor.craft_sensor.add_states_3d_ball": [[282, "verse-sensor-example-sensor-craft-sensor-add-states-3d-ball"]], "verse.sensor.example_sensor.craft_sensor.adds": [[283, "verse-sensor-example-sensor-craft-sensor-adds"]], "verse.sensor.example_sensor.craft_sensor.set_states_2d_ball": [[284, "verse-sensor-example-sensor-craft-sensor-set-states-2d-ball"]], "verse.sensor.example_sensor.craft_sensor.set_states_3d_ball": [[285, "verse-sensor-example-sensor-craft-sensor-set-states-3d-ball"]], "verse.sensor.example_sensor.craft_sensor.sets": [[286, "verse-sensor-example-sensor-craft-sensor-sets"]], "verse.sensor.example_sensor.quadrotor_sensor": [[287, "module-verse.sensor.example_sensor.quadrotor_sensor"]], "verse.sensor.example_sensor.quadrotor_sensor.QuadrotorSensor": [[288, "verse-sensor-example-sensor-quadrotor-sensor-quadrotorsensor"]], "verse.sensor.example_sensor.quadrotor_sensor.add_states_2d_ball": [[289, "verse-sensor-example-sensor-quadrotor-sensor-add-states-2d-ball"]], "verse.sensor.example_sensor.quadrotor_sensor.add_states_3d_ball": [[290, "verse-sensor-example-sensor-quadrotor-sensor-add-states-3d-ball"]], "verse.sensor.example_sensor.quadrotor_sensor.adds": [[291, "verse-sensor-example-sensor-quadrotor-sensor-adds"]], "verse.sensor.example_sensor.quadrotor_sensor.set_states_2d_ball": [[292, "verse-sensor-example-sensor-quadrotor-sensor-set-states-2d-ball"]], "verse.sensor.example_sensor.quadrotor_sensor.set_states_3d_ball": [[293, "verse-sensor-example-sensor-quadrotor-sensor-set-states-3d-ball"]], "verse.sensor.example_sensor.quadrotor_sensor.sets": [[294, "verse-sensor-example-sensor-quadrotor-sensor-sets"]], "verse.sensor.example_sensor.single_sensor": [[295, "module-verse.sensor.example_sensor.single_sensor"]], "verse.sensor.example_sensor.single_sensor.FakeSensor3": [[296, "verse-sensor-example-sensor-single-sensor-fakesensor3"]], "verse.sensor.example_sensor.single_sensor.FakeSensor4": [[297, "verse-sensor-example-sensor-single-sensor-fakesensor4"]], "verse.sensor.example_sensor.single_sensor.SingleSensor": [[298, "verse-sensor-example-sensor-single-sensor-singlesensor"]], "verse.sensor.example_sensor.single_sensor.add_states_2d": [[299, "verse-sensor-example-sensor-single-sensor-add-states-2d"]], "verse.sensor.example_sensor.single_sensor.add_states_2d_ball": [[300, "verse-sensor-example-sensor-single-sensor-add-states-2d-ball"]], "verse.sensor.example_sensor.single_sensor.add_states_3d": [[301, "verse-sensor-example-sensor-single-sensor-add-states-3d"]], "verse.sensor.example_sensor.single_sensor.add_states_3d_ball": [[302, "verse-sensor-example-sensor-single-sensor-add-states-3d-ball"]], "verse.sensor.example_sensor.single_sensor.adds": [[303, "verse-sensor-example-sensor-single-sensor-adds"]], "verse.sensor.example_sensor.single_sensor.set_states_2d": [[304, "verse-sensor-example-sensor-single-sensor-set-states-2d"]], "verse.sensor.example_sensor.single_sensor.set_states_2d_ball": [[305, "verse-sensor-example-sensor-single-sensor-set-states-2d-ball"]], "verse.sensor.example_sensor.single_sensor.set_states_3d": [[306, "verse-sensor-example-sensor-single-sensor-set-states-3d"]], "verse.sensor.example_sensor.single_sensor.set_states_3d_ball": [[307, "verse-sensor-example-sensor-single-sensor-set-states-3d-ball"]], "verse.sensor.example_sensor.single_sensor.sets": [[308, "verse-sensor-example-sensor-single-sensor-sets"]], "verse.sensor.example_sensor.thermo_sensor": [[309, "module-verse.sensor.example_sensor.thermo_sensor"]], "verse.sensor.example_sensor.thermo_sensor.ThermoSensor": [[310, "verse-sensor-example-sensor-thermo-sensor-thermosensor"]], "verse.sensor.example_sensor.thermo_sensor.add_states_2d_ball": [[311, "verse-sensor-example-sensor-thermo-sensor-add-states-2d-ball"]], "verse.sensor.example_sensor.thermo_sensor.add_states_3d_ball": [[312, "verse-sensor-example-sensor-thermo-sensor-add-states-3d-ball"]], "verse.sensor.example_sensor.thermo_sensor.adds": [[313, "verse-sensor-example-sensor-thermo-sensor-adds"]], "verse.sensor.example_sensor.thermo_sensor.set_states_2d_ball": [[314, "verse-sensor-example-sensor-thermo-sensor-set-states-2d-ball"]], "verse.sensor.example_sensor.thermo_sensor.set_states_3d_ball": [[315, "verse-sensor-example-sensor-thermo-sensor-set-states-3d-ball"]], "verse.sensor.example_sensor.thermo_sensor.sets": [[316, "verse-sensor-example-sensor-thermo-sensor-sets"]], "Agent": [[317, "agent"]], "Contributors": [[318, "contributors"]], "Creating Scenario in Verse": [[319, "creating-scenario-in-verse"]], "Instantiate Map": [[319, "instantiate-map"]], "Creating Agent": [[319, "creating-agent"]], "Creating Scenario": [[319, "creating-scenario"]], "Getting Started": [[320, "getting-started"]], "Welcome to verse\u2019s documentation!": [[321, "welcome-to-verse-s-documentation"]], "Contents:": [[321, null]], "API Documentation": [[321, "api-documentation"]], "Indices and tables": [[321, "indices-and-tables"]], "Map": [[322, "map"]], "Simulations": [[323, "simulations"]], "Reachtubes": [[323, "reachtubes"]], "Parser": [[324, "parser"]], "Goals": [[324, "goals"]], "Working Principle": [[324, "working-principle"]], "Conditional Values": [[324, "conditional-values"]], "<a name=\"Reductions\"></a>Reductions": [[324, "reductions"]], "Limitations": [[324, "limitations"]], "Visualization": [[325, "visualization"]], "Function list": [[325, "function-list"]], "Common paramteres": [[325, "common-paramteres"]], "2D Visualization": [[325, "d-visualization"]], "simulation_tree": [[325, "simulation-tree"]], "simulation_anime": [[325, "simulation-anime"]], "reachtube_tree": [[325, "reachtube-tree"]], "reachtube_anime": [[325, "reachtube-anime"]], "3D Visualization": [[325, "id1"]], "Scenario": [[326, "scenario"]], "Sensor": [[327, "sensor"]]}, "indexentries": {"module": [[0, "module-verse"], [1, "module-verse.agents"], [2, "module-verse.agents.base_agent"], [4, "module-verse.agents.example_agent"], [5, "module-verse.agents.example_agent.ball_agent"], [7, "module-verse.agents.example_agent.car_agent"], [13, "module-verse.agents.example_agent.origin_agent"], [17, "module-verse.agents.example_agent.quadrotor_agent"], [20, "module-verse.agents.example_agent.robot_agent"], [22, "module-verse.agents.example_agent.sign_agent"], [24, "module-verse.analysis"], [25, "module-verse.analysis.analysis_tree"], [33, "module-verse.analysis.dryvr"], [41, "module-verse.analysis.incremental"], [56, "module-verse.analysis.mixmonotone"], [65, "module-verse.analysis.simulator"], [75, "module-verse.analysis.utils"], [103, "module-verse.analysis.verifier"], [108, "module-verse.automaton"], [109, "module-verse.automaton.guard"], [114, "module-verse.automaton.hybrid_automaton"], [116, "module-verse.automaton.hybrid_io_automaton"], [118, "module-verse.automaton.reset"], [120, "module-verse.map"], [121, "module-verse.map.example_map"], [122, "module-verse.map.example_map.intersection"], [124, "module-verse.map.example_map.map_tacas"], [131, "module-verse.map.example_map.simple_map"], [134, "module-verse.map.example_map.simple_map2"], [141, "module-verse.map.example_map.simple_map_3d"], [151, "module-verse.map.lane"], [153, "module-verse.map.lane_3d"], [155, "module-verse.map.lane_map"], [157, "module-verse.map.lane_map_3d"], [159, "module-verse.map.lane_segment"], [165, "module-verse.map.lane_segment_3d"], [177, "module-verse.map.opendrive_parser"], [183, "module-verse.parser"], [184, "module-verse.parser.astunparser"], [191, "module-verse.parser.parser"], [223, "module-verse.plotter"], [224, "module-verse.plotter.plotter2D"], [239, "module-verse.plotter.plotter2D_old"], [245, "module-verse.plotter.plotter3D"], [252, "module-verse.plotter.plotter3D_new"], [261, "module-verse.scenario"], [262, "module-verse.scenario.scenario"], [269, "module-verse.sensor"], [270, "module-verse.sensor.base_sensor"], [278, "module-verse.sensor.example_sensor"], [279, "module-verse.sensor.example_sensor.craft_sensor"], [287, "module-verse.sensor.example_sensor.quadrotor_sensor"], [295, "module-verse.sensor.example_sensor.single_sensor"], [309, "module-verse.sensor.example_sensor.thermo_sensor"]], "verse": [[0, "module-verse"]], "verse.agents": [[1, "module-verse.agents"]], "verse.agents.base_agent": [[2, "module-verse.agents.base_agent"]], "baseagent (class in verse.agents.base_agent)": [[3, "verse.agents.base_agent.BaseAgent"]], "tc_simulate() (verse.agents.base_agent.baseagent method)": [[3, "verse.agents.base_agent.BaseAgent.TC_simulate"]], "__init__() (verse.agents.base_agent.baseagent method)": [[3, "verse.agents.base_agent.BaseAgent.__init__"]], "verse.agents.example_agent": [[4, "module-verse.agents.example_agent"]], "verse.agents.example_agent.ball_agent": [[5, "module-verse.agents.example_agent.ball_agent"]], "ballagent (class in verse.agents.example_agent.ball_agent)": [[6, "verse.agents.example_agent.ball_agent.BallAgent"]], "tc_simulate() (verse.agents.example_agent.ball_agent.ballagent method)": [[6, "verse.agents.example_agent.ball_agent.BallAgent.TC_simulate"]], "__init__() (verse.agents.example_agent.ball_agent.ballagent method)": [[6, "verse.agents.example_agent.ball_agent.BallAgent.__init__"]], "dynamic() (verse.agents.example_agent.ball_agent.ballagent static method)": [[6, "verse.agents.example_agent.ball_agent.BallAgent.dynamic"]], "verse.agents.example_agent.car_agent": [[7, "module-verse.agents.example_agent.car_agent"]], "caragent (class in verse.agents.example_agent.car_agent)": [[8, "verse.agents.example_agent.car_agent.CarAgent"]], "tc_simulate() (verse.agents.example_agent.car_agent.caragent method)": [[8, "verse.agents.example_agent.car_agent.CarAgent.TC_simulate"]], "__init__() (verse.agents.example_agent.car_agent.caragent method)": [[8, "verse.agents.example_agent.car_agent.CarAgent.__init__"]], "caragentdebounced (class in verse.agents.example_agent.car_agent)": [[9, "verse.agents.example_agent.car_agent.CarAgentDebounced"]], "tc_simulate() (verse.agents.example_agent.car_agent.caragentdebounced method)": [[9, "verse.agents.example_agent.car_agent.CarAgentDebounced.TC_simulate"]], "__init__() (verse.agents.example_agent.car_agent.caragentdebounced method)": [[9, "verse.agents.example_agent.car_agent.CarAgentDebounced.__init__"]], "caragentswitch2 (class in verse.agents.example_agent.car_agent)": [[10, "verse.agents.example_agent.car_agent.CarAgentSwitch2"]], "tc_simulate() (verse.agents.example_agent.car_agent.caragentswitch2 method)": [[10, "verse.agents.example_agent.car_agent.CarAgentSwitch2.TC_simulate"]], "__init__() (verse.agents.example_agent.car_agent.caragentswitch2 method)": [[10, "verse.agents.example_agent.car_agent.CarAgentSwitch2.__init__"]], "npcagent (class in verse.agents.example_agent.car_agent)": [[11, "verse.agents.example_agent.car_agent.NPCAgent"]], "tc_simulate() (verse.agents.example_agent.car_agent.npcagent method)": [[11, "verse.agents.example_agent.car_agent.NPCAgent.TC_simulate"]], "__init__() (verse.agents.example_agent.car_agent.npcagent method)": [[11, "verse.agents.example_agent.car_agent.NPCAgent.__init__"]], "action_handler() (verse.agents.example_agent.car_agent.npcagent method)": [[11, "verse.agents.example_agent.car_agent.NPCAgent.action_handler"]], "tc_simulate() (verse.agents.example_agent.car_agent.weirdcaragent method)": [[12, "verse.agents.example_agent.car_agent.WeirdCarAgent.TC_simulate"]], "weirdcaragent (class in verse.agents.example_agent.car_agent)": [[12, "verse.agents.example_agent.car_agent.WeirdCarAgent"]], "__init__() (verse.agents.example_agent.car_agent.weirdcaragent method)": [[12, "verse.agents.example_agent.car_agent.WeirdCarAgent.__init__"]], "verse.agents.example_agent.origin_agent": [[13, "module-verse.agents.example_agent.origin_agent"]], "tc_simulate() (verse.agents.example_agent.origin_agent.craft_agent method)": [[14, "verse.agents.example_agent.origin_agent.craft_agent.TC_simulate"]], "__init__() (verse.agents.example_agent.origin_agent.craft_agent method)": [[14, "verse.agents.example_agent.origin_agent.craft_agent.__init__"]], "craft_agent (class in verse.agents.example_agent.origin_agent)": [[14, "verse.agents.example_agent.origin_agent.craft_agent"]], "tc_simulate() (verse.agents.example_agent.origin_agent.thermo_agent method)": [[15, "verse.agents.example_agent.origin_agent.thermo_agent.TC_simulate"]], "__init__() (verse.agents.example_agent.origin_agent.thermo_agent method)": [[15, "verse.agents.example_agent.origin_agent.thermo_agent.__init__"]], "thermo_agent (class in verse.agents.example_agent.origin_agent)": [[15, "verse.agents.example_agent.origin_agent.thermo_agent"]], "tc_simulate() (verse.agents.example_agent.origin_agent.vanderpol_agent method)": [[16, "verse.agents.example_agent.origin_agent.vanderpol_agent.TC_simulate"]], "__init__() (verse.agents.example_agent.origin_agent.vanderpol_agent method)": [[16, "verse.agents.example_agent.origin_agent.vanderpol_agent.__init__"]], "vanderpol_agent (class in verse.agents.example_agent.origin_agent)": [[16, "verse.agents.example_agent.origin_agent.vanderpol_agent"]], "verse.agents.example_agent.quadrotor_agent": [[17, "module-verse.agents.example_agent.quadrotor_agent"]], "ffnnc (class in verse.agents.example_agent.quadrotor_agent)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC"]], "__init__() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.__init__"]], "add_module() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.add_module"]], "apply() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.apply"]], "bfloat16() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.bfloat16"]], "buffers() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.buffers"]], "children() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.children"]], "cpu() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.cpu"]], "cuda() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.cuda"]], "double() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.double"]], "eval() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.eval"]], "extra_repr() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.extra_repr"]], "float() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.float"]], "forward() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.forward"]], "get_buffer() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.get_buffer"]], "get_extra_state() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.get_extra_state"]], "get_parameter() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.get_parameter"]], "get_submodule() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.get_submodule"]], "half() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.half"]], "ipu() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.ipu"]], "load_state_dict() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.load_state_dict"]], "modules() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.modules"]], "named_buffers() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.named_buffers"]], "named_children() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.named_children"]], "named_modules() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.named_modules"]], "named_parameters() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.named_parameters"]], "parameters() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.parameters"]], "register_backward_hook() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.register_backward_hook"]], "register_buffer() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.register_buffer"]], "register_forward_hook() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.register_forward_hook"]], "register_forward_pre_hook() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.register_forward_pre_hook"]], "register_full_backward_hook() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.register_full_backward_hook"]], "register_load_state_dict_post_hook() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.register_load_state_dict_post_hook"]], "register_module() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.register_module"]], "register_parameter() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.register_parameter"]], "requires_grad_() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.requires_grad_"]], "set_extra_state() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.set_extra_state"]], "share_memory() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.share_memory"]], "state_dict() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.state_dict"]], "to() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.to"]], "to_empty() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.to_empty"]], "train() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.train"]], "type() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.type"]], "xpu() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.xpu"]], "zero_grad() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.zero_grad"]], "quadrotoragent (class in verse.agents.example_agent.quadrotor_agent)": [[19, "verse.agents.example_agent.quadrotor_agent.QuadrotorAgent"]], "tc_simulate() (verse.agents.example_agent.quadrotor_agent.quadrotoragent method)": [[19, "verse.agents.example_agent.quadrotor_agent.QuadrotorAgent.TC_simulate"]], "__init__() (verse.agents.example_agent.quadrotor_agent.quadrotoragent method)": [[19, "verse.agents.example_agent.quadrotor_agent.QuadrotorAgent.__init__"]], "verse.agents.example_agent.robot_agent": [[20, "module-verse.agents.example_agent.robot_agent"]], "robotagent (class in verse.agents.example_agent.robot_agent)": [[21, "verse.agents.example_agent.robot_agent.RobotAgent"]], "tc_simulate() (verse.agents.example_agent.robot_agent.robotagent method)": [[21, "verse.agents.example_agent.robot_agent.RobotAgent.TC_simulate"]], "__init__() (verse.agents.example_agent.robot_agent.robotagent method)": [[21, "verse.agents.example_agent.robot_agent.RobotAgent.__init__"]], "verse.agents.example_agent.sign_agent": [[22, "module-verse.agents.example_agent.sign_agent"]], "signagent (class in verse.agents.example_agent.sign_agent)": [[23, "verse.agents.example_agent.sign_agent.SignAgent"]], "tc_simulate() (verse.agents.example_agent.sign_agent.signagent method)": [[23, "verse.agents.example_agent.sign_agent.SignAgent.TC_simulate"]], "__init__() (verse.agents.example_agent.sign_agent.signagent method)": [[23, "verse.agents.example_agent.sign_agent.SignAgent.__init__"]], "verse.analysis": [[24, "module-verse.analysis"]], "verse.analysis.analysis_tree": [[25, "module-verse.analysis.analysis_tree"]], "analysistree (class in verse.analysis.analysis_tree)": [[26, "verse.analysis.analysis_tree.AnalysisTree"]], "__init__() (verse.analysis.analysis_tree.analysistree method)": [[26, "verse.analysis.analysis_tree.AnalysisTree.__init__"]], "contains() (verse.analysis.analysis_tree.analysistree method)": [[26, "verse.analysis.analysis_tree.AnalysisTree.contains"]], "dump() (verse.analysis.analysis_tree.analysistree method)": [[26, "verse.analysis.analysis_tree.AnalysisTree.dump"]], "is_equal() (verse.analysis.analysis_tree.analysistree method)": [[26, "verse.analysis.analysis_tree.AnalysisTree.is_equal"]], "leaves() (verse.analysis.analysis_tree.analysistree method)": [[26, "verse.analysis.analysis_tree.AnalysisTree.leaves"]], "load() (verse.analysis.analysis_tree.analysistree static method)": [[26, "verse.analysis.analysis_tree.AnalysisTree.load"]], "nodes (verse.analysis.analysis_tree.analysistree attribute)": [[26, "verse.analysis.analysis_tree.AnalysisTree.nodes"]], "root (verse.analysis.analysis_tree.analysistree attribute)": [[26, "verse.analysis.analysis_tree.AnalysisTree.root"]], "visualize() (verse.analysis.analysis_tree.analysistree method)": [[26, "verse.analysis.analysis_tree.AnalysisTree.visualize"]], "visualize_dot() (verse.analysis.analysis_tree.analysistree method)": [[26, "verse.analysis.analysis_tree.AnalysisTree.visualize_dot"]], "analysistreenode (class in verse.analysis.analysis_tree)": [[27, "verse.analysis.analysis_tree.AnalysisTreeNode"]], "__init__() (verse.analysis.analysis_tree.analysistreenode method)": [[27, "verse.analysis.analysis_tree.AnalysisTreeNode.__init__"]], "agent (verse.analysis.analysis_tree.analysistreenode attribute)": [[27, "verse.analysis.analysis_tree.AnalysisTreeNode.agent"]], "assert_hits (verse.analysis.analysis_tree.analysistreenode attribute)": [[27, "verse.analysis.analysis_tree.AnalysisTreeNode.assert_hits"]], "child (verse.analysis.analysis_tree.analysistreenode attribute)": [[27, "verse.analysis.analysis_tree.AnalysisTreeNode.child"]], "get_mode() (verse.analysis.analysis_tree.analysistreenode method)": [[27, "verse.analysis.analysis_tree.AnalysisTreeNode.get_mode"]], "get_track() (verse.analysis.analysis_tree.analysistreenode method)": [[27, "verse.analysis.analysis_tree.AnalysisTreeNode.get_track"]], "height (verse.analysis.analysis_tree.analysistreenode attribute)": [[27, "verse.analysis.analysis_tree.AnalysisTreeNode.height"]], "id (verse.analysis.analysis_tree.analysistreenode attribute)": [[27, "verse.analysis.analysis_tree.AnalysisTreeNode.id"]], "init (verse.analysis.analysis_tree.analysistreenode attribute)": [[27, "verse.analysis.analysis_tree.AnalysisTreeNode.init"]], "mode (verse.analysis.analysis_tree.analysistreenode attribute)": [[27, "verse.analysis.analysis_tree.AnalysisTreeNode.mode"]], "ndigits (verse.analysis.analysis_tree.analysistreenode attribute)": [[27, "verse.analysis.analysis_tree.AnalysisTreeNode.ndigits"]], "new_child() (verse.analysis.analysis_tree.analysistreenode method)": [[27, "verse.analysis.analysis_tree.AnalysisTreeNode.new_child"]], "root_from_inits() (verse.analysis.analysis_tree.analysistreenode static method)": [[27, "verse.analysis.analysis_tree.AnalysisTreeNode.root_from_inits"]], "start_time (verse.analysis.analysis_tree.analysistreenode attribute)": [[27, "verse.analysis.analysis_tree.AnalysisTreeNode.start_time"]], "static (verse.analysis.analysis_tree.analysistreenode attribute)": [[27, "verse.analysis.analysis_tree.AnalysisTreeNode.static"]], "trace (verse.analysis.analysis_tree.analysistreenode attribute)": [[27, "verse.analysis.analysis_tree.AnalysisTreeNode.trace"]], "type (verse.analysis.analysis_tree.analysistreenode attribute)": [[27, "verse.analysis.analysis_tree.AnalysisTreeNode.type"]], "uncertain_param (verse.analysis.analysis_tree.analysistreenode attribute)": [[27, "verse.analysis.analysis_tree.AnalysisTreeNode.uncertain_param"]], "analysistreenodetype (class in verse.analysis.analysis_tree)": [[28, "verse.analysis.analysis_tree.AnalysisTreeNodeType"]], "_color_interp() (in module verse.analysis.analysis_tree)": [[29, "verse.analysis.analysis_tree._color_interp"]], "first_transitions() (in module verse.analysis.analysis_tree)": [[31, "verse.analysis.analysis_tree.first_transitions"]], "index_of() (in module verse.analysis.analysis_tree)": [[32, "verse.analysis.analysis_tree.index_of"]], "verse.analysis.dryvr": [[33, "module-verse.analysis.dryvr"]], "all_sensitivities_calc() (in module verse.analysis.dryvr)": [[34, "verse.analysis.dryvr.all_sensitivities_calc"]], "calccenterpoint() (in module verse.analysis.dryvr)": [[35, "verse.analysis.dryvr.calcCenterPoint"]], "calcdelta() (in module verse.analysis.dryvr)": [[36, "verse.analysis.dryvr.calcDelta"]], "calc_bloated_tube() (in module verse.analysis.dryvr)": [[37, "verse.analysis.dryvr.calc_bloated_tube"]], "get_reachtube_segment() (in module verse.analysis.dryvr)": [[38, "verse.analysis.dryvr.get_reachtube_segment"]], "randompoint() (in module verse.analysis.dryvr)": [[39, "verse.analysis.dryvr.randomPoint"]], "trimtraces() (in module verse.analysis.dryvr)": [[40, "verse.analysis.dryvr.trimTraces"]], "verse.analysis.incremental": [[41, "module-verse.analysis.incremental"]], "cachedrttrans (class in verse.analysis.incremental)": [[42, "verse.analysis.incremental.CachedRTTrans"]], "__init__() (verse.analysis.incremental.cachedrttrans method)": [[42, "verse.analysis.incremental.CachedRTTrans.__init__"]], "cachedreachtrans (class in verse.analysis.incremental)": [[43, "verse.analysis.incremental.CachedReachTrans"]], "__init__() (verse.analysis.incremental.cachedreachtrans method)": [[43, "verse.analysis.incremental.CachedReachTrans.__init__"]], "cachedsegment (class in verse.analysis.incremental)": [[44, "verse.analysis.incremental.CachedSegment"]], "__init__() (verse.analysis.incremental.cachedsegment method)": [[44, "verse.analysis.incremental.CachedSegment.__init__"]], "cachedtransition (class in verse.analysis.incremental)": [[45, "verse.analysis.incremental.CachedTransition"]], "__init__() (verse.analysis.incremental.cachedtransition method)": [[45, "verse.analysis.incremental.CachedTransition.__init__"]], "cachedtube (class in verse.analysis.incremental)": [[46, "verse.analysis.incremental.CachedTube"]], "__init__() (verse.analysis.incremental.cachedtube method)": [[46, "verse.analysis.incremental.CachedTube.__init__"]], "reachtubecache (class in verse.analysis.incremental)": [[47, "verse.analysis.incremental.ReachTubeCache"]], "__init__() (verse.analysis.incremental.reachtubecache method)": [[47, "verse.analysis.incremental.ReachTubeCache.__init__"]], "simtracecache (class in verse.analysis.incremental)": [[48, "verse.analysis.incremental.SimTraceCache"]], "__init__() (verse.analysis.incremental.simtracecache method)": [[48, "verse.analysis.incremental.SimTraceCache.__init__"]], "tubecache (class in verse.analysis.incremental)": [[49, "verse.analysis.incremental.TubeCache"]], "__init__() (verse.analysis.incremental.tubecache method)": [[49, "verse.analysis.incremental.TubeCache.__init__"]], "combine_all() (in module verse.analysis.incremental)": [[50, "verse.analysis.incremental.combine_all"]], "convert_reach_trans() (in module verse.analysis.incremental)": [[51, "verse.analysis.incremental.convert_reach_trans"]], "convert_sim_trans() (in module verse.analysis.incremental)": [[52, "verse.analysis.incremental.convert_sim_trans"]], "reach_trans_suit() (in module verse.analysis.incremental)": [[53, "verse.analysis.incremental.reach_trans_suit"]], "sim_trans_suit() (in module verse.analysis.incremental)": [[54, "verse.analysis.incremental.sim_trans_suit"]], "to_simulate() (in module verse.analysis.incremental)": [[55, "verse.analysis.incremental.to_simulate"]], "verse.analysis.mixmonotone": [[56, "module-verse.analysis.mixmonotone"]], "calculate_bloated_tube_mixmono_cont() (in module verse.analysis.mixmonotone)": [[57, "verse.analysis.mixmonotone.calculate_bloated_tube_mixmono_cont"]], "calculate_bloated_tube_mixmono_disc() (in module verse.analysis.mixmonotone)": [[58, "verse.analysis.mixmonotone.calculate_bloated_tube_mixmono_disc"]], "compute_reachtube_mixmono_cont() (in module verse.analysis.mixmonotone)": [[59, "verse.analysis.mixmonotone.compute_reachtube_mixmono_cont"]], "compute_reachtube_mixmono_disc() (in module verse.analysis.mixmonotone)": [[60, "verse.analysis.mixmonotone.compute_reachtube_mixmono_disc"]], "find_max() (in module verse.analysis.mixmonotone)": [[61, "verse.analysis.mixmonotone.find_max"]], "find_max_symbolic() (in module verse.analysis.mixmonotone)": [[62, "verse.analysis.mixmonotone.find_max_symbolic"]], "find_min() (in module verse.analysis.mixmonotone)": [[63, "verse.analysis.mixmonotone.find_min"]], "find_min_symbolic() (in module verse.analysis.mixmonotone)": [[64, "verse.analysis.mixmonotone.find_min_symbolic"]], "verse.analysis.simulator": [[65, "module-verse.analysis.simulator"]], "simconsts (class in verse.analysis.simulator)": [[66, "verse.analysis.simulator.SimConsts"]], "__init__() (verse.analysis.simulator.simconsts method)": [[66, "verse.analysis.simulator.SimConsts.__init__"]], "simulator (class in verse.analysis.simulator)": [[67, "verse.analysis.simulator.Simulator"]], "__init__() (verse.analysis.simulator.simulator method)": [[67, "verse.analysis.simulator.Simulator.__init__"]], "checkheight() (in module verse.analysis.simulator)": [[68, "verse.analysis.simulator.checkHeight"]], "check_sim_transitions() (in module verse.analysis.simulator)": [[69, "verse.analysis.simulator.check_sim_transitions"]], "convertenumtostr() (in module verse.analysis.simulator)": [[70, "verse.analysis.simulator.convertEnumToStr"]], "convertstrtoenum() (in module verse.analysis.simulator)": [[71, "verse.analysis.simulator.convertStrToEnum"]], "disc_field() (in module verse.analysis.simulator)": [[72, "verse.analysis.simulator.disc_field"]], "pack_env() (in module verse.analysis.simulator)": [[73, "verse.analysis.simulator.pack_env"]], "red() (in module verse.analysis.simulator)": [[74, "verse.analysis.simulator.red"]], "verse.analysis.utils": [[75, "module-verse.analysis.utils"]], "are_polygons_intersecting() (in module verse.analysis.utils)": [[76, "verse.analysis.utils.are_polygons_intersecting"]], "class_from_path() (in module verse.analysis.utils)": [[77, "verse.analysis.utils.class_from_path"]], "confidence_ellipsoid() (in module verse.analysis.utils)": [[78, "verse.analysis.utils.confidence_ellipsoid"]], "confidence_polytope() (in module verse.analysis.utils)": [[79, "verse.analysis.utils.confidence_polytope"]], "constrain() (in module verse.analysis.utils)": [[80, "verse.analysis.utils.constrain"]], "dedup() (in module verse.analysis.utils)": [[81, "verse.analysis.utils.dedup"]], "distance_to_circle() (in module verse.analysis.utils)": [[82, "verse.analysis.utils.distance_to_circle"]], "distance_to_rect() (in module verse.analysis.utils)": [[83, "verse.analysis.utils.distance_to_rect"]], "do_every() (in module verse.analysis.utils)": [[84, "verse.analysis.utils.do_every"]], "get_class_path() (in module verse.analysis.utils)": [[85, "verse.analysis.utils.get_class_path"]], "has_corner_inside() (in module verse.analysis.utils)": [[86, "verse.analysis.utils.has_corner_inside"]], "interval_distance() (in module verse.analysis.utils)": [[87, "verse.analysis.utils.interval_distance"]], "is_consistent_dataset() (in module verse.analysis.utils)": [[88, "verse.analysis.utils.is_consistent_dataset"]], "is_valid_observation() (in module verse.analysis.utils)": [[89, "verse.analysis.utils.is_valid_observation"]], "lmap() (in module verse.analysis.utils)": [[90, "verse.analysis.utils.lmap"]], "near_split() (in module verse.analysis.utils)": [[91, "verse.analysis.utils.near_split"]], "not_zero() (in module verse.analysis.utils)": [[92, "verse.analysis.utils.not_zero"]], "point_in_ellipse() (in module verse.analysis.utils)": [[93, "verse.analysis.utils.point_in_ellipse"]], "point_in_rectangle() (in module verse.analysis.utils)": [[94, "verse.analysis.utils.point_in_rectangle"]], "point_in_rotated_rectangle() (in module verse.analysis.utils)": [[95, "verse.analysis.utils.point_in_rotated_rectangle"]], "project_polygon() (in module verse.analysis.utils)": [[96, "verse.analysis.utils.project_polygon"]], "rect_corners() (in module verse.analysis.utils)": [[97, "verse.analysis.utils.rect_corners"]], "rotated_rectangles_intersect() (in module verse.analysis.utils)": [[98, "verse.analysis.utils.rotated_rectangles_intersect"]], "sample_rect() (in module verse.analysis.utils)": [[99, "verse.analysis.utils.sample_rect"]], "solve_trinom() (in module verse.analysis.utils)": [[100, "verse.analysis.utils.solve_trinom"]], "to_serializable() (in module verse.analysis.utils)": [[101, "verse.analysis.utils.to_serializable"]], "wrap_to_pi() (in module verse.analysis.utils)": [[102, "verse.analysis.utils.wrap_to_pi"]], "verse.analysis.verifier": [[103, "module-verse.analysis.verifier"]], "reachconsts (class in verse.analysis.verifier)": [[104, "verse.analysis.verifier.ReachConsts"]], "__init__() (verse.analysis.verifier.reachconsts method)": [[104, "verse.analysis.verifier.ReachConsts.__init__"]], "verifier (class in verse.analysis.verifier)": [[105, "verse.analysis.verifier.Verifier"]], "__init__() (verse.analysis.verifier.verifier method)": [[105, "verse.analysis.verifier.Verifier.__init__"]], "calculate_full_bloated_tube_simple() (verse.analysis.verifier.verifier static method)": [[105, "verse.analysis.verifier.Verifier.calculate_full_bloated_tube_simple"]], "check_cache_bloated_tube() (verse.analysis.verifier.verifier method)": [[105, "verse.analysis.verifier.Verifier.check_cache_bloated_tube"]], "checkheight() (in module verse.analysis.verifier)": [[106, "verse.analysis.verifier.checkHeight"]], "combine_rect() (in module verse.analysis.verifier)": [[107, "verse.analysis.verifier.combine_rect"]], "verse.automaton": [[108, "module-verse.automaton"]], "verse.automaton.guard": [[109, "module-verse.automaton.guard"]], "guardexpressionast (class in verse.automaton.guard)": [[110, "verse.automaton.guard.GuardExpressionAst"]], "__init__() (verse.automaton.guard.guardexpressionast method)": [[110, "verse.automaton.guard.GuardExpressionAst.__init__"]], "evaluate_guard_disc() (verse.automaton.guard.guardexpressionast method)": [[110, "verse.automaton.guard.GuardExpressionAst.evaluate_guard_disc"]], "evaluate_guard_hybrid() (verse.automaton.guard.guardexpressionast method)": [[110, "verse.automaton.guard.GuardExpressionAst.evaluate_guard_hybrid"]], "generate_z3_expression() (verse.automaton.guard.guardexpressionast method)": [[110, "verse.automaton.guard.GuardExpressionAst.generate_z3_expression"]], "logictreenode (class in verse.automaton.guard)": [[111, "verse.automaton.guard.LogicTreeNode"]], "__init__() (verse.automaton.guard.logictreenode method)": [[111, "verse.automaton.guard.LogicTreeNode.__init__"]], "nodesubstituter (class in verse.automaton.guard)": [[112, "verse.automaton.guard.NodeSubstituter"]], "__init__() (verse.automaton.guard.nodesubstituter method)": [[112, "verse.automaton.guard.NodeSubstituter.__init__"]], "generic_visit() (verse.automaton.guard.nodesubstituter method)": [[112, "verse.automaton.guard.NodeSubstituter.generic_visit"]], "visit() (verse.automaton.guard.nodesubstituter method)": [[112, "verse.automaton.guard.NodeSubstituter.visit"]], "valuesubstituter (class in verse.automaton.guard)": [[113, "verse.automaton.guard.ValueSubstituter"]], "__init__() (verse.automaton.guard.valuesubstituter method)": [[113, "verse.automaton.guard.ValueSubstituter.__init__"]], "generic_visit() (verse.automaton.guard.valuesubstituter method)": [[113, "verse.automaton.guard.ValueSubstituter.generic_visit"]], "visit() (verse.automaton.guard.valuesubstituter method)": [[113, "verse.automaton.guard.ValueSubstituter.visit"]], "verse.automaton.hybrid_automaton": [[114, "module-verse.automaton.hybrid_automaton"]], "hybridautomaton (class in verse.automaton.hybrid_automaton)": [[115, "verse.automaton.hybrid_automaton.HybridAutomaton"]], "__init__() (verse.automaton.hybrid_automaton.hybridautomaton method)": [[115, "verse.automaton.hybrid_automaton.HybridAutomaton.__init__"]], "verse.automaton.hybrid_io_automaton": [[116, "module-verse.automaton.hybrid_io_automaton"]], "hybridioautomaton (class in verse.automaton.hybrid_io_automaton)": [[117, "verse.automaton.hybrid_io_automaton.HybridIoAutomaton"]], "__init__() (verse.automaton.hybrid_io_automaton.hybridioautomaton method)": [[117, "verse.automaton.hybrid_io_automaton.HybridIoAutomaton.__init__"]], "verse.automaton.reset": [[118, "module-verse.automaton.reset"]], "resetexpression (class in verse.automaton.reset)": [[119, "verse.automaton.reset.ResetExpression"]], "__init__() (verse.automaton.reset.resetexpression method)": [[119, "verse.automaton.reset.ResetExpression.__init__"]], "verse.map": [[120, "module-verse.map"]], "verse.map.example_map": [[121, "module-verse.map.example_map"]], "verse.map.example_map.intersection": [[122, "module-verse.map.example_map.intersection"]], "intersection (class in verse.map.example_map.intersection)": [[123, "verse.map.example_map.intersection.Intersection"]], "__init__() (verse.map.example_map.intersection.intersection method)": [[123, "verse.map.example_map.intersection.Intersection.__init__"]], "verse.map.example_map.map_tacas": [[124, "module-verse.map.example_map.map_tacas"]], "m1 (class in verse.map.example_map.map_tacas)": [[125, "verse.map.example_map.map_tacas.M1"]], "__init__() (verse.map.example_map.map_tacas.m1 method)": [[125, "verse.map.example_map.map_tacas.M1.__init__"]], "m2 (class in verse.map.example_map.map_tacas)": [[126, "verse.map.example_map.map_tacas.M2"]], "__init__() (verse.map.example_map.map_tacas.m2 method)": [[126, "verse.map.example_map.map_tacas.M2.__init__"]], "m3 (class in verse.map.example_map.map_tacas)": [[127, "verse.map.example_map.map_tacas.M3"]], "__init__() (verse.map.example_map.map_tacas.m3 method)": [[127, "verse.map.example_map.map_tacas.M3.__init__"]], "m5 (class in verse.map.example_map.map_tacas)": [[128, "verse.map.example_map.map_tacas.M5"]], "__init__() (verse.map.example_map.map_tacas.m5 method)": [[128, "verse.map.example_map.map_tacas.M5.__init__"]], "m6 (class in verse.map.example_map.map_tacas)": [[129, "verse.map.example_map.map_tacas.M6"]], "__init__() (verse.map.example_map.map_tacas.m6 method)": [[129, "verse.map.example_map.map_tacas.M6.__init__"]], "get_end() (in module verse.map.example_map.map_tacas)": [[130, "verse.map.example_map.map_tacas.get_end"]], "verse.map.example_map.simple_map": [[131, "module-verse.map.example_map.simple_map"]], "simplemap (class in verse.map.example_map.simple_map)": [[132, "verse.map.example_map.simple_map.SimpleMap"]], "__init__() (verse.map.example_map.simple_map.simplemap method)": [[132, "verse.map.example_map.simple_map.SimpleMap.__init__"]], "simplemap2 (class in verse.map.example_map.simple_map)": [[133, "verse.map.example_map.simple_map.SimpleMap2"]], "__init__() (verse.map.example_map.simple_map.simplemap2 method)": [[133, "verse.map.example_map.simple_map.SimpleMap2.__init__"]], "verse.map.example_map.simple_map2": [[134, "module-verse.map.example_map.simple_map2"]], "simplemap2 (class in verse.map.example_map.simple_map2)": [[135, "verse.map.example_map.simple_map2.SimpleMap2"]], "__init__() (verse.map.example_map.simple_map2.simplemap2 method)": [[135, "verse.map.example_map.simple_map2.SimpleMap2.__init__"]], "simplemap3 (class in verse.map.example_map.simple_map2)": [[136, "verse.map.example_map.simple_map2.SimpleMap3"]], "__init__() (verse.map.example_map.simple_map2.simplemap3 method)": [[136, "verse.map.example_map.simple_map2.SimpleMap3.__init__"]], "simplemap4 (class in verse.map.example_map.simple_map2)": [[137, "verse.map.example_map.simple_map2.SimpleMap4"]], "__init__() (verse.map.example_map.simple_map2.simplemap4 method)": [[137, "verse.map.example_map.simple_map2.SimpleMap4.__init__"]], "simplemap4switch2 (class in verse.map.example_map.simple_map2)": [[138, "verse.map.example_map.simple_map2.SimpleMap4Switch2"]], "__init__() (verse.map.example_map.simple_map2.simplemap4switch2 method)": [[138, "verse.map.example_map.simple_map2.SimpleMap4Switch2.__init__"]], "simplemap5 (class in verse.map.example_map.simple_map2)": [[139, "verse.map.example_map.simple_map2.SimpleMap5"]], "__init__() (verse.map.example_map.simple_map2.simplemap5 method)": [[139, "verse.map.example_map.simple_map2.SimpleMap5.__init__"]], "simplemap6 (class in verse.map.example_map.simple_map2)": [[140, "verse.map.example_map.simple_map2.SimpleMap6"]], "__init__() (verse.map.example_map.simple_map2.simplemap6 method)": [[140, "verse.map.example_map.simple_map2.SimpleMap6.__init__"]], "verse.map.example_map.simple_map_3d": [[141, "module-verse.map.example_map.simple_map_3d"]], "simplemap1 (class in verse.map.example_map.simple_map_3d)": [[142, "verse.map.example_map.simple_map_3d.SimpleMap1"]], "__init__() (verse.map.example_map.simple_map_3d.simplemap1 method)": [[142, "verse.map.example_map.simple_map_3d.SimpleMap1.__init__"]], "simplemap2 (class in verse.map.example_map.simple_map_3d)": [[143, "verse.map.example_map.simple_map_3d.SimpleMap2"]], "__init__() (verse.map.example_map.simple_map_3d.simplemap2 method)": [[143, "verse.map.example_map.simple_map_3d.SimpleMap2.__init__"]], "simplemap3 (class in verse.map.example_map.simple_map_3d)": [[144, "verse.map.example_map.simple_map_3d.SimpleMap3"]], "__init__() (verse.map.example_map.simple_map_3d.simplemap3 method)": [[144, "verse.map.example_map.simple_map_3d.SimpleMap3.__init__"]], "simplemap4 (class in verse.map.example_map.simple_map_3d)": [[145, "verse.map.example_map.simple_map_3d.SimpleMap4"]], "__init__() (verse.map.example_map.simple_map_3d.simplemap4 method)": [[145, "verse.map.example_map.simple_map_3d.SimpleMap4.__init__"]], "simplemap5 (class in verse.map.example_map.simple_map_3d)": [[146, "verse.map.example_map.simple_map_3d.SimpleMap5"]], "__init__() (verse.map.example_map.simple_map_3d.simplemap5 method)": [[146, "verse.map.example_map.simple_map_3d.SimpleMap5.__init__"]], "simplemap6 (class in verse.map.example_map.simple_map_3d)": [[147, "verse.map.example_map.simple_map_3d.SimpleMap6"]], "__init__() (verse.map.example_map.simple_map_3d.simplemap6 method)": [[147, "verse.map.example_map.simple_map_3d.SimpleMap6.__init__"]], "simplemap7 (class in verse.map.example_map.simple_map_3d)": [[148, "verse.map.example_map.simple_map_3d.SimpleMap7"]], "__init__() (verse.map.example_map.simple_map_3d.simplemap7 method)": [[148, "verse.map.example_map.simple_map_3d.SimpleMap7.__init__"]], "get_center_radius() (in module verse.map.example_map.simple_map_3d)": [[149, "verse.map.example_map.simple_map_3d.get_center_radius"]], "get_end() (in module verse.map.example_map.simple_map_3d)": [[150, "verse.map.example_map.simple_map_3d.get_end"]], "verse.map.lane": [[151, "module-verse.map.lane"]], "lane (class in verse.map.lane)": [[152, "verse.map.lane.Lane"]], "__init__() (verse.map.lane.lane method)": [[152, "verse.map.lane.Lane.__init__"]], "verse.map.lane_3d": [[153, "module-verse.map.lane_3d"]], "lane_3d (class in verse.map.lane_3d)": [[154, "verse.map.lane_3d.Lane_3d"]], "__init__() (verse.map.lane_3d.lane_3d method)": [[154, "verse.map.lane_3d.Lane_3d.__init__"]], "verse.map.lane_map": [[155, "module-verse.map.lane_map"]], "lanemap (class in verse.map.lane_map)": [[156, "verse.map.lane_map.LaneMap"]], "__init__() (verse.map.lane_map.lanemap method)": [[156, "verse.map.lane_map.LaneMap.__init__"]], "verse.map.lane_map_3d": [[157, "module-verse.map.lane_map_3d"]], "lanemap_3d (class in verse.map.lane_map_3d)": [[158, "verse.map.lane_map_3d.LaneMap_3d"]], "__init__() (verse.map.lane_map_3d.lanemap_3d method)": [[158, "verse.map.lane_map_3d.LaneMap_3d.__init__"]], "verse.map.lane_segment": [[159, "module-verse.map.lane_segment"]], "abstractlane (class in verse.map.lane_segment)": [[160, "verse.map.lane_segment.AbstractLane"]], "__init__() (verse.map.lane_segment.abstractlane method)": [[160, "verse.map.lane_segment.AbstractLane.__init__"]], "distance() (verse.map.lane_segment.abstractlane method)": [[160, "verse.map.lane_segment.AbstractLane.distance"]], "distance_with_heading() (verse.map.lane_segment.abstractlane method)": [[160, "verse.map.lane_segment.AbstractLane.distance_with_heading"]], "from_config() (verse.map.lane_segment.abstractlane class method)": [[160, "verse.map.lane_segment.AbstractLane.from_config"]], "heading_at() (verse.map.lane_segment.abstractlane method)": [[160, "verse.map.lane_segment.AbstractLane.heading_at"]], "is_reachable_from() (verse.map.lane_segment.abstractlane method)": [[160, "verse.map.lane_segment.AbstractLane.is_reachable_from"]], "local_coordinates() (verse.map.lane_segment.abstractlane method)": [[160, "verse.map.lane_segment.AbstractLane.local_coordinates"]], "metaclass__ (verse.map.lane_segment.abstractlane attribute)": [[160, "verse.map.lane_segment.AbstractLane.metaclass__"]], "on_lane() (verse.map.lane_segment.abstractlane method)": [[160, "verse.map.lane_segment.AbstractLane.on_lane"]], "position() (verse.map.lane_segment.abstractlane method)": [[160, "verse.map.lane_segment.AbstractLane.position"]], "to_config() (verse.map.lane_segment.abstractlane method)": [[160, "verse.map.lane_segment.AbstractLane.to_config"]], "width_at() (verse.map.lane_segment.abstractlane method)": [[160, "verse.map.lane_segment.AbstractLane.width_at"]], "circularlane (class in verse.map.lane_segment)": [[161, "verse.map.lane_segment.CircularLane"]], "__init__() (verse.map.lane_segment.circularlane method)": [[161, "verse.map.lane_segment.CircularLane.__init__"]], "distance() (verse.map.lane_segment.circularlane method)": [[161, "verse.map.lane_segment.CircularLane.distance"]], "distance_with_heading() (verse.map.lane_segment.circularlane method)": [[161, "verse.map.lane_segment.CircularLane.distance_with_heading"]], "from_config() (verse.map.lane_segment.circularlane class method)": [[161, "verse.map.lane_segment.CircularLane.from_config"]], "heading_at() (verse.map.lane_segment.circularlane method)": [[161, "verse.map.lane_segment.CircularLane.heading_at"]], "is_reachable_from() (verse.map.lane_segment.circularlane method)": [[161, "verse.map.lane_segment.CircularLane.is_reachable_from"]], "local_coordinates() (verse.map.lane_segment.circularlane method)": [[161, "verse.map.lane_segment.CircularLane.local_coordinates"]], "metaclass__ (verse.map.lane_segment.circularlane attribute)": [[161, "verse.map.lane_segment.CircularLane.metaclass__"]], "on_lane() (verse.map.lane_segment.circularlane method)": [[161, "verse.map.lane_segment.CircularLane.on_lane"]], "position() (verse.map.lane_segment.circularlane method)": [[161, "verse.map.lane_segment.CircularLane.position"]], "to_config() (verse.map.lane_segment.circularlane method)": [[161, "verse.map.lane_segment.CircularLane.to_config"]], "width_at() (verse.map.lane_segment.circularlane method)": [[161, "verse.map.lane_segment.CircularLane.width_at"]], "lanesegment (class in verse.map.lane_segment)": [[162, "verse.map.lane_segment.LaneSegment"]], "__init__() (verse.map.lane_segment.lanesegment method)": [[162, "verse.map.lane_segment.LaneSegment.__init__"]], "linetype (class in verse.map.lane_segment)": [[163, "verse.map.lane_segment.LineType"]], "__init__() (verse.map.lane_segment.linetype method)": [[163, "verse.map.lane_segment.LineType.__init__"]], "straightlane (class in verse.map.lane_segment)": [[164, "verse.map.lane_segment.StraightLane"]], "__init__() (verse.map.lane_segment.straightlane method)": [[164, "verse.map.lane_segment.StraightLane.__init__"]], "distance() (verse.map.lane_segment.straightlane method)": [[164, "verse.map.lane_segment.StraightLane.distance"]], "distance_with_heading() (verse.map.lane_segment.straightlane method)": [[164, "verse.map.lane_segment.StraightLane.distance_with_heading"]], "from_config() (verse.map.lane_segment.straightlane class method)": [[164, "verse.map.lane_segment.StraightLane.from_config"]], "heading_at() (verse.map.lane_segment.straightlane method)": [[164, "verse.map.lane_segment.StraightLane.heading_at"]], "is_reachable_from() (verse.map.lane_segment.straightlane method)": [[164, "verse.map.lane_segment.StraightLane.is_reachable_from"]], "local_coordinates() (verse.map.lane_segment.straightlane method)": [[164, "verse.map.lane_segment.StraightLane.local_coordinates"]], "metaclass__ (verse.map.lane_segment.straightlane attribute)": [[164, "verse.map.lane_segment.StraightLane.metaclass__"]], "on_lane() (verse.map.lane_segment.straightlane method)": [[164, "verse.map.lane_segment.StraightLane.on_lane"]], "position() (verse.map.lane_segment.straightlane method)": [[164, "verse.map.lane_segment.StraightLane.position"]], "to_config() (verse.map.lane_segment.straightlane method)": [[164, "verse.map.lane_segment.StraightLane.to_config"]], "width_at() (verse.map.lane_segment.straightlane method)": [[164, "verse.map.lane_segment.StraightLane.width_at"]], "verse.map.lane_segment_3d": [[165, "module-verse.map.lane_segment_3d"]], "abstractlane_3d (class in verse.map.lane_segment_3d)": [[166, "verse.map.lane_segment_3d.AbstractLane_3d"]], "__init__() (verse.map.lane_segment_3d.abstractlane_3d method)": [[166, "verse.map.lane_segment_3d.AbstractLane_3d.__init__"]], "altitude() (verse.map.lane_segment_3d.abstractlane_3d method)": [[166, "verse.map.lane_segment_3d.AbstractLane_3d.altitude"]], "distance() (verse.map.lane_segment_3d.abstractlane_3d method)": [[166, "verse.map.lane_segment_3d.AbstractLane_3d.distance"]], "distance_with_heading() (verse.map.lane_segment_3d.abstractlane_3d method)": [[166, "verse.map.lane_segment_3d.AbstractLane_3d.distance_with_heading"]], "from_config() (verse.map.lane_segment_3d.abstractlane_3d class method)": [[166, "verse.map.lane_segment_3d.AbstractLane_3d.from_config"]], "heading_at() (verse.map.lane_segment_3d.abstractlane_3d method)": [[166, "verse.map.lane_segment_3d.AbstractLane_3d.heading_at"]], "is_reachable_from() (verse.map.lane_segment_3d.abstractlane_3d method)": [[166, "verse.map.lane_segment_3d.AbstractLane_3d.is_reachable_from"]], "local_coordinates() (verse.map.lane_segment_3d.abstractlane_3d method)": [[166, "verse.map.lane_segment_3d.AbstractLane_3d.local_coordinates"]], "metaclass__ (verse.map.lane_segment_3d.abstractlane_3d attribute)": [[166, "verse.map.lane_segment_3d.AbstractLane_3d.metaclass__"]], "on_lane() (verse.map.lane_segment_3d.abstractlane_3d method)": [[166, "verse.map.lane_segment_3d.AbstractLane_3d.on_lane"]], "position() (verse.map.lane_segment_3d.abstractlane_3d method)": [[166, "verse.map.lane_segment_3d.AbstractLane_3d.position"]], "to_config() (verse.map.lane_segment_3d.abstractlane_3d method)": [[166, "verse.map.lane_segment_3d.AbstractLane_3d.to_config"]], "width_at() (verse.map.lane_segment_3d.abstractlane_3d method)": [[166, "verse.map.lane_segment_3d.AbstractLane_3d.width_at"]], "circularlane_3d_v1 (class in verse.map.lane_segment_3d)": [[167, "verse.map.lane_segment_3d.CircularLane_3d_v1"]], "__init__() (verse.map.lane_segment_3d.circularlane_3d_v1 method)": [[167, "verse.map.lane_segment_3d.CircularLane_3d_v1.__init__"]], "altitude() (verse.map.lane_segment_3d.circularlane_3d_v1 method)": [[167, "verse.map.lane_segment_3d.CircularLane_3d_v1.altitude"]], "distance() (verse.map.lane_segment_3d.circularlane_3d_v1 method)": [[167, "verse.map.lane_segment_3d.CircularLane_3d_v1.distance"]], "distance_with_heading() (verse.map.lane_segment_3d.circularlane_3d_v1 method)": [[167, "verse.map.lane_segment_3d.CircularLane_3d_v1.distance_with_heading"]], "from_config() (verse.map.lane_segment_3d.circularlane_3d_v1 class method)": [[167, "verse.map.lane_segment_3d.CircularLane_3d_v1.from_config"]], "heading_at() (verse.map.lane_segment_3d.circularlane_3d_v1 method)": [[167, "verse.map.lane_segment_3d.CircularLane_3d_v1.heading_at"]], "is_reachable_from() (verse.map.lane_segment_3d.circularlane_3d_v1 method)": [[167, "verse.map.lane_segment_3d.CircularLane_3d_v1.is_reachable_from"]], "local_coordinates() (verse.map.lane_segment_3d.circularlane_3d_v1 method)": [[167, "verse.map.lane_segment_3d.CircularLane_3d_v1.local_coordinates"]], "metaclass__ (verse.map.lane_segment_3d.circularlane_3d_v1 attribute)": [[167, "verse.map.lane_segment_3d.CircularLane_3d_v1.metaclass__"]], "on_lane() (verse.map.lane_segment_3d.circularlane_3d_v1 method)": [[167, "verse.map.lane_segment_3d.CircularLane_3d_v1.on_lane"]], "position() (verse.map.lane_segment_3d.circularlane_3d_v1 method)": [[167, "verse.map.lane_segment_3d.CircularLane_3d_v1.position"]], "to_config() (verse.map.lane_segment_3d.circularlane_3d_v1 method)": [[167, "verse.map.lane_segment_3d.CircularLane_3d_v1.to_config"]], "width_at() (verse.map.lane_segment_3d.circularlane_3d_v1 method)": [[167, "verse.map.lane_segment_3d.CircularLane_3d_v1.width_at"]], "circularlane_3d_v2 (class in verse.map.lane_segment_3d)": [[168, "verse.map.lane_segment_3d.CircularLane_3d_v2"]], "__init__() (verse.map.lane_segment_3d.circularlane_3d_v2 method)": [[168, "verse.map.lane_segment_3d.CircularLane_3d_v2.__init__"]], "altitude() (verse.map.lane_segment_3d.circularlane_3d_v2 method)": [[168, "verse.map.lane_segment_3d.CircularLane_3d_v2.altitude"]], "distance() (verse.map.lane_segment_3d.circularlane_3d_v2 method)": [[168, "verse.map.lane_segment_3d.CircularLane_3d_v2.distance"]], "distance_with_heading() (verse.map.lane_segment_3d.circularlane_3d_v2 method)": [[168, "verse.map.lane_segment_3d.CircularLane_3d_v2.distance_with_heading"]], "from_config() (verse.map.lane_segment_3d.circularlane_3d_v2 class method)": [[168, "verse.map.lane_segment_3d.CircularLane_3d_v2.from_config"]], "heading_at() (verse.map.lane_segment_3d.circularlane_3d_v2 method)": [[168, "verse.map.lane_segment_3d.CircularLane_3d_v2.heading_at"]], "is_reachable_from() (verse.map.lane_segment_3d.circularlane_3d_v2 method)": [[168, "verse.map.lane_segment_3d.CircularLane_3d_v2.is_reachable_from"]], "local_coordinates() (verse.map.lane_segment_3d.circularlane_3d_v2 method)": [[168, "verse.map.lane_segment_3d.CircularLane_3d_v2.local_coordinates"]], "metaclass__ (verse.map.lane_segment_3d.circularlane_3d_v2 attribute)": [[168, "verse.map.lane_segment_3d.CircularLane_3d_v2.metaclass__"]], "on_lane() (verse.map.lane_segment_3d.circularlane_3d_v2 method)": [[168, "verse.map.lane_segment_3d.CircularLane_3d_v2.on_lane"]], "position() (verse.map.lane_segment_3d.circularlane_3d_v2 method)": [[168, "verse.map.lane_segment_3d.CircularLane_3d_v2.position"]], "to_config() (verse.map.lane_segment_3d.circularlane_3d_v2 method)": [[168, "verse.map.lane_segment_3d.CircularLane_3d_v2.to_config"]], "width_at() (verse.map.lane_segment_3d.circularlane_3d_v2 method)": [[168, "verse.map.lane_segment_3d.CircularLane_3d_v2.width_at"]], "linetype_3d (class in verse.map.lane_segment_3d)": [[169, "verse.map.lane_segment_3d.LineType_3d"]], "__init__() (verse.map.lane_segment_3d.linetype_3d method)": [[169, "verse.map.lane_segment_3d.LineType_3d.__init__"]], "straightlane_3d (class in verse.map.lane_segment_3d)": [[170, "verse.map.lane_segment_3d.StraightLane_3d"]], "__init__() (verse.map.lane_segment_3d.straightlane_3d method)": [[170, "verse.map.lane_segment_3d.StraightLane_3d.__init__"]], "altitude() (verse.map.lane_segment_3d.straightlane_3d method)": [[170, "verse.map.lane_segment_3d.StraightLane_3d.altitude"]], "distance() (verse.map.lane_segment_3d.straightlane_3d method)": [[170, "verse.map.lane_segment_3d.StraightLane_3d.distance"]], "distance_with_heading() (verse.map.lane_segment_3d.straightlane_3d method)": [[170, "verse.map.lane_segment_3d.StraightLane_3d.distance_with_heading"]], "from_config() (verse.map.lane_segment_3d.straightlane_3d class method)": [[170, "verse.map.lane_segment_3d.StraightLane_3d.from_config"]], "heading_at() (verse.map.lane_segment_3d.straightlane_3d method)": [[170, "verse.map.lane_segment_3d.StraightLane_3d.heading_at"]], "is_reachable_from() (verse.map.lane_segment_3d.straightlane_3d method)": [[170, "verse.map.lane_segment_3d.StraightLane_3d.is_reachable_from"]], "local_coordinates() (verse.map.lane_segment_3d.straightlane_3d method)": [[170, "verse.map.lane_segment_3d.StraightLane_3d.local_coordinates"]], "metaclass__ (verse.map.lane_segment_3d.straightlane_3d attribute)": [[170, "verse.map.lane_segment_3d.StraightLane_3d.metaclass__"]], "on_lane() (verse.map.lane_segment_3d.straightlane_3d method)": [[170, "verse.map.lane_segment_3d.StraightLane_3d.on_lane"]], "position() (verse.map.lane_segment_3d.straightlane_3d method)": [[170, "verse.map.lane_segment_3d.StraightLane_3d.position"]], "to_config() (verse.map.lane_segment_3d.straightlane_3d method)": [[170, "verse.map.lane_segment_3d.StraightLane_3d.to_config"]], "width_at() (verse.map.lane_segment_3d.straightlane_3d method)": [[170, "verse.map.lane_segment_3d.StraightLane_3d.width_at"]], "func_a() (in module verse.map.lane_segment_3d)": [[171, "verse.map.lane_segment_3d.func_a"]], "func_b() (in module verse.map.lane_segment_3d)": [[172, "verse.map.lane_segment_3d.func_b"]], "get_center_radius() (in module verse.map.lane_segment_3d)": [[173, "verse.map.lane_segment_3d.get_center_radius"]], "get_coor_by_rt() (in module verse.map.lane_segment_3d)": [[174, "verse.map.lane_segment_3d.get_coor_by_rt"]], "get_rtp_by_coor() (in module verse.map.lane_segment_3d)": [[175, "verse.map.lane_segment_3d.get_rtp_by_coor"]], "get_theta_by_coor() (in module verse.map.lane_segment_3d)": [[176, "verse.map.lane_segment_3d.get_theta_by_coor"]], "verse.map.opendrive_parser": [[177, "module-verse.map.opendrive_parser"]], "check_valid_side() (in module verse.map.opendrive_parser)": [[178, "verse.map.opendrive_parser.check_valid_side"]], "condense_matrix() (in module verse.map.opendrive_parser)": [[179, "verse.map.opendrive_parser.condense_matrix"]], "file_parser() (in module verse.map.opendrive_parser)": [[180, "verse.map.opendrive_parser.file_parser"]], "opendrive_map() (in module verse.map.opendrive_parser)": [[181, "verse.map.opendrive_parser.opendrive_map"]], "road_traverser() (in module verse.map.opendrive_parser)": [[182, "verse.map.opendrive_parser.road_traverser"]], "verse.parser": [[183, "module-verse.parser"]], "verse.parser.astunparser": [[184, "module-verse.parser.astunparser"]], "unparser (class in verse.parser.astunparser)": [[185, "verse.parser.astunparser.Unparser"]], "__init__() (verse.parser.astunparser.unparser method)": [[185, "verse.parser.astunparser.Unparser.__init__"]], "dispatch() (verse.parser.astunparser.unparser method)": [[185, "verse.parser.astunparser.Unparser.dispatch"]], "enter() (verse.parser.astunparser.unparser method)": [[185, "verse.parser.astunparser.Unparser.enter"]], "fill() (verse.parser.astunparser.unparser method)": [[185, "verse.parser.astunparser.Unparser.fill"]], "leave() (verse.parser.astunparser.unparser method)": [[185, "verse.parser.astunparser.Unparser.leave"]], "write() (verse.parser.astunparser.unparser method)": [[185, "verse.parser.astunparser.Unparser.write"]], "interleave() (in module verse.parser.astunparser)": [[186, "verse.parser.astunparser.interleave"]], "main() (in module verse.parser.astunparser)": [[187, "verse.parser.astunparser.main"]], "roundtrip() (in module verse.parser.astunparser)": [[188, "verse.parser.astunparser.roundtrip"]], "testdir() (in module verse.parser.astunparser)": [[189, "verse.parser.astunparser.testdir"]], "unparse() (in module verse.parser.astunparser)": [[190, "verse.parser.astunparser.unparse"]], "verse.parser.parser": [[191, "module-verse.parser.parser"]], "argsubstituter (class in verse.parser.parser)": [[192, "verse.parser.parser.ArgSubstituter"]], "__init__() (verse.parser.parser.argsubstituter method)": [[192, "verse.parser.parser.ArgSubstituter.__init__"]], "generic_visit() (verse.parser.parser.argsubstituter method)": [[192, "verse.parser.parser.ArgSubstituter.generic_visit"]], "visit() (verse.parser.parser.argsubstituter method)": [[192, "verse.parser.parser.ArgSubstituter.visit"]], "assert (class in verse.parser.parser)": [[193, "verse.parser.parser.Assert"]], "__init__() (verse.parser.parser.assert method)": [[193, "verse.parser.parser.Assert.__init__"]], "compiledassert (class in verse.parser.parser)": [[194, "verse.parser.parser.CompiledAssert"]], "__init__() (verse.parser.parser.compiledassert method)": [[194, "verse.parser.parser.CompiledAssert.__init__"]], "condval (class in verse.parser.parser)": [[195, "verse.parser.parser.CondVal"]], "__init__() (verse.parser.parser.condval method)": [[195, "verse.parser.parser.CondVal.__init__"]], "condvalcase (class in verse.parser.parser)": [[196, "verse.parser.parser.CondValCase"]], "__init__() (verse.parser.parser.condvalcase method)": [[196, "verse.parser.parser.CondValCase.__init__"]], "controllerir (class in verse.parser.parser)": [[197, "verse.parser.parser.ControllerIR"]], "__init__() (verse.parser.parser.controllerir method)": [[197, "verse.parser.parser.ControllerIR.__init__"]], "ir_eq() (verse.parser.parser.controllerir static method)": [[197, "verse.parser.parser.ControllerIR.ir_eq"]], "customir (class in verse.parser.parser)": [[198, "verse.parser.parser.CustomIR"]], "__init__() (verse.parser.parser.customir method)": [[198, "verse.parser.parser.CustomIR.__init__"]], "env (class in verse.parser.parser)": [[199, "verse.parser.parser.Env"]], "__init__() (verse.parser.parser.env method)": [[199, "verse.parser.parser.Env.__init__"]], "lambda (class in verse.parser.parser)": [[200, "verse.parser.parser.Lambda"]], "__init__() (verse.parser.parser.lambda method)": [[200, "verse.parser.parser.Lambda.__init__"]], "lambdaarg (class in verse.parser.parser)": [[201, "verse.parser.parser.LambdaArg"]], "__init__() (verse.parser.parser.lambdaarg method)": [[201, "verse.parser.parser.LambdaArg.__init__"]], "modedef (class in verse.parser.parser)": [[202, "verse.parser.parser.ModeDef"]], "__init__() (verse.parser.parser.modedef method)": [[202, "verse.parser.parser.ModeDef.__init__"]], "modepath (class in verse.parser.parser)": [[203, "verse.parser.parser.ModePath"]], "__init__() (verse.parser.parser.modepath method)": [[203, "verse.parser.parser.ModePath.__init__"]], "reduction (class in verse.parser.parser)": [[204, "verse.parser.parser.Reduction"]], "__init__() (verse.parser.parser.reduction method)": [[204, "verse.parser.parser.Reduction.__init__"]], "reductiontype (class in verse.parser.parser)": [[205, "verse.parser.parser.ReductionType"]], "scopelevel (class in verse.parser.parser)": [[206, "verse.parser.parser.ScopeLevel"]], "__init__() (verse.parser.parser.scopelevel method)": [[206, "verse.parser.parser.ScopeLevel.__init__"]], "statedef (class in verse.parser.parser)": [[207, "verse.parser.parser.StateDef"]], "__init__() (verse.parser.parser.statedef method)": [[207, "verse.parser.parser.StateDef.__init__"]], "_assert (class in verse.parser.parser)": [[208, "verse.parser.parser._Assert"]], "__init__() (verse.parser.parser._assert method)": [[208, "verse.parser.parser._Assert.__init__"]], "ast_dump() (in module verse.parser.parser)": [[209, "verse.parser.parser.ast_dump"]], "compile_expr() (in module verse.parser.parser)": [[210, "verse.parser.parser.compile_expr"]], "find() (in module verse.parser.parser)": [[211, "verse.parser.parser.find"]], "fully_cond() (in module verse.parser.parser)": [[212, "verse.parser.parser.fully_cond"]], "is_main_check() (in module verse.parser.parser)": [[213, "verse.parser.parser.is_main_check"]], "merge_assert() (in module verse.parser.parser)": [[214, "verse.parser.parser.merge_assert"]], "merge_conds() (in module verse.parser.parser)": [[215, "verse.parser.parser.merge_conds"]], "merge_if() (in module verse.parser.parser)": [[216, "verse.parser.parser.merge_if"]], "merge_if_single() (in module verse.parser.parser)": [[217, "verse.parser.parser.merge_if_single"]], "merge_if_val() (in module verse.parser.parser)": [[218, "verse.parser.parser.merge_if_val"]], "not_ir_ast() (in module verse.parser.parser)": [[219, "verse.parser.parser.not_ir_ast"]], "proc() (in module verse.parser.parser)": [[220, "verse.parser.parser.proc"]], "proc_assign() (in module verse.parser.parser)": [[221, "verse.parser.parser.proc_assign"]], "unparse() (in module verse.parser.parser)": [[222, "verse.parser.parser.unparse"]], "verse.plotter": [[223, "module-verse.plotter"]], "verse.plotter.plotter2d": [[224, "module-verse.plotter.plotter2D"]], "check_dim() (in module verse.plotter.plotter2d)": [[225, "verse.plotter.plotter2D.check_dim"]], "create_anime_dict() (in module verse.plotter.plotter2d)": [[226, "verse.plotter.plotter2D.create_anime_dict"]], "draw_map() (in module verse.plotter.plotter2d)": [[227, "verse.plotter.plotter2D.draw_map"]], "duration (in module verse.plotter.plotter2d)": [[228, "verse.plotter.plotter2D.duration"]], "get_text_pos() (in module verse.plotter.plotter2d)": [[229, "verse.plotter.plotter2D.get_text_pos"]], "num_digits() (in module verse.plotter.plotter2d)": [[230, "verse.plotter.plotter2D.num_digits"]], "reachtube_anime() (in module verse.plotter.plotter2d)": [[231, "verse.plotter.plotter2D.reachtube_anime"]], "reachtube_tree() (in module verse.plotter.plotter2d)": [[232, "verse.plotter.plotter2D.reachtube_tree"]], "reachtube_tree_single() (in module verse.plotter.plotter2d)": [[233, "verse.plotter.plotter2D.reachtube_tree_single"]], "sample_trace() (in module verse.plotter.plotter2d)": [[234, "verse.plotter.plotter2D.sample_trace"]], "simulation_anime() (in module verse.plotter.plotter2d)": [[235, "verse.plotter.plotter2D.simulation_anime"]], "simulation_tree() (in module verse.plotter.plotter2d)": [[236, "verse.plotter.plotter2D.simulation_tree"]], "simulation_tree_single() (in module verse.plotter.plotter2d)": [[237, "verse.plotter.plotter2D.simulation_tree_single"]], "update_style() (in module verse.plotter.plotter2d)": [[238, "verse.plotter.plotter2D.update_style"]], "verse.plotter.plotter2d_old": [[239, "module-verse.plotter.plotter2D_old"]], "generate_simulation_anime() (in module verse.plotter.plotter2d_old)": [[240, "verse.plotter.plotter2D_old.generate_simulation_anime"]], "plot() (in module verse.plotter.plotter2d_old)": [[241, "verse.plotter.plotter2D_old.plot"]], "plot_map() (in module verse.plotter.plotter2d_old)": [[242, "verse.plotter.plotter2D_old.plot_map"]], "plot_reachtube_tree() (in module verse.plotter.plotter2d_old)": [[243, "verse.plotter.plotter2D_old.plot_reachtube_tree"]], "plot_simulation_tree() (in module verse.plotter.plotter2d_old)": [[244, "verse.plotter.plotter2D_old.plot_simulation_tree"]], "verse.plotter.plotter3d": [[245, "module-verse.plotter.plotter3D"]], "plot3dmap() (in module verse.plotter.plotter3d)": [[246, "verse.plotter.plotter3D.plot3dMap"]], "plot3dreachtube() (in module verse.plotter.plotter3d)": [[247, "verse.plotter.plotter3D.plot3dReachtube"]], "plot3dreachtubesingle() (in module verse.plotter.plotter3d)": [[248, "verse.plotter.plotter3D.plot3dReachtubeSingle"]], "plot_line_3d() (in module verse.plotter.plotter3d)": [[249, "verse.plotter.plotter3D.plot_line_3d"]], "plot_point_3d() (in module verse.plotter.plotter3d)": [[250, "verse.plotter.plotter3D.plot_point_3d"]], "plot_polytope_3d() (in module verse.plotter.plotter3d)": [[251, "verse.plotter.plotter3D.plot_polytope_3d"]], "verse.plotter.plotter3d_new": [[252, "module-verse.plotter.plotter3D_new"]], "check_dim() (in module verse.plotter.plotter3d_new)": [[253, "verse.plotter.plotter3D_new.check_dim"]], "draw_map_3d() (in module verse.plotter.plotter3d_new)": [[254, "verse.plotter.plotter3D_new.draw_map_3d"]], "reachtube_tree_3d() (in module verse.plotter.plotter3d_new)": [[255, "verse.plotter.plotter3D_new.reachtube_tree_3d"]], "reachtube_tree_single_3d() (in module verse.plotter.plotter3d_new)": [[256, "verse.plotter.plotter3D_new.reachtube_tree_single_3d"]], "sample_trace() (in module verse.plotter.plotter3d_new)": [[257, "verse.plotter.plotter3D_new.sample_trace"]], "simulation_tree_3d() (in module verse.plotter.plotter3d_new)": [[258, "verse.plotter.plotter3D_new.simulation_tree_3d"]], "verse.scenario": [[261, "module-verse.scenario"]], "verse.scenario.scenario": [[262, "module-verse.scenario.scenario"]], "benchmark (class in verse.scenario.scenario)": [[263, "verse.scenario.scenario.Benchmark"]], "__init__() (verse.scenario.scenario.benchmark method)": [[263, "verse.scenario.scenario.Benchmark.__init__"]], "exprconfig (class in verse.scenario.scenario)": [[264, "verse.scenario.scenario.ExprConfig"]], "__init__() (verse.scenario.scenario.exprconfig method)": [[264, "verse.scenario.scenario.ExprConfig.__init__"]], "scenario (class in verse.scenario.scenario)": [[265, "verse.scenario.scenario.Scenario"]], "__init__() (verse.scenario.scenario.scenario method)": [[265, "verse.scenario.scenario.Scenario.__init__"]], "scenarioconfig (class in verse.scenario.scenario)": [[266, "verse.scenario.scenario.ScenarioConfig"]], "__init__() (verse.scenario.scenario.scenarioconfig method)": [[266, "verse.scenario.scenario.ScenarioConfig.__init__"]], "check_ray_init() (in module verse.scenario.scenario)": [[267, "verse.scenario.scenario.check_ray_init"]], "red() (in module verse.scenario.scenario)": [[268, "verse.scenario.scenario.red"]], "verse.sensor": [[269, "module-verse.sensor"]], "verse.sensor.base_sensor": [[270, "module-verse.sensor.base_sensor"]], "basesensor (class in verse.sensor.base_sensor)": [[271, "verse.sensor.base_sensor.BaseSensor"]], "__init__() (verse.sensor.base_sensor.basesensor method)": [[271, "verse.sensor.base_sensor.BaseSensor.__init__"]], "add_states_2d() (in module verse.sensor.base_sensor)": [[272, "verse.sensor.base_sensor.add_states_2d"]], "add_states_3d() (in module verse.sensor.base_sensor)": [[273, "verse.sensor.base_sensor.add_states_3d"]], "adds() (in module verse.sensor.base_sensor)": [[274, "verse.sensor.base_sensor.adds"]], "set_states_2d() (in module verse.sensor.base_sensor)": [[275, "verse.sensor.base_sensor.set_states_2d"]], "set_states_3d() (in module verse.sensor.base_sensor)": [[276, "verse.sensor.base_sensor.set_states_3d"]], "sets() (in module verse.sensor.base_sensor)": [[277, "verse.sensor.base_sensor.sets"]], "verse.sensor.example_sensor": [[278, "module-verse.sensor.example_sensor"]], "verse.sensor.example_sensor.craft_sensor": [[279, "module-verse.sensor.example_sensor.craft_sensor"]], "craftsensor (class in verse.sensor.example_sensor.craft_sensor)": [[280, "verse.sensor.example_sensor.craft_sensor.CraftSensor"]], "__init__() (verse.sensor.example_sensor.craft_sensor.craftsensor method)": [[280, "verse.sensor.example_sensor.craft_sensor.CraftSensor.__init__"]], "add_states_2d_ball() (in module verse.sensor.example_sensor.craft_sensor)": [[281, "verse.sensor.example_sensor.craft_sensor.add_states_2d_ball"]], "add_states_3d_ball() (in module verse.sensor.example_sensor.craft_sensor)": [[282, "verse.sensor.example_sensor.craft_sensor.add_states_3d_ball"]], "adds() (in module verse.sensor.example_sensor.craft_sensor)": [[283, "verse.sensor.example_sensor.craft_sensor.adds"]], "set_states_2d_ball() (in module verse.sensor.example_sensor.craft_sensor)": [[284, "verse.sensor.example_sensor.craft_sensor.set_states_2d_ball"]], "set_states_3d_ball() (in module verse.sensor.example_sensor.craft_sensor)": [[285, "verse.sensor.example_sensor.craft_sensor.set_states_3d_ball"]], "sets() (in module verse.sensor.example_sensor.craft_sensor)": [[286, "verse.sensor.example_sensor.craft_sensor.sets"]], "verse.sensor.example_sensor.quadrotor_sensor": [[287, "module-verse.sensor.example_sensor.quadrotor_sensor"]], "quadrotorsensor (class in verse.sensor.example_sensor.quadrotor_sensor)": [[288, "verse.sensor.example_sensor.quadrotor_sensor.QuadrotorSensor"]], "__init__() (verse.sensor.example_sensor.quadrotor_sensor.quadrotorsensor method)": [[288, "verse.sensor.example_sensor.quadrotor_sensor.QuadrotorSensor.__init__"]], "add_states_2d_ball() (in module verse.sensor.example_sensor.quadrotor_sensor)": [[289, "verse.sensor.example_sensor.quadrotor_sensor.add_states_2d_ball"]], "add_states_3d_ball() (in module verse.sensor.example_sensor.quadrotor_sensor)": [[290, "verse.sensor.example_sensor.quadrotor_sensor.add_states_3d_ball"]], "adds() (in module verse.sensor.example_sensor.quadrotor_sensor)": [[291, "verse.sensor.example_sensor.quadrotor_sensor.adds"]], "set_states_2d_ball() (in module verse.sensor.example_sensor.quadrotor_sensor)": [[292, "verse.sensor.example_sensor.quadrotor_sensor.set_states_2d_ball"]], "set_states_3d_ball() (in module verse.sensor.example_sensor.quadrotor_sensor)": [[293, "verse.sensor.example_sensor.quadrotor_sensor.set_states_3d_ball"]], "sets() (in module verse.sensor.example_sensor.quadrotor_sensor)": [[294, "verse.sensor.example_sensor.quadrotor_sensor.sets"]], "verse.sensor.example_sensor.single_sensor": [[295, "module-verse.sensor.example_sensor.single_sensor"]], "fakesensor3 (class in verse.sensor.example_sensor.single_sensor)": [[296, "verse.sensor.example_sensor.single_sensor.FakeSensor3"]], "__init__() (verse.sensor.example_sensor.single_sensor.fakesensor3 method)": [[296, "verse.sensor.example_sensor.single_sensor.FakeSensor3.__init__"]], "fakesensor4 (class in verse.sensor.example_sensor.single_sensor)": [[297, "verse.sensor.example_sensor.single_sensor.FakeSensor4"]], "__init__() (verse.sensor.example_sensor.single_sensor.fakesensor4 method)": [[297, "verse.sensor.example_sensor.single_sensor.FakeSensor4.__init__"]], "singlesensor (class in verse.sensor.example_sensor.single_sensor)": [[298, "verse.sensor.example_sensor.single_sensor.SingleSensor"]], "__init__() (verse.sensor.example_sensor.single_sensor.singlesensor method)": [[298, "verse.sensor.example_sensor.single_sensor.SingleSensor.__init__"]], "add_states_2d() (in module verse.sensor.example_sensor.single_sensor)": [[299, "verse.sensor.example_sensor.single_sensor.add_states_2d"]], "add_states_2d_ball() (in module verse.sensor.example_sensor.single_sensor)": [[300, "verse.sensor.example_sensor.single_sensor.add_states_2d_ball"]], "add_states_3d() (in module verse.sensor.example_sensor.single_sensor)": [[301, "verse.sensor.example_sensor.single_sensor.add_states_3d"]], "add_states_3d_ball() (in module verse.sensor.example_sensor.single_sensor)": [[302, "verse.sensor.example_sensor.single_sensor.add_states_3d_ball"]], "adds() (in module verse.sensor.example_sensor.single_sensor)": [[303, "verse.sensor.example_sensor.single_sensor.adds"]], "set_states_2d() (in module verse.sensor.example_sensor.single_sensor)": [[304, "verse.sensor.example_sensor.single_sensor.set_states_2d"]], "set_states_2d_ball() (in module verse.sensor.example_sensor.single_sensor)": [[305, "verse.sensor.example_sensor.single_sensor.set_states_2d_ball"]], "set_states_3d() (in module verse.sensor.example_sensor.single_sensor)": [[306, "verse.sensor.example_sensor.single_sensor.set_states_3d"]], "set_states_3d_ball() (in module verse.sensor.example_sensor.single_sensor)": [[307, "verse.sensor.example_sensor.single_sensor.set_states_3d_ball"]], "sets() (in module verse.sensor.example_sensor.single_sensor)": [[308, "verse.sensor.example_sensor.single_sensor.sets"]], "verse.sensor.example_sensor.thermo_sensor": [[309, "module-verse.sensor.example_sensor.thermo_sensor"]], "thermosensor (class in verse.sensor.example_sensor.thermo_sensor)": [[310, "verse.sensor.example_sensor.thermo_sensor.ThermoSensor"]], "__init__() (verse.sensor.example_sensor.thermo_sensor.thermosensor method)": [[310, "verse.sensor.example_sensor.thermo_sensor.ThermoSensor.__init__"]], "add_states_2d_ball() (in module verse.sensor.example_sensor.thermo_sensor)": [[311, "verse.sensor.example_sensor.thermo_sensor.add_states_2d_ball"]], "add_states_3d_ball() (in module verse.sensor.example_sensor.thermo_sensor)": [[312, "verse.sensor.example_sensor.thermo_sensor.add_states_3d_ball"]], "adds() (in module verse.sensor.example_sensor.thermo_sensor)": [[313, "verse.sensor.example_sensor.thermo_sensor.adds"]], "set_states_2d_ball() (in module verse.sensor.example_sensor.thermo_sensor)": [[314, "verse.sensor.example_sensor.thermo_sensor.set_states_2d_ball"]], "set_states_3d_ball() (in module verse.sensor.example_sensor.thermo_sensor)": [[315, "verse.sensor.example_sensor.thermo_sensor.set_states_3d_ball"]], "sets() (in module verse.sensor.example_sensor.thermo_sensor)": [[316, "verse.sensor.example_sensor.thermo_sensor.sets"]]}})