Search.setIndex({"docnames": ["_autosummary/verse", "_autosummary/verse.agents", "_autosummary/verse.agents.base_agent", "_autosummary/verse.agents.base_agent.BaseAgent", "_autosummary/verse.agents.example_agent", "_autosummary/verse.agents.example_agent.ball_agent", "_autosummary/verse.agents.example_agent.ball_agent.BallAgent", "_autosummary/verse.agents.example_agent.car_agent", "_autosummary/verse.agents.example_agent.car_agent.CarAgent", "_autosummary/verse.agents.example_agent.car_agent.CarAgentDebounced", "_autosummary/verse.agents.example_agent.car_agent.CarAgentSwitch2", "_autosummary/verse.agents.example_agent.car_agent.NPCAgent", "_autosummary/verse.agents.example_agent.car_agent.WeirdCarAgent", "_autosummary/verse.agents.example_agent.origin_agent", "_autosummary/verse.agents.example_agent.origin_agent.craft_agent", "_autosummary/verse.agents.example_agent.origin_agent.thermo_agent", "_autosummary/verse.agents.example_agent.origin_agent.vanderpol_agent", "_autosummary/verse.agents.example_agent.quadrotor_agent", "_autosummary/verse.agents.example_agent.quadrotor_agent.FFNNC", "_autosummary/verse.agents.example_agent.quadrotor_agent.QuadrotorAgent", "_autosummary/verse.agents.example_agent.robot_agent", "_autosummary/verse.agents.example_agent.robot_agent.RobotAgent", "_autosummary/verse.agents.example_agent.sign_agent", "_autosummary/verse.agents.example_agent.sign_agent.SignAgent", "_autosummary/verse.analysis", "_autosummary/verse.analysis.analysis_tree", "_autosummary/verse.analysis.analysis_tree.AnalysisTree", "_autosummary/verse.analysis.analysis_tree.AnalysisTreeNode", "_autosummary/verse.analysis.analysis_tree.color_interp", "_autosummary/verse.analysis.analysis_tree.first_transitions", "_autosummary/verse.analysis.analysis_tree.index_of", "_autosummary/verse.analysis.dryvr", "_autosummary/verse.analysis.dryvr.all_sensitivities_calc", "_autosummary/verse.analysis.dryvr.calcCenterPoint", "_autosummary/verse.analysis.dryvr.calcDelta", "_autosummary/verse.analysis.dryvr.calc_bloated_tube", "_autosummary/verse.analysis.dryvr.get_reachtube_segment", "_autosummary/verse.analysis.dryvr.randomPoint", "_autosummary/verse.analysis.dryvr.trimTraces", "_autosummary/verse.analysis.incremental", "_autosummary/verse.analysis.incremental.CachedRTTrans", "_autosummary/verse.analysis.incremental.CachedReachTrans", "_autosummary/verse.analysis.incremental.CachedSegment", "_autosummary/verse.analysis.incremental.CachedTransition", "_autosummary/verse.analysis.incremental.CachedTube", "_autosummary/verse.analysis.incremental.ReachTubeCache", "_autosummary/verse.analysis.incremental.SimTraceCache", "_autosummary/verse.analysis.incremental.TubeCache", "_autosummary/verse.analysis.incremental.combine_all", "_autosummary/verse.analysis.incremental.convert_reach_trans", "_autosummary/verse.analysis.incremental.convert_sim_trans", "_autosummary/verse.analysis.incremental.reach_trans_suit", "_autosummary/verse.analysis.incremental.sim_trans_suit", "_autosummary/verse.analysis.incremental.to_simulate", "_autosummary/verse.analysis.mixmonotone", "_autosummary/verse.analysis.mixmonotone.calculate_bloated_tube_mixmono_cont", "_autosummary/verse.analysis.mixmonotone.calculate_bloated_tube_mixmono_disc", "_autosummary/verse.analysis.mixmonotone.compute_reachtube_mixmono_cont", "_autosummary/verse.analysis.mixmonotone.compute_reachtube_mixmono_disc", "_autosummary/verse.analysis.mixmonotone.find_max", "_autosummary/verse.analysis.mixmonotone.find_max_symbolic", "_autosummary/verse.analysis.mixmonotone.find_min", "_autosummary/verse.analysis.mixmonotone.find_min_symbolic", "_autosummary/verse.analysis.simulator", "_autosummary/verse.analysis.simulator.SimConsts", "_autosummary/verse.analysis.simulator.Simulator", "_autosummary/verse.analysis.simulator.checkHeight", "_autosummary/verse.analysis.simulator.check_sim_transitions", "_autosummary/verse.analysis.simulator.convertEnumToStr", "_autosummary/verse.analysis.simulator.convertStrToEnum", "_autosummary/verse.analysis.simulator.disc_field", "_autosummary/verse.analysis.simulator.pack_env", "_autosummary/verse.analysis.simulator.red", "_autosummary/verse.analysis.utils", "_autosummary/verse.analysis.utils.are_polygons_intersecting", "_autosummary/verse.analysis.utils.class_from_path", "_autosummary/verse.analysis.utils.confidence_ellipsoid", "_autosummary/verse.analysis.utils.confidence_polytope", "_autosummary/verse.analysis.utils.constrain", "_autosummary/verse.analysis.utils.dedup", "_autosummary/verse.analysis.utils.distance_to_circle", "_autosummary/verse.analysis.utils.distance_to_rect", "_autosummary/verse.analysis.utils.do_every", "_autosummary/verse.analysis.utils.get_class_path", "_autosummary/verse.analysis.utils.has_corner_inside", "_autosummary/verse.analysis.utils.interval_distance", "_autosummary/verse.analysis.utils.is_consistent_dataset", "_autosummary/verse.analysis.utils.is_valid_observation", "_autosummary/verse.analysis.utils.lmap", "_autosummary/verse.analysis.utils.near_split", "_autosummary/verse.analysis.utils.not_zero", "_autosummary/verse.analysis.utils.point_in_ellipse", "_autosummary/verse.analysis.utils.point_in_rectangle", "_autosummary/verse.analysis.utils.point_in_rotated_rectangle", "_autosummary/verse.analysis.utils.project_polygon", "_autosummary/verse.analysis.utils.rect_corners", "_autosummary/verse.analysis.utils.rotated_rectangles_intersect", "_autosummary/verse.analysis.utils.sample_rect", "_autosummary/verse.analysis.utils.solve_trinom", "_autosummary/verse.analysis.utils.to_serializable", "_autosummary/verse.analysis.utils.wrap_to_pi", "_autosummary/verse.analysis.verifier", "_autosummary/verse.analysis.verifier.ReachConsts", "_autosummary/verse.analysis.verifier.Verifier", "_autosummary/verse.analysis.verifier.checkHeight", "_autosummary/verse.analysis.verifier.combine_rect", "_autosummary/verse.automaton", "_autosummary/verse.automaton.guard", "_autosummary/verse.automaton.guard.GuardExpressionAst", "_autosummary/verse.automaton.guard.LogicTreeNode", "_autosummary/verse.automaton.guard.NodeSubstituter", "_autosummary/verse.automaton.guard.ValueSubstituter", "_autosummary/verse.automaton.hybrid_automaton", "_autosummary/verse.automaton.hybrid_automaton.HybridAutomaton", "_autosummary/verse.automaton.hybrid_io_automaton", "_autosummary/verse.automaton.hybrid_io_automaton.HybridIoAutomaton", "_autosummary/verse.automaton.reset", "_autosummary/verse.automaton.reset.ResetExpression", "_autosummary/verse.map", "_autosummary/verse.map.example_map", "_autosummary/verse.map.example_map.intersection", "_autosummary/verse.map.example_map.intersection.Intersection", "_autosummary/verse.map.example_map.map_tacas", "_autosummary/verse.map.example_map.map_tacas.M1", "_autosummary/verse.map.example_map.map_tacas.M2", "_autosummary/verse.map.example_map.map_tacas.M3", "_autosummary/verse.map.example_map.map_tacas.M5", "_autosummary/verse.map.example_map.map_tacas.M6", "_autosummary/verse.map.example_map.map_tacas.get_end", "_autosummary/verse.map.example_map.simple_map", "_autosummary/verse.map.example_map.simple_map.SimpleMap", "_autosummary/verse.map.example_map.simple_map.SimpleMap2", "_autosummary/verse.map.example_map.simple_map2", "_autosummary/verse.map.example_map.simple_map2.SimpleMap2", "_autosummary/verse.map.example_map.simple_map2.SimpleMap3", "_autosummary/verse.map.example_map.simple_map2.SimpleMap4", "_autosummary/verse.map.example_map.simple_map2.SimpleMap4Switch2", "_autosummary/verse.map.example_map.simple_map2.SimpleMap5", "_autosummary/verse.map.example_map.simple_map2.SimpleMap6", "_autosummary/verse.map.example_map.simple_map_3d", "_autosummary/verse.map.example_map.simple_map_3d.SimpleMap1", "_autosummary/verse.map.example_map.simple_map_3d.SimpleMap2", "_autosummary/verse.map.example_map.simple_map_3d.SimpleMap3", "_autosummary/verse.map.example_map.simple_map_3d.SimpleMap4", "_autosummary/verse.map.example_map.simple_map_3d.SimpleMap5", "_autosummary/verse.map.example_map.simple_map_3d.SimpleMap6", "_autosummary/verse.map.example_map.simple_map_3d.SimpleMap7", "_autosummary/verse.map.example_map.simple_map_3d.get_center_radius", "_autosummary/verse.map.example_map.simple_map_3d.get_end", "_autosummary/verse.map.lane", "_autosummary/verse.map.lane.Lane", "_autosummary/verse.map.lane_3d", "_autosummary/verse.map.lane_3d.Lane_3d", "_autosummary/verse.map.lane_map", "_autosummary/verse.map.lane_map.LaneMap", "_autosummary/verse.map.lane_map_3d", "_autosummary/verse.map.lane_map_3d.LaneMap_3d", "_autosummary/verse.map.lane_segment", "_autosummary/verse.map.lane_segment.AbstractLane", "_autosummary/verse.map.lane_segment.CircularLane", "_autosummary/verse.map.lane_segment.LaneSegment", "_autosummary/verse.map.lane_segment.LineType", "_autosummary/verse.map.lane_segment.StraightLane", "_autosummary/verse.map.lane_segment_3d", "_autosummary/verse.map.lane_segment_3d.AbstractLane_3d", "_autosummary/verse.map.lane_segment_3d.CircularLane_3d_v1", "_autosummary/verse.map.lane_segment_3d.CircularLane_3d_v2", "_autosummary/verse.map.lane_segment_3d.LineType_3d", "_autosummary/verse.map.lane_segment_3d.StraightLane_3d", "_autosummary/verse.map.lane_segment_3d.func_a", "_autosummary/verse.map.lane_segment_3d.func_b", "_autosummary/verse.map.lane_segment_3d.get_center_radius", "_autosummary/verse.map.lane_segment_3d.get_coor_by_rt", "_autosummary/verse.map.lane_segment_3d.get_rtp_by_coor", "_autosummary/verse.map.lane_segment_3d.get_theta_by_coor", "_autosummary/verse.map.opendrive_parser", "_autosummary/verse.map.opendrive_parser.check_valid_side", "_autosummary/verse.map.opendrive_parser.condense_matrix", "_autosummary/verse.map.opendrive_parser.file_parser", "_autosummary/verse.map.opendrive_parser.opendrive_map", "_autosummary/verse.map.opendrive_parser.road_traverser", "_autosummary/verse.parser", "_autosummary/verse.parser.astunparser", "_autosummary/verse.parser.astunparser.Unparser", "_autosummary/verse.parser.astunparser.interleave", "_autosummary/verse.parser.astunparser.main", "_autosummary/verse.parser.astunparser.roundtrip", "_autosummary/verse.parser.astunparser.testdir", "_autosummary/verse.parser.astunparser.unparse", "_autosummary/verse.parser.parser", "_autosummary/verse.parser.parser.ArgSubstituter", "_autosummary/verse.parser.parser.Assert", "_autosummary/verse.parser.parser.CompiledAssert", "_autosummary/verse.parser.parser.CondVal", "_autosummary/verse.parser.parser.CondValCase", "_autosummary/verse.parser.parser.ControllerIR", "_autosummary/verse.parser.parser.CustomIR", "_autosummary/verse.parser.parser.Env", "_autosummary/verse.parser.parser.Lambda", "_autosummary/verse.parser.parser.LambdaArg", "_autosummary/verse.parser.parser.ModeDef", "_autosummary/verse.parser.parser.ModePath", "_autosummary/verse.parser.parser.Reduction", "_autosummary/verse.parser.parser.ReductionType", "_autosummary/verse.parser.parser.ScopeLevel", "_autosummary/verse.parser.parser.StateDef", "_autosummary/verse.parser.parser._Assert", "_autosummary/verse.parser.parser.ast_dump", "_autosummary/verse.parser.parser.compile_expr", "_autosummary/verse.parser.parser.find", "_autosummary/verse.parser.parser.fully_cond", "_autosummary/verse.parser.parser.is_main_check", "_autosummary/verse.parser.parser.merge_assert", "_autosummary/verse.parser.parser.merge_conds", "_autosummary/verse.parser.parser.merge_if", "_autosummary/verse.parser.parser.merge_if_single", "_autosummary/verse.parser.parser.merge_if_val", "_autosummary/verse.parser.parser.not_ir_ast", "_autosummary/verse.parser.parser.proc", "_autosummary/verse.parser.parser.proc_assign", "_autosummary/verse.parser.parser.unparse", "_autosummary/verse.plotter", "_autosummary/verse.plotter.plotter2D", "_autosummary/verse.plotter.plotter2D.check_dim", "_autosummary/verse.plotter.plotter2D.create_anime_dict", "_autosummary/verse.plotter.plotter2D.draw_map", "_autosummary/verse.plotter.plotter2D.duration", "_autosummary/verse.plotter.plotter2D.get_text_pos", "_autosummary/verse.plotter.plotter2D.num_digits", "_autosummary/verse.plotter.plotter2D.reachtube_anime", "_autosummary/verse.plotter.plotter2D.reachtube_tree", "_autosummary/verse.plotter.plotter2D.reachtube_tree_single", "_autosummary/verse.plotter.plotter2D.sample_trace", "_autosummary/verse.plotter.plotter2D.simulation_anime", "_autosummary/verse.plotter.plotter2D.simulation_tree", "_autosummary/verse.plotter.plotter2D.simulation_tree_single", "_autosummary/verse.plotter.plotter2D.update_style", "_autosummary/verse.plotter.plotter2D_old", "_autosummary/verse.plotter.plotter2D_old.generate_simulation_anime", "_autosummary/verse.plotter.plotter2D_old.plot", "_autosummary/verse.plotter.plotter2D_old.plot_map", "_autosummary/verse.plotter.plotter2D_old.plot_reachtube_tree", "_autosummary/verse.plotter.plotter2D_old.plot_simulation_tree", "_autosummary/verse.plotter.plotter3D", "_autosummary/verse.plotter.plotter3D.plot3dMap", "_autosummary/verse.plotter.plotter3D.plot3dReachtube", "_autosummary/verse.plotter.plotter3D.plot3dReachtubeSingle", "_autosummary/verse.plotter.plotter3D.plot_line_3d", "_autosummary/verse.plotter.plotter3D.plot_point_3d", "_autosummary/verse.plotter.plotter3D.plot_polytope_3d", "_autosummary/verse.plotter.plotter3D_new", "_autosummary/verse.plotter.plotter3D_new.check_dim", "_autosummary/verse.plotter.plotter3D_new.draw_map_3d", "_autosummary/verse.plotter.plotter3D_new.reachtube_tree_3d", "_autosummary/verse.plotter.plotter3D_new.reachtube_tree_single_3d", "_autosummary/verse.plotter.plotter3D_new.sample_trace", "_autosummary/verse.plotter.plotter3D_new.simulation_tree_3d", "_autosummary/verse.plotter.plotter3D_new.simulation_tree_single_3d", "_autosummary/verse.plotter.plotter3D_new.update_style", "_autosummary/verse.scenario", "_autosummary/verse.scenario.scenario", "_autosummary/verse.scenario.scenario.Benchmark", "_autosummary/verse.scenario.scenario.ExprConfig", "_autosummary/verse.scenario.scenario.Scenario", "_autosummary/verse.scenario.scenario.ScenarioConfig", "_autosummary/verse.scenario.scenario.check_ray_init", "_autosummary/verse.scenario.scenario.red", "_autosummary/verse.sensor", "_autosummary/verse.sensor.base_sensor", "_autosummary/verse.sensor.base_sensor.BaseSensor", "_autosummary/verse.sensor.base_sensor.add_states_2d", "_autosummary/verse.sensor.base_sensor.add_states_3d", "_autosummary/verse.sensor.base_sensor.adds", "_autosummary/verse.sensor.base_sensor.set_states_2d", "_autosummary/verse.sensor.base_sensor.set_states_3d", "_autosummary/verse.sensor.base_sensor.sets", "_autosummary/verse.sensor.example_sensor", "_autosummary/verse.sensor.example_sensor.craft_sensor", "_autosummary/verse.sensor.example_sensor.craft_sensor.CraftSensor", "_autosummary/verse.sensor.example_sensor.craft_sensor.add_states_2d_ball", "_autosummary/verse.sensor.example_sensor.craft_sensor.add_states_3d_ball", "_autosummary/verse.sensor.example_sensor.craft_sensor.adds", "_autosummary/verse.sensor.example_sensor.craft_sensor.set_states_2d_ball", "_autosummary/verse.sensor.example_sensor.craft_sensor.set_states_3d_ball", "_autosummary/verse.sensor.example_sensor.craft_sensor.sets", "_autosummary/verse.sensor.example_sensor.quadrotor_sensor", "_autosummary/verse.sensor.example_sensor.quadrotor_sensor.QuadrotorSensor", "_autosummary/verse.sensor.example_sensor.quadrotor_sensor.add_states_2d_ball", "_autosummary/verse.sensor.example_sensor.quadrotor_sensor.add_states_3d_ball", "_autosummary/verse.sensor.example_sensor.quadrotor_sensor.adds", "_autosummary/verse.sensor.example_sensor.quadrotor_sensor.set_states_2d_ball", "_autosummary/verse.sensor.example_sensor.quadrotor_sensor.set_states_3d_ball", "_autosummary/verse.sensor.example_sensor.quadrotor_sensor.sets", "_autosummary/verse.sensor.example_sensor.single_sensor", "_autosummary/verse.sensor.example_sensor.single_sensor.FakeSensor3", "_autosummary/verse.sensor.example_sensor.single_sensor.FakeSensor4", "_autosummary/verse.sensor.example_sensor.single_sensor.SingleSensor", "_autosummary/verse.sensor.example_sensor.single_sensor.add_states_2d", "_autosummary/verse.sensor.example_sensor.single_sensor.add_states_2d_ball", "_autosummary/verse.sensor.example_sensor.single_sensor.add_states_3d", "_autosummary/verse.sensor.example_sensor.single_sensor.add_states_3d_ball", "_autosummary/verse.sensor.example_sensor.single_sensor.adds", "_autosummary/verse.sensor.example_sensor.single_sensor.set_states_2d", "_autosummary/verse.sensor.example_sensor.single_sensor.set_states_2d_ball", "_autosummary/verse.sensor.example_sensor.single_sensor.set_states_3d", "_autosummary/verse.sensor.example_sensor.single_sensor.set_states_3d_ball", "_autosummary/verse.sensor.example_sensor.single_sensor.sets", "_autosummary/verse.sensor.example_sensor.thermo_sensor", "_autosummary/verse.sensor.example_sensor.thermo_sensor.ThermoSensor", "_autosummary/verse.sensor.example_sensor.thermo_sensor.add_states_2d_ball", "_autosummary/verse.sensor.example_sensor.thermo_sensor.add_states_3d_ball", "_autosummary/verse.sensor.example_sensor.thermo_sensor.adds", "_autosummary/verse.sensor.example_sensor.thermo_sensor.set_states_2d_ball", "_autosummary/verse.sensor.example_sensor.thermo_sensor.set_states_3d_ball", "_autosummary/verse.sensor.example_sensor.thermo_sensor.sets", "agent", "contributors", "getting_started", "index", "map", "outputs", "parser", "plotting", "scenario", "sensor"], "filenames": ["_autosummary\\verse.rst", "_autosummary\\verse.agents.rst", "_autosummary\\verse.agents.base_agent.rst", "_autosummary\\verse.agents.base_agent.BaseAgent.rst", "_autosummary\\verse.agents.example_agent.rst", "_autosummary\\verse.agents.example_agent.ball_agent.rst", "_autosummary\\verse.agents.example_agent.ball_agent.BallAgent.rst", "_autosummary\\verse.agents.example_agent.car_agent.rst", "_autosummary\\verse.agents.example_agent.car_agent.CarAgent.rst", "_autosummary\\verse.agents.example_agent.car_agent.CarAgentDebounced.rst", "_autosummary\\verse.agents.example_agent.car_agent.CarAgentSwitch2.rst", "_autosummary\\verse.agents.example_agent.car_agent.NPCAgent.rst", "_autosummary\\verse.agents.example_agent.car_agent.WeirdCarAgent.rst", "_autosummary\\verse.agents.example_agent.origin_agent.rst", "_autosummary\\verse.agents.example_agent.origin_agent.craft_agent.rst", "_autosummary\\verse.agents.example_agent.origin_agent.thermo_agent.rst", "_autosummary\\verse.agents.example_agent.origin_agent.vanderpol_agent.rst", "_autosummary\\verse.agents.example_agent.quadrotor_agent.rst", "_autosummary\\verse.agents.example_agent.quadrotor_agent.FFNNC.rst", "_autosummary\\verse.agents.example_agent.quadrotor_agent.QuadrotorAgent.rst", "_autosummary\\verse.agents.example_agent.robot_agent.rst", "_autosummary\\verse.agents.example_agent.robot_agent.RobotAgent.rst", "_autosummary\\verse.agents.example_agent.sign_agent.rst", "_autosummary\\verse.agents.example_agent.sign_agent.SignAgent.rst", "_autosummary\\verse.analysis.rst", "_autosummary\\verse.analysis.analysis_tree.rst", "_autosummary\\verse.analysis.analysis_tree.AnalysisTree.rst", "_autosummary\\verse.analysis.analysis_tree.AnalysisTreeNode.rst", "_autosummary\\verse.analysis.analysis_tree.color_interp.rst", "_autosummary\\verse.analysis.analysis_tree.first_transitions.rst", "_autosummary\\verse.analysis.analysis_tree.index_of.rst", "_autosummary\\verse.analysis.dryvr.rst", "_autosummary\\verse.analysis.dryvr.all_sensitivities_calc.rst", "_autosummary\\verse.analysis.dryvr.calcCenterPoint.rst", "_autosummary\\verse.analysis.dryvr.calcDelta.rst", "_autosummary\\verse.analysis.dryvr.calc_bloated_tube.rst", "_autosummary\\verse.analysis.dryvr.get_reachtube_segment.rst", "_autosummary\\verse.analysis.dryvr.randomPoint.rst", "_autosummary\\verse.analysis.dryvr.trimTraces.rst", "_autosummary\\verse.analysis.incremental.rst", "_autosummary\\verse.analysis.incremental.CachedRTTrans.rst", "_autosummary\\verse.analysis.incremental.CachedReachTrans.rst", "_autosummary\\verse.analysis.incremental.CachedSegment.rst", "_autosummary\\verse.analysis.incremental.CachedTransition.rst", "_autosummary\\verse.analysis.incremental.CachedTube.rst", "_autosummary\\verse.analysis.incremental.ReachTubeCache.rst", "_autosummary\\verse.analysis.incremental.SimTraceCache.rst", "_autosummary\\verse.analysis.incremental.TubeCache.rst", "_autosummary\\verse.analysis.incremental.combine_all.rst", "_autosummary\\verse.analysis.incremental.convert_reach_trans.rst", "_autosummary\\verse.analysis.incremental.convert_sim_trans.rst", "_autosummary\\verse.analysis.incremental.reach_trans_suit.rst", "_autosummary\\verse.analysis.incremental.sim_trans_suit.rst", "_autosummary\\verse.analysis.incremental.to_simulate.rst", "_autosummary\\verse.analysis.mixmonotone.rst", "_autosummary\\verse.analysis.mixmonotone.calculate_bloated_tube_mixmono_cont.rst", "_autosummary\\verse.analysis.mixmonotone.calculate_bloated_tube_mixmono_disc.rst", "_autosummary\\verse.analysis.mixmonotone.compute_reachtube_mixmono_cont.rst", "_autosummary\\verse.analysis.mixmonotone.compute_reachtube_mixmono_disc.rst", "_autosummary\\verse.analysis.mixmonotone.find_max.rst", "_autosummary\\verse.analysis.mixmonotone.find_max_symbolic.rst", "_autosummary\\verse.analysis.mixmonotone.find_min.rst", "_autosummary\\verse.analysis.mixmonotone.find_min_symbolic.rst", "_autosummary\\verse.analysis.simulator.rst", "_autosummary\\verse.analysis.simulator.SimConsts.rst", "_autosummary\\verse.analysis.simulator.Simulator.rst", "_autosummary\\verse.analysis.simulator.checkHeight.rst", "_autosummary\\verse.analysis.simulator.check_sim_transitions.rst", "_autosummary\\verse.analysis.simulator.convertEnumToStr.rst", "_autosummary\\verse.analysis.simulator.convertStrToEnum.rst", "_autosummary\\verse.analysis.simulator.disc_field.rst", "_autosummary\\verse.analysis.simulator.pack_env.rst", "_autosummary\\verse.analysis.simulator.red.rst", "_autosummary\\verse.analysis.utils.rst", "_autosummary\\verse.analysis.utils.are_polygons_intersecting.rst", "_autosummary\\verse.analysis.utils.class_from_path.rst", "_autosummary\\verse.analysis.utils.confidence_ellipsoid.rst", "_autosummary\\verse.analysis.utils.confidence_polytope.rst", "_autosummary\\verse.analysis.utils.constrain.rst", "_autosummary\\verse.analysis.utils.dedup.rst", "_autosummary\\verse.analysis.utils.distance_to_circle.rst", "_autosummary\\verse.analysis.utils.distance_to_rect.rst", "_autosummary\\verse.analysis.utils.do_every.rst", "_autosummary\\verse.analysis.utils.get_class_path.rst", "_autosummary\\verse.analysis.utils.has_corner_inside.rst", "_autosummary\\verse.analysis.utils.interval_distance.rst", "_autosummary\\verse.analysis.utils.is_consistent_dataset.rst", "_autosummary\\verse.analysis.utils.is_valid_observation.rst", "_autosummary\\verse.analysis.utils.lmap.rst", "_autosummary\\verse.analysis.utils.near_split.rst", "_autosummary\\verse.analysis.utils.not_zero.rst", "_autosummary\\verse.analysis.utils.point_in_ellipse.rst", "_autosummary\\verse.analysis.utils.point_in_rectangle.rst", "_autosummary\\verse.analysis.utils.point_in_rotated_rectangle.rst", "_autosummary\\verse.analysis.utils.project_polygon.rst", "_autosummary\\verse.analysis.utils.rect_corners.rst", "_autosummary\\verse.analysis.utils.rotated_rectangles_intersect.rst", "_autosummary\\verse.analysis.utils.sample_rect.rst", "_autosummary\\verse.analysis.utils.solve_trinom.rst", "_autosummary\\verse.analysis.utils.to_serializable.rst", "_autosummary\\verse.analysis.utils.wrap_to_pi.rst", "_autosummary\\verse.analysis.verifier.rst", "_autosummary\\verse.analysis.verifier.ReachConsts.rst", "_autosummary\\verse.analysis.verifier.Verifier.rst", "_autosummary\\verse.analysis.verifier.checkHeight.rst", "_autosummary\\verse.analysis.verifier.combine_rect.rst", "_autosummary\\verse.automaton.rst", "_autosummary\\verse.automaton.guard.rst", "_autosummary\\verse.automaton.guard.GuardExpressionAst.rst", "_autosummary\\verse.automaton.guard.LogicTreeNode.rst", "_autosummary\\verse.automaton.guard.NodeSubstituter.rst", "_autosummary\\verse.automaton.guard.ValueSubstituter.rst", "_autosummary\\verse.automaton.hybrid_automaton.rst", "_autosummary\\verse.automaton.hybrid_automaton.HybridAutomaton.rst", "_autosummary\\verse.automaton.hybrid_io_automaton.rst", "_autosummary\\verse.automaton.hybrid_io_automaton.HybridIoAutomaton.rst", "_autosummary\\verse.automaton.reset.rst", "_autosummary\\verse.automaton.reset.ResetExpression.rst", "_autosummary\\verse.map.rst", "_autosummary\\verse.map.example_map.rst", "_autosummary\\verse.map.example_map.intersection.rst", "_autosummary\\verse.map.example_map.intersection.Intersection.rst", "_autosummary\\verse.map.example_map.map_tacas.rst", "_autosummary\\verse.map.example_map.map_tacas.M1.rst", "_autosummary\\verse.map.example_map.map_tacas.M2.rst", "_autosummary\\verse.map.example_map.map_tacas.M3.rst", "_autosummary\\verse.map.example_map.map_tacas.M5.rst", "_autosummary\\verse.map.example_map.map_tacas.M6.rst", "_autosummary\\verse.map.example_map.map_tacas.get_end.rst", "_autosummary\\verse.map.example_map.simple_map.rst", "_autosummary\\verse.map.example_map.simple_map.SimpleMap.rst", "_autosummary\\verse.map.example_map.simple_map.SimpleMap2.rst", "_autosummary\\verse.map.example_map.simple_map2.rst", "_autosummary\\verse.map.example_map.simple_map2.SimpleMap2.rst", "_autosummary\\verse.map.example_map.simple_map2.SimpleMap3.rst", "_autosummary\\verse.map.example_map.simple_map2.SimpleMap4.rst", "_autosummary\\verse.map.example_map.simple_map2.SimpleMap4Switch2.rst", "_autosummary\\verse.map.example_map.simple_map2.SimpleMap5.rst", "_autosummary\\verse.map.example_map.simple_map2.SimpleMap6.rst", "_autosummary\\verse.map.example_map.simple_map_3d.rst", "_autosummary\\verse.map.example_map.simple_map_3d.SimpleMap1.rst", "_autosummary\\verse.map.example_map.simple_map_3d.SimpleMap2.rst", "_autosummary\\verse.map.example_map.simple_map_3d.SimpleMap3.rst", "_autosummary\\verse.map.example_map.simple_map_3d.SimpleMap4.rst", "_autosummary\\verse.map.example_map.simple_map_3d.SimpleMap5.rst", "_autosummary\\verse.map.example_map.simple_map_3d.SimpleMap6.rst", "_autosummary\\verse.map.example_map.simple_map_3d.SimpleMap7.rst", "_autosummary\\verse.map.example_map.simple_map_3d.get_center_radius.rst", "_autosummary\\verse.map.example_map.simple_map_3d.get_end.rst", "_autosummary\\verse.map.lane.rst", "_autosummary\\verse.map.lane.Lane.rst", "_autosummary\\verse.map.lane_3d.rst", "_autosummary\\verse.map.lane_3d.Lane_3d.rst", "_autosummary\\verse.map.lane_map.rst", "_autosummary\\verse.map.lane_map.LaneMap.rst", "_autosummary\\verse.map.lane_map_3d.rst", "_autosummary\\verse.map.lane_map_3d.LaneMap_3d.rst", "_autosummary\\verse.map.lane_segment.rst", "_autosummary\\verse.map.lane_segment.AbstractLane.rst", "_autosummary\\verse.map.lane_segment.CircularLane.rst", "_autosummary\\verse.map.lane_segment.LaneSegment.rst", "_autosummary\\verse.map.lane_segment.LineType.rst", "_autosummary\\verse.map.lane_segment.StraightLane.rst", "_autosummary\\verse.map.lane_segment_3d.rst", "_autosummary\\verse.map.lane_segment_3d.AbstractLane_3d.rst", "_autosummary\\verse.map.lane_segment_3d.CircularLane_3d_v1.rst", "_autosummary\\verse.map.lane_segment_3d.CircularLane_3d_v2.rst", "_autosummary\\verse.map.lane_segment_3d.LineType_3d.rst", "_autosummary\\verse.map.lane_segment_3d.StraightLane_3d.rst", "_autosummary\\verse.map.lane_segment_3d.func_a.rst", "_autosummary\\verse.map.lane_segment_3d.func_b.rst", "_autosummary\\verse.map.lane_segment_3d.get_center_radius.rst", "_autosummary\\verse.map.lane_segment_3d.get_coor_by_rt.rst", "_autosummary\\verse.map.lane_segment_3d.get_rtp_by_coor.rst", "_autosummary\\verse.map.lane_segment_3d.get_theta_by_coor.rst", "_autosummary\\verse.map.opendrive_parser.rst", "_autosummary\\verse.map.opendrive_parser.check_valid_side.rst", "_autosummary\\verse.map.opendrive_parser.condense_matrix.rst", "_autosummary\\verse.map.opendrive_parser.file_parser.rst", "_autosummary\\verse.map.opendrive_parser.opendrive_map.rst", "_autosummary\\verse.map.opendrive_parser.road_traverser.rst", "_autosummary\\verse.parser.rst", "_autosummary\\verse.parser.astunparser.rst", "_autosummary\\verse.parser.astunparser.Unparser.rst", "_autosummary\\verse.parser.astunparser.interleave.rst", "_autosummary\\verse.parser.astunparser.main.rst", "_autosummary\\verse.parser.astunparser.roundtrip.rst", "_autosummary\\verse.parser.astunparser.testdir.rst", "_autosummary\\verse.parser.astunparser.unparse.rst", "_autosummary\\verse.parser.parser.rst", "_autosummary\\verse.parser.parser.ArgSubstituter.rst", "_autosummary\\verse.parser.parser.Assert.rst", "_autosummary\\verse.parser.parser.CompiledAssert.rst", "_autosummary\\verse.parser.parser.CondVal.rst", "_autosummary\\verse.parser.parser.CondValCase.rst", "_autosummary\\verse.parser.parser.ControllerIR.rst", "_autosummary\\verse.parser.parser.CustomIR.rst", "_autosummary\\verse.parser.parser.Env.rst", "_autosummary\\verse.parser.parser.Lambda.rst", "_autosummary\\verse.parser.parser.LambdaArg.rst", "_autosummary\\verse.parser.parser.ModeDef.rst", "_autosummary\\verse.parser.parser.ModePath.rst", "_autosummary\\verse.parser.parser.Reduction.rst", "_autosummary\\verse.parser.parser.ReductionType.rst", "_autosummary\\verse.parser.parser.ScopeLevel.rst", "_autosummary\\verse.parser.parser.StateDef.rst", "_autosummary\\verse.parser.parser._Assert.rst", "_autosummary\\verse.parser.parser.ast_dump.rst", "_autosummary\\verse.parser.parser.compile_expr.rst", "_autosummary\\verse.parser.parser.find.rst", "_autosummary\\verse.parser.parser.fully_cond.rst", "_autosummary\\verse.parser.parser.is_main_check.rst", "_autosummary\\verse.parser.parser.merge_assert.rst", "_autosummary\\verse.parser.parser.merge_conds.rst", "_autosummary\\verse.parser.parser.merge_if.rst", "_autosummary\\verse.parser.parser.merge_if_single.rst", "_autosummary\\verse.parser.parser.merge_if_val.rst", "_autosummary\\verse.parser.parser.not_ir_ast.rst", "_autosummary\\verse.parser.parser.proc.rst", "_autosummary\\verse.parser.parser.proc_assign.rst", "_autosummary\\verse.parser.parser.unparse.rst", "_autosummary\\verse.plotter.rst", "_autosummary\\verse.plotter.plotter2D.rst", "_autosummary\\verse.plotter.plotter2D.check_dim.rst", "_autosummary\\verse.plotter.plotter2D.create_anime_dict.rst", "_autosummary\\verse.plotter.plotter2D.draw_map.rst", "_autosummary\\verse.plotter.plotter2D.duration.rst", "_autosummary\\verse.plotter.plotter2D.get_text_pos.rst", "_autosummary\\verse.plotter.plotter2D.num_digits.rst", "_autosummary\\verse.plotter.plotter2D.reachtube_anime.rst", "_autosummary\\verse.plotter.plotter2D.reachtube_tree.rst", "_autosummary\\verse.plotter.plotter2D.reachtube_tree_single.rst", "_autosummary\\verse.plotter.plotter2D.sample_trace.rst", "_autosummary\\verse.plotter.plotter2D.simulation_anime.rst", "_autosummary\\verse.plotter.plotter2D.simulation_tree.rst", "_autosummary\\verse.plotter.plotter2D.simulation_tree_single.rst", "_autosummary\\verse.plotter.plotter2D.update_style.rst", "_autosummary\\verse.plotter.plotter2D_old.rst", "_autosummary\\verse.plotter.plotter2D_old.generate_simulation_anime.rst", "_autosummary\\verse.plotter.plotter2D_old.plot.rst", "_autosummary\\verse.plotter.plotter2D_old.plot_map.rst", "_autosummary\\verse.plotter.plotter2D_old.plot_reachtube_tree.rst", "_autosummary\\verse.plotter.plotter2D_old.plot_simulation_tree.rst", "_autosummary\\verse.plotter.plotter3D.rst", "_autosummary\\verse.plotter.plotter3D.plot3dMap.rst", "_autosummary\\verse.plotter.plotter3D.plot3dReachtube.rst", "_autosummary\\verse.plotter.plotter3D.plot3dReachtubeSingle.rst", "_autosummary\\verse.plotter.plotter3D.plot_line_3d.rst", "_autosummary\\verse.plotter.plotter3D.plot_point_3d.rst", "_autosummary\\verse.plotter.plotter3D.plot_polytope_3d.rst", "_autosummary\\verse.plotter.plotter3D_new.rst", "_autosummary\\verse.plotter.plotter3D_new.check_dim.rst", "_autosummary\\verse.plotter.plotter3D_new.draw_map_3d.rst", "_autosummary\\verse.plotter.plotter3D_new.reachtube_tree_3d.rst", "_autosummary\\verse.plotter.plotter3D_new.reachtube_tree_single_3d.rst", "_autosummary\\verse.plotter.plotter3D_new.sample_trace.rst", "_autosummary\\verse.plotter.plotter3D_new.simulation_tree_3d.rst", "_autosummary\\verse.plotter.plotter3D_new.simulation_tree_single_3d.rst", "_autosummary\\verse.plotter.plotter3D_new.update_style.rst", "_autosummary\\verse.scenario.rst", "_autosummary\\verse.scenario.scenario.rst", "_autosummary\\verse.scenario.scenario.Benchmark.rst", "_autosummary\\verse.scenario.scenario.ExprConfig.rst", "_autosummary\\verse.scenario.scenario.Scenario.rst", "_autosummary\\verse.scenario.scenario.ScenarioConfig.rst", "_autosummary\\verse.scenario.scenario.check_ray_init.rst", "_autosummary\\verse.scenario.scenario.red.rst", "_autosummary\\verse.sensor.rst", "_autosummary\\verse.sensor.base_sensor.rst", "_autosummary\\verse.sensor.base_sensor.BaseSensor.rst", "_autosummary\\verse.sensor.base_sensor.add_states_2d.rst", "_autosummary\\verse.sensor.base_sensor.add_states_3d.rst", "_autosummary\\verse.sensor.base_sensor.adds.rst", "_autosummary\\verse.sensor.base_sensor.set_states_2d.rst", "_autosummary\\verse.sensor.base_sensor.set_states_3d.rst", "_autosummary\\verse.sensor.base_sensor.sets.rst", "_autosummary\\verse.sensor.example_sensor.rst", "_autosummary\\verse.sensor.example_sensor.craft_sensor.rst", "_autosummary\\verse.sensor.example_sensor.craft_sensor.CraftSensor.rst", "_autosummary\\verse.sensor.example_sensor.craft_sensor.add_states_2d_ball.rst", "_autosummary\\verse.sensor.example_sensor.craft_sensor.add_states_3d_ball.rst", "_autosummary\\verse.sensor.example_sensor.craft_sensor.adds.rst", "_autosummary\\verse.sensor.example_sensor.craft_sensor.set_states_2d_ball.rst", "_autosummary\\verse.sensor.example_sensor.craft_sensor.set_states_3d_ball.rst", "_autosummary\\verse.sensor.example_sensor.craft_sensor.sets.rst", "_autosummary\\verse.sensor.example_sensor.quadrotor_sensor.rst", "_autosummary\\verse.sensor.example_sensor.quadrotor_sensor.QuadrotorSensor.rst", "_autosummary\\verse.sensor.example_sensor.quadrotor_sensor.add_states_2d_ball.rst", "_autosummary\\verse.sensor.example_sensor.quadrotor_sensor.add_states_3d_ball.rst", "_autosummary\\verse.sensor.example_sensor.quadrotor_sensor.adds.rst", "_autosummary\\verse.sensor.example_sensor.quadrotor_sensor.set_states_2d_ball.rst", "_autosummary\\verse.sensor.example_sensor.quadrotor_sensor.set_states_3d_ball.rst", "_autosummary\\verse.sensor.example_sensor.quadrotor_sensor.sets.rst", "_autosummary\\verse.sensor.example_sensor.single_sensor.rst", "_autosummary\\verse.sensor.example_sensor.single_sensor.FakeSensor3.rst", "_autosummary\\verse.sensor.example_sensor.single_sensor.FakeSensor4.rst", "_autosummary\\verse.sensor.example_sensor.single_sensor.SingleSensor.rst", "_autosummary\\verse.sensor.example_sensor.single_sensor.add_states_2d.rst", "_autosummary\\verse.sensor.example_sensor.single_sensor.add_states_2d_ball.rst", "_autosummary\\verse.sensor.example_sensor.single_sensor.add_states_3d.rst", "_autosummary\\verse.sensor.example_sensor.single_sensor.add_states_3d_ball.rst", "_autosummary\\verse.sensor.example_sensor.single_sensor.adds.rst", "_autosummary\\verse.sensor.example_sensor.single_sensor.set_states_2d.rst", "_autosummary\\verse.sensor.example_sensor.single_sensor.set_states_2d_ball.rst", "_autosummary\\verse.sensor.example_sensor.single_sensor.set_states_3d.rst", "_autosummary\\verse.sensor.example_sensor.single_sensor.set_states_3d_ball.rst", "_autosummary\\verse.sensor.example_sensor.single_sensor.sets.rst", "_autosummary\\verse.sensor.example_sensor.thermo_sensor.rst", "_autosummary\\verse.sensor.example_sensor.thermo_sensor.ThermoSensor.rst", "_autosummary\\verse.sensor.example_sensor.thermo_sensor.add_states_2d_ball.rst", "_autosummary\\verse.sensor.example_sensor.thermo_sensor.add_states_3d_ball.rst", "_autosummary\\verse.sensor.example_sensor.thermo_sensor.adds.rst", "_autosummary\\verse.sensor.example_sensor.thermo_sensor.set_states_2d_ball.rst", "_autosummary\\verse.sensor.example_sensor.thermo_sensor.set_states_3d_ball.rst", "_autosummary\\verse.sensor.example_sensor.thermo_sensor.sets.rst", "agent.rst", "contributors.rst", "getting_started.rst", "index.rst", "map.rst", "outputs.rst", "parser.md", "plotting.rst", "scenario.rst", "sensor.rst"], "titles": ["verse", "verse.agents", "verse.agents.base_agent", "verse.agents.base_agent.BaseAgent", "verse.agents.example_agent", "verse.agents.example_agent.ball_agent", "verse.agents.example_agent.ball_agent.BallAgent", "verse.agents.example_agent.car_agent", "verse.agents.example_agent.car_agent.CarAgent", "verse.agents.example_agent.car_agent.CarAgentDebounced", "verse.agents.example_agent.car_agent.CarAgentSwitch2", "verse.agents.example_agent.car_agent.NPCAgent", "verse.agents.example_agent.car_agent.WeirdCarAgent", "verse.agents.example_agent.origin_agent", "verse.agents.example_agent.origin_agent.craft_agent", "verse.agents.example_agent.origin_agent.thermo_agent", "verse.agents.example_agent.origin_agent.vanderpol_agent", "verse.agents.example_agent.quadrotor_agent", "verse.agents.example_agent.quadrotor_agent.FFNNC", "verse.agents.example_agent.quadrotor_agent.QuadrotorAgent", "verse.agents.example_agent.robot_agent", "verse.agents.example_agent.robot_agent.RobotAgent", "verse.agents.example_agent.sign_agent", "verse.agents.example_agent.sign_agent.SignAgent", "verse.analysis", "verse.analysis.analysis_tree", "verse.analysis.analysis_tree.AnalysisTree", "verse.analysis.analysis_tree.AnalysisTreeNode", "verse.analysis.analysis_tree.color_interp", "verse.analysis.analysis_tree.first_transitions", "verse.analysis.analysis_tree.index_of", "verse.analysis.dryvr", "verse.analysis.dryvr.all_sensitivities_calc", "verse.analysis.dryvr.calcCenterPoint", "verse.analysis.dryvr.calcDelta", "verse.analysis.dryvr.calc_bloated_tube", "verse.analysis.dryvr.get_reachtube_segment", "verse.analysis.dryvr.randomPoint", "verse.analysis.dryvr.trimTraces", "verse.analysis.incremental", "verse.analysis.incremental.CachedRTTrans", "verse.analysis.incremental.CachedReachTrans", "verse.analysis.incremental.CachedSegment", "verse.analysis.incremental.CachedTransition", "verse.analysis.incremental.CachedTube", "verse.analysis.incremental.ReachTubeCache", "verse.analysis.incremental.SimTraceCache", "verse.analysis.incremental.TubeCache", "verse.analysis.incremental.combine_all", "verse.analysis.incremental.convert_reach_trans", "verse.analysis.incremental.convert_sim_trans", "verse.analysis.incremental.reach_trans_suit", "verse.analysis.incremental.sim_trans_suit", "verse.analysis.incremental.to_simulate", "verse.analysis.mixmonotone", "verse.analysis.mixmonotone.calculate_bloated_tube_mixmono_cont", "verse.analysis.mixmonotone.calculate_bloated_tube_mixmono_disc", "verse.analysis.mixmonotone.compute_reachtube_mixmono_cont", "verse.analysis.mixmonotone.compute_reachtube_mixmono_disc", "verse.analysis.mixmonotone.find_max", "verse.analysis.mixmonotone.find_max_symbolic", "verse.analysis.mixmonotone.find_min", "verse.analysis.mixmonotone.find_min_symbolic", "verse.analysis.simulator", "verse.analysis.simulator.SimConsts", "verse.analysis.simulator.Simulator", "verse.analysis.simulator.checkHeight", "verse.analysis.simulator.check_sim_transitions", "verse.analysis.simulator.convertEnumToStr", "verse.analysis.simulator.convertStrToEnum", "verse.analysis.simulator.disc_field", "verse.analysis.simulator.pack_env", "verse.analysis.simulator.red", "verse.analysis.utils", "verse.analysis.utils.are_polygons_intersecting", "verse.analysis.utils.class_from_path", "verse.analysis.utils.confidence_ellipsoid", "verse.analysis.utils.confidence_polytope", "verse.analysis.utils.constrain", "verse.analysis.utils.dedup", "verse.analysis.utils.distance_to_circle", "verse.analysis.utils.distance_to_rect", "verse.analysis.utils.do_every", "verse.analysis.utils.get_class_path", "verse.analysis.utils.has_corner_inside", "verse.analysis.utils.interval_distance", "verse.analysis.utils.is_consistent_dataset", "verse.analysis.utils.is_valid_observation", "verse.analysis.utils.lmap", "verse.analysis.utils.near_split", "verse.analysis.utils.not_zero", "verse.analysis.utils.point_in_ellipse", "verse.analysis.utils.point_in_rectangle", "verse.analysis.utils.point_in_rotated_rectangle", "verse.analysis.utils.project_polygon", "verse.analysis.utils.rect_corners", "verse.analysis.utils.rotated_rectangles_intersect", "verse.analysis.utils.sample_rect", "verse.analysis.utils.solve_trinom", "verse.analysis.utils.to_serializable", "verse.analysis.utils.wrap_to_pi", "verse.analysis.verifier", "verse.analysis.verifier.ReachConsts", "verse.analysis.verifier.Verifier", "verse.analysis.verifier.checkHeight", "verse.analysis.verifier.combine_rect", "verse.automaton", "verse.automaton.guard", "verse.automaton.guard.GuardExpressionAst", "verse.automaton.guard.LogicTreeNode", "verse.automaton.guard.NodeSubstituter", "verse.automaton.guard.ValueSubstituter", "verse.automaton.hybrid_automaton", "verse.automaton.hybrid_automaton.HybridAutomaton", "verse.automaton.hybrid_io_automaton", "verse.automaton.hybrid_io_automaton.HybridIoAutomaton", "verse.automaton.reset", "verse.automaton.reset.ResetExpression", "verse.map", "verse.map.example_map", "verse.map.example_map.intersection", "verse.map.example_map.intersection.Intersection", "verse.map.example_map.map_tacas", "verse.map.example_map.map_tacas.M1", "verse.map.example_map.map_tacas.M2", "verse.map.example_map.map_tacas.M3", "verse.map.example_map.map_tacas.M5", "verse.map.example_map.map_tacas.M6", "verse.map.example_map.map_tacas.get_end", "verse.map.example_map.simple_map", "verse.map.example_map.simple_map.SimpleMap", "verse.map.example_map.simple_map.SimpleMap2", "verse.map.example_map.simple_map2", "verse.map.example_map.simple_map2.SimpleMap2", "verse.map.example_map.simple_map2.SimpleMap3", "verse.map.example_map.simple_map2.SimpleMap4", "verse.map.example_map.simple_map2.SimpleMap4Switch2", "verse.map.example_map.simple_map2.SimpleMap5", "verse.map.example_map.simple_map2.SimpleMap6", "verse.map.example_map.simple_map_3d", "verse.map.example_map.simple_map_3d.SimpleMap1", "verse.map.example_map.simple_map_3d.SimpleMap2", "verse.map.example_map.simple_map_3d.SimpleMap3", "verse.map.example_map.simple_map_3d.SimpleMap4", "verse.map.example_map.simple_map_3d.SimpleMap5", "verse.map.example_map.simple_map_3d.SimpleMap6", "verse.map.example_map.simple_map_3d.SimpleMap7", "verse.map.example_map.simple_map_3d.get_center_radius", "verse.map.example_map.simple_map_3d.get_end", "verse.map.lane", "verse.map.lane.Lane", "verse.map.lane_3d", "verse.map.lane_3d.Lane_3d", "verse.map.lane_map", "verse.map.lane_map.LaneMap", "verse.map.lane_map_3d", "verse.map.lane_map_3d.LaneMap_3d", "verse.map.lane_segment", "verse.map.lane_segment.AbstractLane", "verse.map.lane_segment.CircularLane", "verse.map.lane_segment.LaneSegment", "verse.map.lane_segment.LineType", "verse.map.lane_segment.StraightLane", "verse.map.lane_segment_3d", "verse.map.lane_segment_3d.AbstractLane_3d", "verse.map.lane_segment_3d.CircularLane_3d_v1", "verse.map.lane_segment_3d.CircularLane_3d_v2", "verse.map.lane_segment_3d.LineType_3d", "verse.map.lane_segment_3d.StraightLane_3d", "verse.map.lane_segment_3d.func_a", "verse.map.lane_segment_3d.func_b", "verse.map.lane_segment_3d.get_center_radius", "verse.map.lane_segment_3d.get_coor_by_rt", "verse.map.lane_segment_3d.get_rtp_by_coor", "verse.map.lane_segment_3d.get_theta_by_coor", "verse.map.opendrive_parser", "verse.map.opendrive_parser.check_valid_side", "verse.map.opendrive_parser.condense_matrix", "verse.map.opendrive_parser.file_parser", "verse.map.opendrive_parser.opendrive_map", "verse.map.opendrive_parser.road_traverser", "verse.parser", "verse.parser.astunparser", "verse.parser.astunparser.Unparser", "verse.parser.astunparser.interleave", "verse.parser.astunparser.main", "verse.parser.astunparser.roundtrip", "verse.parser.astunparser.testdir", "verse.parser.astunparser.unparse", "verse.parser.parser", "verse.parser.parser.ArgSubstituter", "verse.parser.parser.Assert", "verse.parser.parser.CompiledAssert", "verse.parser.parser.CondVal", "verse.parser.parser.CondValCase", "verse.parser.parser.ControllerIR", "verse.parser.parser.CustomIR", "verse.parser.parser.Env", "verse.parser.parser.Lambda", "verse.parser.parser.LambdaArg", "verse.parser.parser.ModeDef", "verse.parser.parser.ModePath", "verse.parser.parser.Reduction", "verse.parser.parser.ReductionType", "verse.parser.parser.ScopeLevel", "verse.parser.parser.StateDef", "verse.parser.parser._Assert", "verse.parser.parser.ast_dump", "verse.parser.parser.compile_expr", "verse.parser.parser.find", "verse.parser.parser.fully_cond", "verse.parser.parser.is_main_check", "verse.parser.parser.merge_assert", "verse.parser.parser.merge_conds", "verse.parser.parser.merge_if", "verse.parser.parser.merge_if_single", "verse.parser.parser.merge_if_val", "verse.parser.parser.not_ir_ast", "verse.parser.parser.proc", "verse.parser.parser.proc_assign", "verse.parser.parser.unparse", "verse.plotter", "verse.plotter.plotter2D", "verse.plotter.plotter2D.check_dim", "verse.plotter.plotter2D.create_anime_dict", "verse.plotter.plotter2D.draw_map", "verse.plotter.plotter2D.duration", "verse.plotter.plotter2D.get_text_pos", "verse.plotter.plotter2D.num_digits", "verse.plotter.plotter2D.reachtube_anime", "verse.plotter.plotter2D.reachtube_tree", "verse.plotter.plotter2D.reachtube_tree_single", "verse.plotter.plotter2D.sample_trace", "verse.plotter.plotter2D.simulation_anime", "verse.plotter.plotter2D.simulation_tree", "verse.plotter.plotter2D.simulation_tree_single", "verse.plotter.plotter2D.update_style", "verse.plotter.plotter2D_old", "verse.plotter.plotter2D_old.generate_simulation_anime", "verse.plotter.plotter2D_old.plot", "verse.plotter.plotter2D_old.plot_map", "verse.plotter.plotter2D_old.plot_reachtube_tree", "verse.plotter.plotter2D_old.plot_simulation_tree", "verse.plotter.plotter3D", "verse.plotter.plotter3D.plot3dMap", "verse.plotter.plotter3D.plot3dReachtube", "verse.plotter.plotter3D.plot3dReachtubeSingle", "verse.plotter.plotter3D.plot_line_3d", "verse.plotter.plotter3D.plot_point_3d", "verse.plotter.plotter3D.plot_polytope_3d", "verse.plotter.plotter3D_new", "verse.plotter.plotter3D_new.check_dim", "verse.plotter.plotter3D_new.draw_map_3d", "verse.plotter.plotter3D_new.reachtube_tree_3d", "verse.plotter.plotter3D_new.reachtube_tree_single_3d", "verse.plotter.plotter3D_new.sample_trace", "verse.plotter.plotter3D_new.simulation_tree_3d", "verse.plotter.plotter3D_new.simulation_tree_single_3d", "verse.plotter.plotter3D_new.update_style", "verse.scenario", "verse.scenario.scenario", "verse.scenario.scenario.Benchmark", "verse.scenario.scenario.ExprConfig", "verse.scenario.scenario.Scenario", "verse.scenario.scenario.ScenarioConfig", "verse.scenario.scenario.check_ray_init", "verse.scenario.scenario.red", "verse.sensor", "verse.sensor.base_sensor", "verse.sensor.base_sensor.BaseSensor", "verse.sensor.base_sensor.add_states_2d", "verse.sensor.base_sensor.add_states_3d", "verse.sensor.base_sensor.adds", "verse.sensor.base_sensor.set_states_2d", "verse.sensor.base_sensor.set_states_3d", "verse.sensor.base_sensor.sets", "verse.sensor.example_sensor", "verse.sensor.example_sensor.craft_sensor", "verse.sensor.example_sensor.craft_sensor.CraftSensor", "verse.sensor.example_sensor.craft_sensor.add_states_2d_ball", "verse.sensor.example_sensor.craft_sensor.add_states_3d_ball", "verse.sensor.example_sensor.craft_sensor.adds", "verse.sensor.example_sensor.craft_sensor.set_states_2d_ball", "verse.sensor.example_sensor.craft_sensor.set_states_3d_ball", "verse.sensor.example_sensor.craft_sensor.sets", "verse.sensor.example_sensor.quadrotor_sensor", "verse.sensor.example_sensor.quadrotor_sensor.QuadrotorSensor", "verse.sensor.example_sensor.quadrotor_sensor.add_states_2d_ball", "verse.sensor.example_sensor.quadrotor_sensor.add_states_3d_ball", "verse.sensor.example_sensor.quadrotor_sensor.adds", "verse.sensor.example_sensor.quadrotor_sensor.set_states_2d_ball", "verse.sensor.example_sensor.quadrotor_sensor.set_states_3d_ball", "verse.sensor.example_sensor.quadrotor_sensor.sets", "verse.sensor.example_sensor.single_sensor", "verse.sensor.example_sensor.single_sensor.FakeSensor3", "verse.sensor.example_sensor.single_sensor.FakeSensor4", "verse.sensor.example_sensor.single_sensor.SingleSensor", "verse.sensor.example_sensor.single_sensor.add_states_2d", "verse.sensor.example_sensor.single_sensor.add_states_2d_ball", "verse.sensor.example_sensor.single_sensor.add_states_3d", "verse.sensor.example_sensor.single_sensor.add_states_3d_ball", "verse.sensor.example_sensor.single_sensor.adds", "verse.sensor.example_sensor.single_sensor.set_states_2d", "verse.sensor.example_sensor.single_sensor.set_states_2d_ball", "verse.sensor.example_sensor.single_sensor.set_states_3d", "verse.sensor.example_sensor.single_sensor.set_states_3d_ball", "verse.sensor.example_sensor.single_sensor.sets", "verse.sensor.example_sensor.thermo_sensor", "verse.sensor.example_sensor.thermo_sensor.ThermoSensor", "verse.sensor.example_sensor.thermo_sensor.add_states_2d_ball", "verse.sensor.example_sensor.thermo_sensor.add_states_3d_ball", "verse.sensor.example_sensor.thermo_sensor.adds", "verse.sensor.example_sensor.thermo_sensor.set_states_2d_ball", "verse.sensor.example_sensor.thermo_sensor.set_states_3d_ball", "verse.sensor.example_sensor.thermo_sensor.sets", "Agent", "Contributors", "Getting Started", "Welcome to verse\u2019s documentation!", "Map", "Simulations", "Parser", "Visualization", "Scenario", "Sensor"], "terms": {"modul": [0, 1, 4, 18, 24, 106, 118, 119, 181, 221, 222, 259, 267, 276, 318, 321], "class": [2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 39, 40, 41, 42, 43, 44, 45, 46, 47, 63, 64, 65, 101, 102, 103, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 182, 183, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 260, 261, 262, 263, 264, 268, 269, 277, 278, 285, 286, 293, 294, 295, 296, 307, 308, 321], "id": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 19, 21, 23, 27, 113, 115, 150, 152, 158, 159, 160, 162, 164, 165, 166, 168, 320], "code": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 19, 21, 23, 183, 222, 237, 321], "none": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 23, 26, 30, 35, 37, 40, 41, 42, 43, 44, 64, 74, 86, 89, 97, 102, 103, 109, 113, 115, 150, 158, 159, 160, 162, 164, 165, 166, 168, 183, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 204, 205, 206, 209, 216, 223, 229, 230, 231, 233, 234, 235, 238, 239, 240, 241, 242, 244, 245, 247, 248, 249, 251, 253, 254, 256, 257, 262, 264, 265, 322], "file_nam": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 19, 21, 23, 178, 179], "initial_st": [3, 8, 9, 10, 11], "initial_mod": [3, 8, 9, 10, 11], "static_param": 3, "uncertain_param": [3, 27, 55, 56], "base": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 23, 26, 27, 40, 41, 42, 43, 44, 45, 46, 47, 64, 65, 102, 103, 108, 109, 110, 111, 113, 115, 117, 121, 123, 124, 125, 126, 127, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 150, 152, 154, 156, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 183, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 210, 261, 262, 263, 264, 269, 278, 286, 294, 295, 296, 308, 322], "object": [3, 18, 26, 27, 35, 40, 41, 42, 43, 44, 45, 46, 47, 64, 65, 102, 103, 108, 109, 113, 117, 150, 152, 154, 156, 158, 160, 161, 164, 167, 183, 191, 192, 195, 197, 198, 199, 200, 201, 204, 205, 206, 261, 262, 263, 264, 269, 278, 286, 294, 295, 296, 308, 322], "method": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 23, 26, 27, 35, 36, 45, 46, 47, 65, 103, 108, 110, 111, 113, 115, 121, 123, 124, 125, 126, 127, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 150, 152, 154, 156, 158, 159, 160, 162, 164, 165, 166, 168, 183, 190, 193, 194, 195, 196, 197, 198, 202, 205, 261, 262, 263, 269, 278, 286, 294, 295, 296, 308, 321], "tc_simul": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 19, 21, 23], "mode": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 23, 27, 35, 41, 55, 56, 67, 113, 115, 183, 186, 200, 320, 321, 322], "initialset": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 19, 21, 23], "time_horizon": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 19, 21, 23, 35, 55, 56, 57, 58, 103], "time_step": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 19, 21, 23, 35, 55, 56, 57, 58, 64, 102, 103, 229, 233, 322], "map": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 23, 64, 67, 88, 102, 225, 229, 230, 233, 234, 238, 240, 252, 253, 256, 318, 322], "abstract": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 19, 21, 23, 158, 164, 165, 166, 168, 183], "simul": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 19, 21, 23, 26, 27, 35, 38, 205, 233, 234, 235, 256, 257, 263, 318, 321, 322], "function": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 23, 25, 31, 33, 34, 35, 37, 39, 54, 63, 73, 79, 101, 108, 110, 111, 122, 139, 163, 175, 182, 183, 189, 190, 198, 202, 222, 226, 237, 243, 250, 260, 268, 277, 285, 293, 307, 318, 320, 321], "paramet": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 23, 74, 76, 77, 84, 86, 87, 91, 92, 93, 96, 105, 158, 159, 162, 164, 165, 166, 168, 322], "str": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 23, 26, 28, 29, 35, 40, 41, 42, 43, 51, 52, 53, 70, 71, 75, 76, 83, 102, 108, 111, 158, 162, 164, 168, 190, 191, 192, 194, 195, 197, 199, 200, 201, 202, 204, 205, 206, 215, 216, 261, 262, 264], "The": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 23, 27, 33, 34, 85, 86, 89, 108, 317, 318, 320, 321, 322], "current": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 23, 26, 183, 321], "list": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 23, 33, 34, 35, 37, 38, 40, 41, 42, 43, 44, 51, 52, 64, 67, 74, 79, 81, 88, 89, 95, 97, 99, 102, 103, 105, 150, 152, 154, 156, 159, 165, 166, 193, 194, 195, 197, 198, 200, 204, 205, 206, 209, 212, 223, 239, 241, 242, 261, 262, 320, 321], "float": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 23, 26, 28, 29, 33, 34, 35, 37, 41, 43, 44, 51, 52, 64, 71, 74, 76, 77, 78, 82, 84, 85, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 100, 102, 121, 158, 159, 162, 164, 165, 166, 168, 228, 320], "initi": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 23, 33, 34, 35, 320], "condit": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 19, 21, 23, 193, 194, 210], "perform": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 23, 108, 322], "time": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 23, 35, 320, 321, 322], "horizon": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 19, 21, 23, 35], "lanemap": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 19, 21, 23, 64, 102, 108, 121, 123, 124, 125, 130, 131, 133, 134, 135, 136, 137, 138, 225], "option": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 23, 158, 159, 162, 164, 165, 166, 168], "provid": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 23, 317], "i": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 23, 26, 27, 33, 34, 86, 87, 91, 92, 93, 108, 158, 159, 162, 164, 165, 166, 168, 183, 193, 210, 217, 233, 317, 318, 320, 321, 322], "us": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 23, 35, 103, 108, 217, 226, 317, 318, 320, 321, 322], "__init__": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 23, 26, 27, 40, 41, 42, 43, 44, 45, 46, 47, 64, 65, 102, 103, 108, 109, 110, 111, 113, 115, 117, 121, 123, 124, 125, 126, 127, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 150, 152, 154, 156, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 183, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 261, 262, 263, 264, 269, 278, 286, 294, 295, 296, 308], "constructor": [3, 8, 9, 10, 11, 12, 14, 15, 16, 19, 21, 23], "actual": [3, 8, 9, 10, 11, 12, 14, 15, 16, 19, 21, 23, 193, 321], "python": [3, 8, 9, 10, 11, 12, 14, 15, 16, 19, 21, 23, 317, 318, 321, 322], "control": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 19, 21, 23, 321], "file": [3, 8, 9, 10, 11, 12, 14, 15, 16, 19, 21, 23, 182, 183, 222, 237, 318, 320, 321], "name": [3, 6, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 23, 35, 183, 186, 199], "baseag": [6, 8, 11, 14, 15, 16, 19, 21, 23, 53, 67, 68, 69, 70, 71], "dynam": [6, 8, 9, 10, 11, 12, 14, 15, 16, 19, 21, 23, 113, 115], "frictionless": 6, "billiard": 6, "ball": [6, 317], "2d": [6, 74, 105, 318], "plane": 6, "set_initi": [6, 8, 9, 10, 11, 12, 14, 15, 16, 19, 21, 23], "set_initial_mod": [6, 8, 9, 10, 11, 12, 14, 15, 16, 19, 21, 23], "set_initial_st": [6, 8, 9, 10, 11, 12, 14, 15, 16, 19, 21, 23], "set_static_paramet": [6, 8, 9, 10, 11, 12, 14, 15, 16, 19, 21, 23], "set_uncertain_paramet": [6, 8, 9, 10, 11, 12, 14, 15, 16, 19, 21, 23], "contructor": 6, "tha": 6, "exactli": [6, 18], "one": [6, 18, 105, 231, 235, 254, 257, 321, 322], "follow": [6, 18, 320, 321], "should": [6, 18, 86, 322], "given": [6, 18, 35, 158, 159, 162, 164, 165, 166, 168, 231, 235, 254, 257, 322], "pyhton": 6, "string": [6, 18, 35, 108], "ddefn": 6, "static": [6, 27, 103, 195, 205, 230, 231, 234, 235, 253, 254, 256, 257, 320, 322], "t": [6, 18, 26, 30, 76, 77, 79, 183, 209, 321], "state": [6, 11, 18, 67, 320, 321], "defin": [6, 18, 318, 321], "rh": 6, "od": 6, "trajectori": 6, "speed": [8, 9, 10, 322], "2": [8, 9, 10, 18, 121, 223, 229, 230, 231, 233, 234, 235, 249, 251, 253, 254, 256, 257, 321, 322], "accel": [8, 9, 10], "1": [8, 9, 10, 18, 76, 86, 87, 158, 159, 162, 164, 165, 166, 168, 223, 226, 229, 230, 231, 232, 233, 234, 235, 239, 241, 242, 244, 247, 251, 252, 253, 254, 255, 256, 257, 322], "action_handl": [8, 9, 10, 11, 12, 14, 15, 19], "init": [8, 9, 10, 11, 12, 18, 23, 27, 41, 43, 48, 49, 50, 55, 56, 320], "time_bound": [8, 9, 10, 11, 12, 14, 15, 16, 19, 21], "lane_map": [8, 9, 10, 11, 12, 14, 15, 16, 19, 21, 35, 55, 56, 64, 102, 103, 244], "ndarrai": [8, 9, 10, 11, 12, 14, 15, 16, 19, 21, 32, 36, 42, 74, 76, 77, 78, 81, 84, 86, 87, 88, 91, 92, 93, 94, 95, 96, 99, 158, 159, 162, 164, 165, 166, 168], "ani": [8, 9, 10, 11, 12, 18, 42, 53, 71, 79, 192, 201, 218, 321], "dtype": [8, 9, 10, 11, 12, 18, 42], "float64": [8, 9, 10, 11, 12, 18, 42], "carag": [9, 10, 12], "tupl": [11, 18, 40, 42, 53, 67, 74, 76, 77, 81, 84, 88, 94, 96, 158, 159, 162, 164, 165, 166, 168], "comput": [11, 18, 76, 77, 81, 158, 159, 162, 164, 165, 166, 168, 321, 322], "steer": 11, "acceler": 11, "lane": [11, 121, 154, 158, 159, 161, 162, 164, 165, 166, 167, 168, 322], "target": [11, 18, 219], "stanlei": 11, "like": [11, 18, 321], "rule": 11, "passive_dynam": 14, "proxa_dynam": 14, "proxb_dynam": 14, "initialcondit": [14, 15, 16, 19, 21], "d_in": 18, "6": 18, "d_out": 18, "8": [18, 183, 186, 263, 264, 317], "__call__": 18, "intern": 18, "share": 18, "both": [18, 37, 108, 162, 168], "nn": 18, "scriptmodul": 18, "add_modul": 18, "add": 18, "child": [18, 27, 109, 320], "can": [18, 89, 108, 158, 159, 162, 164, 165, 166, 168, 217, 317, 318, 320, 321, 322], "access": 18, "an": [18, 76, 91, 183, 203, 317, 318, 321, 322], "attribut": [18, 222], "arg": [18, 33, 34, 35, 37, 38, 59, 61, 99, 161, 167, 185, 190, 195, 196, 198, 262, 269, 278, 286, 294, 295, 296, 308], "from": [18, 121, 158, 159, 162, 164, 165, 166, 168, 193, 198, 318, 321], "thi": [18, 35, 37, 108, 162, 168, 183, 222, 237, 321, 322], "ad": 18, "appli": [18, 198, 202], "fn": 18, "callabl": [18, 75, 79, 83, 209], "recurs": [18, 183], "everi": [18, 322], "submodul": 18, "return": [18, 26, 33, 34, 35, 37, 38, 74, 76, 77, 81, 86, 87, 89, 91, 93, 95, 96, 103, 105, 108, 158, 159, 162, 164, 165, 166, 168, 321, 322], "children": 18, "well": [18, 26, 321], "self": 18, "typic": [18, 322], "includ": [18, 26, 95], "model": 18, "see": [18, 74, 81, 108, 202, 321], "also": [18, 321], "doc": 18, "each": [18, 27, 121, 184, 320, 321], "exampl": [18, 121, 317, 321], "torch": 18, "no_grad": 18, "def": [18, 198], "init_weight": 18, "m": [18, 158, 159, 162, 164, 165, 166, 168, 317], "print": [18, 183], "type": [18, 27, 79, 161, 162, 167, 168, 183, 197, 200, 204, 205, 206, 217, 320, 321, 322], "linear": [18, 88], "weight": [18, 158, 159, 162, 164, 165, 166, 168], "fill_": 18, "0": [18, 27, 76, 87, 90, 108, 158, 159, 162, 164, 165, 166, 168, 225, 239, 241, 242, 244, 249, 252], "net": 18, "sequenti": 18, "in_featur": 18, "out_featur": 18, "bia": 18, "true": [18, 26, 108, 152, 159, 165, 166, 171, 172, 173, 174, 212, 214, 215, 216, 245, 246, 249, 262, 263, 264], "contain": [18, 26, 35, 77, 86, 108, 321, 322], "tensor": 18, "bfloat16": 18, "cast": 18, "all": [18, 38, 103, 108, 193, 230, 234, 253, 256, 317, 321, 322], "point": [18, 33, 37, 74, 91, 92, 93, 164, 165, 166, 168, 173, 174, 248, 322], "buffer": 18, "datatyp": 18, "modifi": 18, "place": 18, "bool": [18, 26, 51, 52, 74, 82, 84, 86, 87, 91, 92, 93, 95, 96, 108, 158, 159, 162, 164, 165, 166, 168, 195, 199, 209, 210, 211, 217, 262, 264, 265], "iter": [18, 30, 202], "over": [18, 76, 77, 202], "yield": 18, "otherwis": [18, 322], "onli": [18, 33, 34, 108, 321, 322], "ar": [18, 74, 194, 226, 321, 322], "direct": [18, 80, 121], "member": [18, 205, 321], "buf": 18, "size": [18, 89, 121], "20l": 18, "1l": 18, "5l": 18, "immedi": 18, "cpu": 18, "move": 18, "cuda": 18, "devic": 18, "int": [18, 30, 35, 37, 40, 41, 42, 43, 64, 102, 121, 159, 162, 165, 166, 168, 223, 229, 230, 231, 232, 233, 234, 235, 239, 241, 242, 251, 253, 254, 255, 256, 257, 264, 320], "gpu": 18, "make": [18, 318], "associ": 18, "differ": [18, 318, 321, 322], "so": [18, 321], "call": [18, 108, 110, 111, 184, 190, 321], "befor": 18, "construct": [18, 321], "optim": 18, "live": 18, "while": 18, "being": [18, 321], "specifi": [18, 322], "copi": 18, "doubl": 18, "eval": 18, "set": [18, 26, 33, 34, 35, 40, 42, 89, 197, 205, 322], "evalu": [18, 108, 321], "ha": [18, 84, 162, 168, 321, 322], "effect": 18, "certain": 18, "document": [18, 322], "particular": 18, "detail": [18, 317, 322], "behavior": 18, "train": 18, "thei": [18, 96, 321], "affect": 18, "e": [18, 26, 121, 208, 220, 317, 321], "g": [18, 121, 321], "dropout": 18, "batchnorm": 18, "etc": 18, "equival": 18, "fals": [18, 95, 108, 159, 162, 165, 166, 168, 207, 212, 214, 215, 216, 233, 262, 263, 264, 322], "local": [18, 158, 159, 162, 164, 165, 166, 168], "disabl": 18, "grad": 18, "comparison": 18, "between": [18, 33, 34, 37, 81, 85, 184], "sever": [18, 89, 317], "similar": [18, 321, 322], "mechan": 18, "mai": [18, 321, 322], "confus": 18, "extra_repr": 18, "extra": 18, "represent": 18, "To": [18, 317], "custom": [18, 321], "inform": [18, 322], "you": [18, 89, 322], "re": 18, "implement": 18, "your": 18, "own": 18, "singl": [18, 35, 194, 202, 321], "line": [18, 81, 121, 161, 162, 167, 168, 183, 225, 229, 230, 233, 234, 322], "multi": 18, "accept": 18, "forward": 18, "x": [18, 74, 78, 88, 89, 90, 92, 100, 322], "overridden": 18, "subclass": 18, "although": 18, "recip": 18, "pass": 18, "need": [18, 108, 205, 321], "within": 18, "instanc": [18, 158, 159, 162, 164, 165, 166, 168], "afterward": 18, "instead": [18, 321], "sinc": [18, 33, 34, 321, 322], "former": 18, "take": [18, 321], "care": 18, "run": [18, 261, 317], "regist": 18, "hook": 18, "latter": 18, "silent": 18, "ignor": 18, "them": [18, 321, 322], "get_buff": 18, "exist": [18, 110, 111, 190], "throw": 18, "error": [18, 321], "docstr": 18, "get_submodul": 18, "more": [18, 317, 321, 322], "explan": 18, "": [18, 72, 266, 321, 322], "how": [18, 317, 321], "correctli": 18, "fulli": [18, 26], "qualifi": 18, "look": 18, "referenc": 18, "rais": 18, "attributeerror": 18, "If": [18, 108, 211, 322], "refer": 18, "invalid": 18, "path": [18, 41, 43, 75, 182, 195], "resolv": [18, 321], "someth": 18, "get_extra_st": 18, "state_dict": 18, "correspond": [18, 158, 159, 162, 164, 165, 166, 168], "set_extra_st": 18, "store": [18, 27, 108, 320, 321], "when": [18, 35, 121, 321, 322], "build": 18, "note": [18, 322], "pickleabl": 18, "ensur": 18, "work": [18, 318], "serial": [18, 158, 159, 162, 164, 165, 166, 168], "we": [18, 33, 34, 108, 321, 322], "backward": 18, "compat": 18, "guarante": 18, "other": [18, 26, 321], "break": 18, "pickl": 18, "form": [18, 320, 321], "chang": [18, 162, 168], "get_paramet": 18, "For": [18, 322], "let": 18, "sai": 18, "have": [18, 108, 321, 322], "A": [18, 27, 74, 81, 158, 159, 161, 162, 164, 165, 167, 168, 193, 194, 198, 202, 249, 317], "net_b": 18, "net_c": 18, "conv": 18, "conv2d": 18, "16": 18, "33": 18, "kernel_s": 18, "3": [18, 121, 251, 253, 254, 256, 257, 317, 321, 322], "stride": 18, "100": [18, 248], "200": 18, "diagram": 18, "show": [18, 230, 231, 234, 235, 253, 254, 256, 257, 322], "nest": 18, "which": [18, 158, 159, 162, 164, 165, 166, 168, 318, 320, 321, 322], "itself": 18, "two": [18, 74, 96, 322], "check": [18, 35, 74, 84, 86, 87, 91, 92, 93, 103, 108, 195, 210, 321, 322], "whether": [18, 26, 86, 158, 159, 162, 164, 165, 166, 168], "would": [18, 321], "runtim": 18, "bound": [18, 33, 34, 35, 37, 76], "degre": 18, "queri": 18, "against": 18, "named_modul": 18, "achiev": [18, 321], "same": [18, 26, 38, 321, 322], "result": [18, 108, 193, 320], "o": [18, 321], "n": [18, 86, 128, 147, 148, 169, 170, 171, 172, 173, 174, 322], "number": [18, 35, 89, 121, 322], "transit": [18, 27, 40, 41, 42, 43, 49, 50, 322], "simpl": [18, 202, 321], "some": [18, 205, 210, 217, 321, 322], "alwai": [18, 33, 34, 89], "abov": 18, "half": 18, "ipu": 18, "argument": [18, 321], "load_state_dict": 18, "strict": [18, 26], "its": [18, 158, 164], "descend": 18, "kei": [18, 27], "must": [18, 202], "match": 18, "dict": [18, 27, 29, 41, 43, 51, 52, 53, 64, 71, 76, 77, 86, 102, 108, 140, 141, 142, 143, 144, 158, 159, 162, 164, 165, 166, 168, 190, 194, 195, 197, 204, 215, 216], "persist": 18, "strictli": 18, "enforc": 18, "default": [18, 322], "namedtupl": 18, "missing_kei": 18, "unexpected_kei": 18, "field": [18, 70], "miss": [18, 103, 317], "unexpect": 18, "runtimeerror": 18, "network": 18, "duplic": 18, "onc": [18, 321], "In": [18, 321], "l": [18, 30, 79, 209], "idx": [18, 59, 61], "enumer": [18, 203], "named_buff": 18, "prefix": [18, 26], "prepend": 18, "running_var": 18, "named_children": 18, "conv4": 18, "conv5": 18, "memo": 18, "remove_dupl": 18, "alreadi": [18, 103, 108], "remov": 18, "named_paramet": 18, "param": [18, 81, 89, 95, 103], "register_backward_hook": 18, "removablehandl": 18, "deprec": 18, "favor": 18, "register_full_backward_hook": 18, "futur": 18, "version": [18, 317], "util": 18, "handl": [18, 108], "register_buff": 18, "consid": [18, 321], "running_mean": 18, "part": [18, 321], "save": [18, 26], "alongsid": 18, "non": 18, "oper": 18, "zero": 18, "num_featur": 18, "register_forward_hook": 18, "after": [18, 38], "output": [18, 76, 77, 86, 183, 186, 222, 237, 321], "It": [18, 225, 229, 230, 231, 233, 234, 235, 253, 254, 256, 257, 322], "signatur": 18, "input": [18, 108, 321], "posit": [18, 95, 158, 159, 162, 164, 165, 166, 168, 322], "keyword": 18, "won": 18, "inplac": 18, "register_forward_pre_hook": 18, "pre": [18, 191, 192, 206], "invok": 18, "user": [18, 322], "either": [18, 35, 37, 89, 198], "valu": [18, 27, 34, 88, 108, 193, 194, 202, 203, 210, 322], "wrap": 18, "unless": [18, 321], "gradient": 18, "respect": 18, "grad_input": 18, "grad_output": 18, "new": [18, 87, 162, 168, 317, 321], "subsequ": 18, "kwarg": [18, 161, 167, 196, 269, 278, 286, 294, 295, 296, 308], "entri": 18, "technic": 18, "reason": 18, "receiv": 18, "view": 18, "similarli": 18, "caller": 18, "allow": [18, 321], "register_load_state_dict_post_hook": 18, "post": 18, "incompatible_kei": 18, "consist": [18, 86, 222, 237], "modif": 18, "expect": 18, "addit": [18, 321], "thrown": 18, "clearn": 18, "out": 18, "avoid": 18, "register_modul": 18, "alia": [18, 158, 159, 162, 164, 165, 166, 168], "register_paramet": 18, "requires_grad_": 18, "requires_grad": 18, "autograd": 18, "record": 18, "help": 18, "freez": 18, "finetun": 18, "individu": 18, "gan": 18, "found": [18, 317], "share_memori": 18, "share_memory_": 18, "destin": 18, "keep_var": 18, "dictionari": [18, 76, 77, 86], "whole": [18, 210], "averag": 18, "order": [18, 321], "howev": 18, "releas": 18, "pleas": 18, "design": 18, "end": [18, 147, 162, 164, 165, 166, 168, 171, 247, 321], "updat": [18, 103, 317], "ordereddict": 18, "creat": [18, 158, 159, 162, 164, 165, 166, 168, 317, 318], "compos": 18, "detach": 18, "non_block": 18, "memory_format": 18, "channels_last": 18, "Its": [18, 322], "complex": 18, "integr": 18, "unchang": 18, "tri": 18, "convert": [18, 158, 159, 162, 164, 165, 166, 168, 321], "asynchron": 18, "host": 18, "possibl": [18, 321], "pin": 18, "memori": 18, "below": [18, 226, 321], "desir": [18, 88], "whose": 18, "format": [18, 183, 320], "4d": 18, "1913": 18, "3420": 18, "5113": 18, "2325": 18, "gpu1": 18, "1914": 18, "5112": 18, "2324": 18, "float16": 18, "cdoubl": 18, "3741": 18, "j": 18, "2382": 18, "5593": 18, "4443": 18, "complex128": 18, "ones": [18, 321], "6122": 18, "1150": 18, "to_empti": 18, "without": [18, 27, 108, 233, 322], "storag": 18, "dst_type": 18, "xpu": 18, "zero_grad": 18, "set_to_non": 18, "under": 18, "context": 18, "t_v_pair": [19, 140, 141, 142, 143, 144], "box_sid": [19, 140, 141, 142, 143, 144], "runmodel": 19, "lanemap_3d": [19, 126, 127, 140, 141, 142, 143, 144, 145, 146, 252], "root": [26, 66, 104, 229, 230, 231, 232, 233, 234, 235, 238, 241, 242, 245, 253, 254, 255, 256, 257, 322], "dump": [26, 195, 197, 207, 262, 320], "get_all_nod": 26, "is_equ": 26, "leav": [26, 183], "load": 26, "visual": [26, 318], "tol": 26, "reachabl": [26, 158, 159, 162, 164, 165, 166, 168, 318], "tree": [26, 29, 183, 188, 210], "close": 26, "enough": 26, "requir": [26, 317], "agent": [26, 27, 55, 56, 67, 68, 69, 70, 71, 108, 231, 235, 254, 257, 317, 318, 320, 321], "visualize_dot": 26, "filenam": [26, 186], "otyp": 26, "liter": 26, "png": 26, "svg": 26, "pdf": [26, 317], "jpg": 26, "font": 26, "doesn": [26, 321], "extens": 26, "dot": 26, "trace": [27, 38, 42, 105, 229, 230, 231, 233, 234, 235, 253, 254, 256, 257, 320, 322], "height": 27, "assert_hit": [27, 320], "start_tim": [27, 320], "ndigit": 27, "10": [27, 224], "simtrac": [27, 320], "contin": [27, 108], "execut": [27, 321], "system": [27, 321], "happen": [27, 321], "from_dict": 27, "get_mod": 27, "get_track": 27, "to_dict": 27, "c1": 28, "c2": 28, "mix": 28, "analysistre": [29, 64, 102, 229, 230, 231, 233, 234, 235, 253, 254, 256, 257], "item": [30, 184], "training_trac": [32, 36], "initial_radii": [32, 36], "lower": [33, 34, 35, 37], "upper": [33, 34, 35, 37, 76], "calcul": [33, 34, 35, 85, 103], "center": [33, 80, 84, 91, 93, 95, 96, 121, 159, 165, 172, 173, 174, 322], "support": [33, 34, 37, 321], "assu": [33, 34], "lowerbound": [33, 34], "upperbound": [33, 34], "delta": [33, 34, 76], "mode_label": [35, 103], "initial_set": [35, 57, 58, 103], "sim_func": [35, 103], "bloating_method": 35, "kvalu": [35, 103], "sim_trace_num": [35, 103], "guard_check": [35, 103], "guard_str": [35, 103], "reach": 35, "tube": [35, 44, 103, 246], "determin": [35, 162, 168, 321, 322], "bloat": [35, 103], "global": 35, "pw": 35, "discrep": 35, "core": 35, "guard": [35, 67, 113, 115, 321], "pwglobal": 36, "arrai": 36, "seed": [37, 97], "pick": 37, "random": 37, "trim": 38, "length": [38, 84, 91, 93, 95, 96, 121], "gener": [38, 202, 320, 321, 322], "assert": [40, 42, 195, 198, 204], "cachedreachtran": 40, "node_id": [40, 42], "dest": 41, "reset": [41, 113, 115], "reset_idx": 41, "parser": [41, 43, 318], "modepath": [41, 43, 195], "numpi": 42, "cachedtransit": 42, "disc": [43, 67, 71, 205, 270, 271, 273, 274, 279, 280, 282, 283, 287, 288, 290, 291, 297, 298, 299, 300, 302, 303, 304, 305, 309, 310, 312, 313], "cont": [43, 67, 71, 205, 270, 271, 279, 280, 287, 288, 297, 298, 299, 300, 309, 310], "add_tub": [45, 47], "check_hit": [45, 46, 47], "get_cached_init": [45, 46], "iter_tre": [45, 46], "query_cont": [45, 46], "add_seg": 46, "agent_id": [49, 50, 103, 231, 235, 241, 242, 245, 254, 257], "transit_ag": [49, 50], "trans_ind": [49, 50], "b": [51, 52, 74, 78, 81, 98, 195, 239, 240, 241, 242, 245, 249], "old_ag": 53, "new_ag": 53, "cach": [53, 103], "cachedseg": 53, "uncertain_var_bound": [57, 58], "decomposit": [57, 58], "expr_func": [59, 61], "jac_func": [59, 61], "var_rang": [59, 60, 61, 62], "num_var": [59, 61], "expr": [60, 62, 190, 191, 196, 198, 201, 202, 206, 212, 214], "run_num": [64, 102], "past_run": [64, 102], "analysis_tre": [64, 102, 257], "sensor": [64, 102, 318, 321], "basesensor": [64, 102], "agent_dict": [64, 102], "config": [65, 103, 158, 159, 162, 164, 165, 166, 168, 262, 263], "get_transition_simul": 65, "get_transition_simulate_simpl": 65, "proc_result": [65, 103], "simulate_on": 65, "simulate_simpl": [65, 263], "max_height": [66, 104], "inp": [68, 69], "dl": [68, 69], "ego_ty_nam": 71, "track_map": [71, 108], "sequenc": [74, 84, 88, 91, 92, 94, 96, 159, 162, 165, 166, 168], "displacement_a": 74, "displacement_b": 74, "polygon": [74, 94], "intersect": [74, 81, 96], "http": [74, 81], "www": 74, "codeproject": 74, "com": [74, 81], "articl": 74, "15573": 74, "collis": 74, "detect": 74, "y": [74, 76, 77, 87, 88, 92, 322], "veloc": 74, "translat": 74, "vector": 74, "data": [76, 77, 86, 109, 225, 229, 230, 231, 233, 234, 235, 236, 239, 252, 253, 254, 256, 257, 258, 322], "lambda_": 76, "1e": 76, "05": 76, "sigma": [76, 87], "param_bound": 76, "confid": [76, 77, 86, 87], "ellipsoid": [76, 86, 87], "theta": [76, 77, 86, 87, 164, 165, 166, 168, 172], "where": [76, 77, 322], "phi": [76, 77, 87], "featur": [76, 77, 86, 87], "phi_0": [76, 77, 86], "phi_n": [76, 77, 86], "y_0": [76, 77, 86], "y_n": [76, 77, 86], "lambda": [76, 79, 194, 195, 204, 215, 216, 321], "l2": 76, "regular": 76, "level": [76, 162, 168, 183, 226], "nois": [76, 87], "covari": [76, 87], "norm": 76, "estim": [76, 77, 87], "gramian": [76, 77, 87], "matrix": [76, 77, 87], "g_n_lambda": [76, 77], "radiu": [76, 77, 80, 87, 159, 165, 173], "beta_n": [76, 77], "parameter_box": [77, 86], "polytop": 77, "box": [77, 86, 318], "theta_min": [77, 86], "theta_max": [77, 86], "vertic": 77, "f": [79, 184, 209], "rect": [81, 95, 97, 105], "segment": 81, "rectangl": [81, 92, 93, 95, 96, 322], "math": 81, "stackexchang": 81, "2788041": 81, "r": [81, 172, 174, 317], "q": 81, "c": [81, 98, 213], "d": [81, 272, 275, 281, 284, 289, 292, 301, 306, 311, 314], "distanc": [81, 85, 121, 158, 159, 162, 164, 165, 166, 168], "rq": 81, "abcd": 81, "durat": [82, 224], "timer": 82, "cl": 83, "rect1": [84, 96], "rect2": [84, 96], "corner": [84, 95], "insid": [84, 91, 92, 93], "width": [84, 91, 93, 95, 96, 121, 158, 159, 162, 164, 165, 166, 168, 244], "angl": [84, 91, 93, 95, 96], "min_a": 85, "max_a": 85, "min_b": 85, "max_b": 85, "mina": 85, "maxa": 85, "minb": 85, "maxb": 85, "neg": 85, "interv": [85, 108], "overlap": 85, "dataset": 86, "last": 86, "observ": [86, 87], "obtain": [86, 321], "first": 86, "beta": 87, "valid": [87, 321], "accord": [87, 183, 322], "v": [88, 204], "rang": 88, "num_bin": 89, "size_bin": 89, "split": 89, "bin": 89, "even": 89, "distribut": 89, "sum": 89, "equal": [89, 195], "total": 89, "ep": 90, "01": 90, "ellips": 91, "main": [91, 222, 237], "axi": [91, 94], "big": 91, "small": 91, "rect_min": 92, "rect_max": 92, "x_min": 92, "y_min": 92, "x_max": 92, "y_max": 92, "rotat": [93, 96], "rad": [93, 158, 159, 162, 164, 165, 166, 168], "include_midpoint": 95, "include_cent": 95, "middl": 95, "edg": [95, 113, 115, 245, 246, 249], "do": [96, 108, 321], "init_seg_length": [102, 263, 264], "reachability_method": [102, 263, 264], "apply_cont_var_updat": 103, "apply_reset": 103, "compute_full_reachtub": 103, "compute_full_reachtube_step": 103, "get_transition_verify_opt": 103, "calculate_full_bloated_tube_simpl": 103, "cached_tube_info": 103, "increment": [103, 263, 264], "combine_seg_length": 103, "1000": [103, 263, 264], "get": [103, 158, 159, 162, 164, 165, 166, 168, 318], "full": [103, 322], "noncach": 103, "tba": 103, "check_cache_bloated_tub": 103, "combin": [103, 105, 193, 322], "seg": 103, "index": [103, 318], "reachtub": [105, 222, 237, 318, 321, 322], "guard_list": 108, "guard_idx": 108, "evaluate_guard": 108, "evaluate_guard_cont": 108, "parse_any_al": 108, "parse_any_all_new": 108, "unroll_any_al": 108, "unroll_any_all_new": 108, "evaluate_guard_disc": 108, "discrete_variable_dict": 108, "continuous_variable_dict": 108, "involv": 108, "discret": [108, 321], "variabl": [108, 113, 205, 321], "evaluate_guard_hybrid": 108, "atom": 108, "continu": [108, 318, 321], "hybrid": [108, 318], "especi": 108, "want": 108, "arithmet": 108, "replac": 108, "temp": 108, "constant": 108, "By": 108, "now": 108, "becom": 108, "what": 108, "generate_z3_express": 108, "automat": 108, "satisfi": [108, 321], "is_contain": 108, "th": 108, "en": 108, "unsatisfi": 108, "val": [109, 111, 194, 201, 219, 228, 270, 271, 272, 273, 274, 275, 279, 280, 281, 282, 283, 284, 287, 288, 289, 290, 291, 292, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 309, 310, 311, 312, 313, 314], "mode_guard": 109, "old_nod": 110, "new_nod": 110, "nodetransform": [110, 111, 190], "visit_const": [110, 111, 190], "visit_reduct": [110, 111], "generic_visit": [110, 111, 190], "node": [110, 111, 190, 195, 207, 211, 218, 320, 322], "explicit": [110, 111, 190], "visitor": [110, 111, 190], "visit": [110, 111, 190], "visit_attribut": 111, "visit_nam": 111, "discrete_vari": [113, 115], "generate_automaton_json": [113, 115], "input_vari": 115, "output_vari": 115, "internal_vari": 115, "hybridautomaton": 115, "20": [121, 159, 162, 165, 166, 168, 244], "300": 121, "cross": 121, "curv": [121, 158, 164], "straight": [121, 162, 168], "meet": 121, "road": [121, 158, 164, 180], "outsid": 121, "per": [121, 321], "north": 121, "add_lan": [121, 123, 124, 125, 126, 127, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 154, 156], "get_all_speed_limit": [121, 123, 124, 125, 130, 131, 133, 134, 135, 136, 137, 138, 154], "get_altitud": [121, 123, 124, 125, 130, 131, 133, 134, 135, 136, 137, 138, 152, 154], "get_lane_head": [121, 123, 124, 125, 130, 131, 133, 134, 135, 136, 137, 138, 154], "get_lane_seg": [121, 123, 124, 125, 126, 127, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 150, 152, 154, 156], "get_lane_width": [121, 123, 124, 125, 126, 127, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 150, 152, 154, 156], "get_lateral_dist": [121, 123, 124, 125, 126, 127, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 150, 152, 154, 156], "get_longitudinal_posit": [121, 123, 124, 125, 126, 127, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 150, 152, 154, 156], "get_phys_lan": [121, 123, 124, 125, 130, 131, 133, 134, 135, 136, 137, 138, 154], "get_speed_limit": [121, 123, 124, 125, 130, 131, 133, 134, 135, 136, 137, 138, 150, 154], "h": [121, 123, 124, 125, 126, 127, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 154, 156], "h_exist": [121, 123, 124, 125, 126, 127, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 154, 156], "lane_geometri": [121, 123, 124, 125, 126, 127, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 154, 156], "left_lan": [124, 126, 127, 135, 140, 141, 142, 143, 144, 145, 146, 156], "right_lan": [124, 126, 127, 135, 140, 141, 142, 143, 144, 145, 146, 156], "altitud": [126, 127, 140, 141, 142, 143, 144, 145, 146, 156, 164, 165, 166, 168], "check_guard_box": [126, 127, 140, 141, 142, 143, 144, 145, 146, 156], "down_lan": [126, 127, 140, 141, 142, 143, 144, 145, 146, 156], "g_func": [126, 127, 140, 141, 142, 143, 144, 145, 146, 156], "get_curr_waypoint": [126, 127, 140, 141, 142, 143, 144, 145, 146, 156], "get_l_r_theta": [126, 127, 140, 141, 142, 143, 144, 145, 146, 152, 156], "get_next_point": [126, 127, 140, 141, 142, 143, 144, 145, 146, 156], "get_theta_angl": [126, 127, 140, 141, 142, 143, 144, 145, 146, 152, 156], "get_time_limit": [126, 127, 140, 141, 142, 143, 144, 145, 146, 156], "h_func": [126, 127, 140, 141, 142, 143, 144, 145, 146, 156], "has_down": [126, 127, 140, 141, 142, 143, 144, 145, 146, 156], "has_left": [126, 127, 140, 141, 142, 143, 144, 145, 146, 156], "has_right": [126, 127, 140, 141, 142, 143, 144, 145, 146, 156], "has_up": [126, 127, 140, 141, 142, 143, 144, 145, 146, 156], "pair_lan": [126, 127, 140, 141, 142, 143, 144, 145, 146, 156], "trans_func": [126, 127, 140, 141, 142, 143, 144, 145, 146, 156], "up_lan": [126, 127, 140, 141, 142, 143, 144, 145, 146, 156], "h_exist_func": 127, "start": [128, 147, 148, 162, 164, 165, 166, 168, 171, 247, 318], "len": [128, 148], "phase": [147, 171], "seg_list": [150, 152], "abstractlan": [150, 159, 162], "speed_limit": [150, 159, 162, 165, 166, 168], "get_head": 150, "abstractlane_3d": [152, 165, 168], "plot": [152, 262, 322], "lane_seg_list": [154, 156], "lane_3d": 156, "describ": [158, 164, 318], "central": [158, 164], "after_end": [158, 159, 162, 164, 165, 166, 168], "l1": [158, 159, 162, 164, 165, 166, 168], "distance_with_head": [158, 159, 162, 164, 165, 166, 168], "head": [158, 159, 162, 164, 165, 166, 168], "heading_weight": [158, 159, 162, 164, 165, 166, 168], "classmethod": [158, 159, 162, 164, 165, 166, 168], "from_config": [158, 159, 162, 164, 165, 166, 168], "json": [158, 159, 162, 164, 165, 166, 168, 320], "heading_at": [158, 159, 162, 164, 165, 166, 168], "longitudin": [158, 159, 162, 164, 165, 166, 168], "coordin": [158, 159, 162, 164, 165, 166, 168, 322], "is_reachable_from": [158, 159, 162, 164, 165, 166, 168], "world": [158, 159, 162, 164, 165, 166, 168], "local_coordin": [158, 159, 162, 164, 165, 166, 168], "later": [158, 159, 162, 164, 165, 166, 168, 317, 321], "metaclass__": [158, 159, 162, 164, 165, 166, 168], "abcmeta": [158, 159, 162, 164, 165, 166, 168], "on_lan": [158, 159, 162, 164, 165, 166, 168], "margin": [158, 159, 162, 164, 165, 166, 168, 322], "known": [158, 159, 162, 164, 165, 166, 168], "supplementari": [158, 159, 162, 164, 165, 166, 168], "around": [158, 159, 162, 164, 165, 166, 168], "to_config": [158, 159, 162, 164, 165, 166, 168], "write": [158, 159, 162, 164, 165, 166, 168, 183], "width_at": [158, 159, 162, 164, 165, 166, 168], "start_phas": [159, 165], "end_phas": [159, 165], "clockwis": 159, "4": [159, 162, 165, 166, 168, 226], "line_typ": [159, 162, 165, 166, 168], "linetyp": [159, 162], "forbidden": [159, 162, 165, 166, 168], "prioriti": [159, 162, 165, 166, 168], "go": [159, 162, 165, 168, 225, 235, 236, 322], "circl": [159, 165], "arc": [159, 165], "lane_paramet": 160, "get_geometri": 160, "side": [161, 162, 167, 168, 176], "who": [162, 168], "right": [162, 168], "wai": [162, 168, 321, 322], "avg": [164, 165, 166, 168], "z": [164, 165, 166, 168], "norm_vec": [165, 166], "right_rot": [165, 166, 171, 172, 173, 174], "linetype_3d": [165, 166, 168], "get_lane_cent": [165, 166, 168], "get_outer_cent": [165, 166], "get_sample_point": [165, 166, 168], "get_start_end_tang": [165, 166], "get_tang": [165, 166, 168], "delta_phas": 166, "circularlane_3d_v1": 166, "drive_way_matrix": 177, "width_2d": 177, "usag": [182, 322], "unpars": 182, "py": [182, 317], "sourc": [182, 183, 322], "_io": [183, 186], "textiowrapp": [183, 186], "stdout": [183, 186], "w": [183, 186], "encod": [183, 186], "utf": [183, 186], "travers": 183, "ast": [183, 194, 195, 202, 204, 215, 216, 217, 218, 219, 321], "syntax": 183, "origin": 183, "disregard": 183, "sy": 183, "dispatch": 183, "_t": 183, "enter": 183, "increas": 183, "indent": 183, "fill": [183, 322], "text": 183, "piec": 183, "decreas": 183, "append": [183, 321], "inter": 184, "seq": 184, "visit_arg": 190, "cond": [191, 192, 194, 201, 206], "_ast": [191, 201, 204, 206], "label": [191, 192, 206, 322], "elem": 193, "condvalcas": [193, 321], "customir": [193, 194, 202], "case": [193, 194, 317, 321], "set_field": [193, 194, 196, 202], "condval": [194, 195, 204, 215, 216, 321], "reduct": [194, 195, 204, 215, 216], "scopevalu": [194, 195, 204, 215, 216], "implicitli": [194, 321], "ed": [194, 198, 321], "togeth": [194, 321], "lambdaarg": [195, 198], "compiledassert": 195, "asserts_veri": 195, "state_def": [195, 197], "statedef": [195, 197], "mode_def": [195, 197], "modedef": [195, 197], "controller_cod": [195, 197], "empti": [195, 198], "from_env": 195, "pars": [195, 197], "ir_eq": 195, "ir": 195, "factori": [197, 200, 204, 205, 206], "scope": [197, 215, 321], "scopelevel": 197, "add_assert": 197, "add_hol": 197, "dump_scop": 197, "lookup": 197, "pop": 197, "push": 197, "trans_arg": 197, "bodi": [198, 321], "_assert": [198, 204, 212], "closur": 198, "come": [198, 317], "from_ast": 198, "typ": 199, "nonetyp": [199, 206], "is_list": 199, "cond_veri": 201, "var": 201, "val_veri": 201, "op": 202, "reductiontyp": 202, "claus": 202, "enum": [203, 321], "union": [204, 206], "forwardref": 204, "disc_typ": 205, "static_typ": 205, "verif": [205, 322], "all_var": 205, "test": [212, 214, 215, 216, 321], "orig": [212, 216], "env": [214, 215, 218, 219], "substitut": [217, 321], "dryvr": [222, 237, 263, 264], "num_dim": [223, 251], "x_dim": [223, 229, 230, 231, 233, 234, 235, 239, 241, 242, 245, 246, 251, 253, 254, 256, 257, 322], "y_dim": [223, 229, 230, 231, 233, 234, 235, 245, 246, 251, 253, 254, 256, 257, 322], "print_dim_list": [223, 229, 230, 231, 233, 234, 235, 251, 253, 254, 256, 257, 322], "color": [225, 231, 235, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 252, 254, 257, 322], "rgba": [225, 252], "5": 225, "fig": [225, 229, 230, 231, 233, 234, 235, 236, 238, 239, 240, 241, 242, 252, 253, 254, 256, 257, 258, 322], "figur": [225, 229, 230, 231, 233, 234, 235, 236, 252, 253, 254, 256, 257, 258, 322], "layout": [225, 229, 230, 231, 233, 234, 235, 236, 252, 253, 254, 256, 257, 258], "templat": [225, 229, 230, 231, 233, 234, 235, 236, 252, 253, 254, 256, 257, 258], "fill_typ": [225, 252], "draw": [225, 322], "These": [226, 321], "high": 226, "recommend": 226, "veh_mod": 227, "analysistreenod": [229, 230, 231, 233, 234, 235, 253, 254, 256, 257], "map_typ": [229, 230, 233, 234, 253, 256, 322], "scale_typ": [229, 230, 233, 234, 322], "label_mod": [229, 230, 233, 234, 322], "sample_r": [229, 230, 232, 233, 234, 253, 255, 256, 322], "speed_rat": [229, 233, 322], "combine_rect": [229, 230, 231, 253, 254, 322], "give": [229, 233], "anim": [229, 233, 322], "verfic": [229, 230, 231, 253, 254], "plot_color": [230, 231], "anime_mod": [233, 322], "normal": [233, 321, 322], "full_trac": [233, 322], "trail": [233, 322], "faster": 233, "y_dim_list": [239, 241, 242], "x_lim": [239, 240, 241, 242], "y_lim": [239, 240, 241, 242], "k": 244, "ax": [244, 245, 246, 247, 248, 249], "num": [244, 322], "z_dim": [245, 246, 251, 253, 254, 256, 257], "blue": [247, 248], "line_width": 247, "point_siz": 248, "red": 249, "tran": 249, "outlin": [252, 253, 256], "xrang": 253, "yrang": 253, "zrang": 253, "analysi": [257, 318, 321], "argv": 261, "kw": 261, "compare_run": 261, "replace_scenario": 261, "report": [261, 321], "swap_dl": 261, "scenarioconfig": [262, 263], "rest": 262, "compar": 262, "sim": 262, "disp": 262, "from_arg": 262, "unsafe_continu": [263, 264], "parallel_sim_ahead": [263, 264], "parallel_ver_ahead": [263, 264], "parallel": [263, 264, 265], "try_loc": [263, 264], "add_ag": 263, "check_init": 263, "cleanup_cach": 263, "set_init": 263, "set_init_singl": 263, "set_map": 263, "set_sensor": 263, "simulate_multi": 263, "update_config": 263, "verifi": [263, 318], "thing": [270, 271, 272, 273, 274, 275, 279, 280, 281, 282, 283, 284, 287, 288, 289, 290, 291, 292, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 309, 310, 311, 312, 313, 314, 321], "cont_var": [270, 271, 273, 274, 297, 299, 302, 304], "disc_var": [270, 271, 273, 274, 297, 299, 302, 304], "stat_var": [270, 271, 273, 274, 297, 299, 302, 304], "attr": [272, 275, 281, 284, 289, 292, 301, 306, 311, 314], "cnt": [273, 274, 282, 283, 290, 291, 302, 303, 304, 305, 312, 313], "sens": [278, 286, 294, 295, 308], "katherin": 316, "braught": 316, "sayan": 316, "mitra": 316, "loui": 316, "sungwoo": 316, "cho": 316, "keyi": 316, "shen": 316, "yangg": 316, "li": 316, "haoq": 316, "zhu": 316, "packag": 317, "instal": 317, "pip": 317, "depend": 317, "python3": 317, "anyth": 317, "txt": 317, "interact": [317, 318], "tutori": [317, 322], "ipynb": 317, "jupyt": 317, "notebook": 317, "demo": [317, 321], "folder": 317, "ball_bounc": 317, "read": 317, "comment": 317, "learn": 317, "scenario": [317, 318, 320, 322], "librari": [318, 322], "decis": 318, "logic": 318, "written": 318, "express": [318, 321], "subset": 318, "evolut": 318, "black": 318, "port": 318, "across": 318, "scratch": 318, "import": [318, 321], "opendr": 318, "goal": 318, "principl": 318, "limit": [318, 322], "common": 318, "paramter": 318, "3d": 318, "contributor": 318, "search": 318, "page": 318, "parent": 320, "agent_nam": 320, "x1": 320, "x2": 320, "x3": 320, "primari": 321, "easier": 321, "backend": 321, "sat": 321, "solver": 321, "z3": 321, "activ": 321, "u": 321, "directli": [321, 322], "walk": 321, "interpret": 321, "environ": 321, "keep": 321, "track": 321, "themselv": 321, "done": 321, "larger": 321, "essenti": 321, "augment": 321, "explain": 321, "builtin": 321, "than": 321, "mention": 321, "process": 321, "treat": [321, 322], "hole": 321, "symbol": 321, "know": 321, "noth": 321, "about": 321, "preserv": 321, "expand": 321, "caus": 321, "simplifi": 321, "introduc": 321, "compon": 321, "met": 321, "taken": 321, "assign": 321, "statement": 321, "somewher": 321, "multipl": [321, 322], "branch": 321, "merg": 321, "simpli": 321, "els": 321, "invert": 321, "due": [321, 322], "uncertainti": 321, "usual": 321, "semant": 321, "snippet": 321, "42": 321, "could": 321, "whenev": 321, "trigger": 321, "except": 321, "necessari": 321, "arbitrari": 321, "loop": 321, "hard": 321, "flow": 321, "analyz": 321, "comprehens": 321, "much": [321, 322], "better": 321, "encount": 321, "other_st": 321, "ll": 321, "unrol": 321, "back": 321, "veri": 321, "definit": 321, "basic": 321, "No": 321, "specif": [321, 322], "unusu": 321, "infer": 321, "declar": 321, "assum": 321, "stem": 321, "vers": 322, "plotli": 322, "open": 322, "graph": 322, "digit": 322, "step": 322, "possibli": 322, "branc": 322, "plotter": 322, "api": 322, "occur": 322, "remain": 322, "omit": 322, "background": 322, "graph_object": 322, "dimens": 322, "shown": 322, "indirectli": 322, "mous": 322, "hover": 322, "And": 322, "drawn": 322, "semitranspar": 322, "scale": 322, "axis": 322, "appropri": 322, "displai": 322, "indic": 322, "too": 322, "respons": 322, "slow": 322, "integ": 322, "sampl": 322, "provoid": 322, "improv": 322, "auto": 322, "up": 322, "rate": 322, "mayb": 322, "here": 322, "mean": 322}, "objects": {"": [[0, 0, 0, "-", "verse"]], "verse": [[1, 0, 0, "-", "agents"], [24, 0, 0, "-", "analysis"], [106, 0, 0, "-", "automaton"], [118, 0, 0, "-", "map"], [181, 0, 0, "-", "parser"], [221, 0, 0, "-", "plotter"], [259, 0, 0, "-", "scenario"], [267, 0, 0, "-", "sensor"]], "verse.agents": [[2, 0, 0, "-", "base_agent"], [4, 0, 0, "-", "example_agent"]], "verse.agents.base_agent": [[3, 1, 1, "", "BaseAgent"]], "verse.agents.base_agent.BaseAgent": [[3, 2, 1, "", "TC_simulate"], [3, 2, 1, "", "__init__"]], "verse.agents.example_agent": [[5, 0, 0, "-", "ball_agent"], [7, 0, 0, "-", "car_agent"], [13, 0, 0, "-", "origin_agent"], [17, 0, 0, "-", "quadrotor_agent"], [20, 0, 0, "-", "robot_agent"], [22, 0, 0, "-", "sign_agent"]], "verse.agents.example_agent.ball_agent": [[6, 1, 1, "", "BallAgent"]], "verse.agents.example_agent.ball_agent.BallAgent": [[6, 2, 1, "", "TC_simulate"], [6, 2, 1, "", "__init__"], [6, 2, 1, "", "dynamic"]], "verse.agents.example_agent.car_agent": [[8, 1, 1, "", "CarAgent"], [9, 1, 1, "", "CarAgentDebounced"], [10, 1, 1, "", "CarAgentSwitch2"], [11, 1, 1, "", "NPCAgent"], [12, 1, 1, "", "WeirdCarAgent"]], "verse.agents.example_agent.car_agent.CarAgent": [[8, 2, 1, "", "TC_simulate"], [8, 2, 1, "", "__init__"]], "verse.agents.example_agent.car_agent.CarAgentDebounced": [[9, 2, 1, "", "TC_simulate"], [9, 2, 1, "", "__init__"]], "verse.agents.example_agent.car_agent.CarAgentSwitch2": [[10, 2, 1, "", "TC_simulate"], [10, 2, 1, "", "__init__"]], "verse.agents.example_agent.car_agent.NPCAgent": [[11, 2, 1, "", "TC_simulate"], [11, 2, 1, "", "__init__"], [11, 2, 1, "", "action_handler"]], "verse.agents.example_agent.car_agent.WeirdCarAgent": [[12, 2, 1, "", "TC_simulate"], [12, 2, 1, "", "__init__"]], "verse.agents.example_agent.origin_agent": [[14, 1, 1, "", "craft_agent"], [15, 1, 1, "", "thermo_agent"], [16, 1, 1, "", "vanderpol_agent"]], "verse.agents.example_agent.origin_agent.craft_agent": [[14, 2, 1, "", "TC_simulate"], [14, 2, 1, "", "__init__"]], "verse.agents.example_agent.origin_agent.thermo_agent": [[15, 2, 1, "", "TC_simulate"], [15, 2, 1, "", "__init__"]], "verse.agents.example_agent.origin_agent.vanderpol_agent": [[16, 2, 1, "", "TC_simulate"], [16, 2, 1, "", "__init__"]], "verse.agents.example_agent.quadrotor_agent": [[18, 1, 1, "", "FFNNC"], [19, 1, 1, "", "QuadrotorAgent"]], "verse.agents.example_agent.quadrotor_agent.FFNNC": [[18, 2, 1, "", "__init__"], [18, 2, 1, "", "add_module"], [18, 2, 1, "", "apply"], [18, 2, 1, "", "bfloat16"], [18, 2, 1, "", "buffers"], [18, 2, 1, "", "children"], [18, 2, 1, "", "cpu"], [18, 2, 1, "", "cuda"], [18, 2, 1, "", "double"], [18, 2, 1, "", "eval"], [18, 2, 1, "", "extra_repr"], [18, 2, 1, "", "float"], [18, 2, 1, "", "forward"], [18, 2, 1, "", "get_buffer"], [18, 2, 1, "", "get_extra_state"], [18, 2, 1, "", "get_parameter"], [18, 2, 1, "", "get_submodule"], [18, 2, 1, "", "half"], [18, 2, 1, "", "ipu"], [18, 2, 1, "", "load_state_dict"], [18, 2, 1, "", "modules"], [18, 2, 1, "", "named_buffers"], [18, 2, 1, "", "named_children"], [18, 2, 1, "", "named_modules"], [18, 2, 1, "", "named_parameters"], [18, 2, 1, "", "parameters"], [18, 2, 1, "", "register_backward_hook"], [18, 2, 1, "", "register_buffer"], [18, 2, 1, "", "register_forward_hook"], [18, 2, 1, "", "register_forward_pre_hook"], [18, 2, 1, "", "register_full_backward_hook"], [18, 2, 1, "", "register_load_state_dict_post_hook"], [18, 2, 1, "", "register_module"], [18, 2, 1, "", "register_parameter"], [18, 2, 1, "", "requires_grad_"], [18, 2, 1, "", "set_extra_state"], [18, 2, 1, "", "share_memory"], [18, 2, 1, "", "state_dict"], [18, 2, 1, "", "to"], [18, 2, 1, "", "to_empty"], [18, 2, 1, "", "train"], [18, 2, 1, "", "type"], [18, 2, 1, "", "xpu"], [18, 2, 1, "", "zero_grad"]], "verse.agents.example_agent.quadrotor_agent.QuadrotorAgent": [[19, 2, 1, "", "TC_simulate"], [19, 2, 1, "", "__init__"]], "verse.agents.example_agent.robot_agent": [[21, 1, 1, "", "RobotAgent"]], "verse.agents.example_agent.robot_agent.RobotAgent": [[21, 2, 1, "", "TC_simulate"], [21, 2, 1, "", "__init__"]], "verse.agents.example_agent.sign_agent": [[23, 1, 1, "", "SignAgent"]], "verse.agents.example_agent.sign_agent.SignAgent": [[23, 2, 1, "", "TC_simulate"], [23, 2, 1, "", "__init__"]], "verse.analysis": [[25, 0, 0, "-", "analysis_tree"], [31, 0, 0, "-", "dryvr"], [39, 0, 0, "-", "incremental"], [54, 0, 0, "-", "mixmonotone"], [63, 0, 0, "-", "simulator"], [73, 0, 0, "-", "utils"], [101, 0, 0, "-", "verifier"]], "verse.analysis.analysis_tree": [[26, 1, 1, "", "AnalysisTree"], [27, 1, 1, "", "AnalysisTreeNode"], [28, 4, 1, "", "color_interp"], [29, 4, 1, "", "first_transitions"], [30, 4, 1, "", "index_of"]], "verse.analysis.analysis_tree.AnalysisTree": [[26, 2, 1, "", "__init__"], [26, 2, 1, "", "contains"], [26, 2, 1, "", "visualize_dot"]], "verse.analysis.analysis_tree.AnalysisTreeNode": [[27, 2, 1, "", "__init__"], [27, 3, 1, "", "trace"]], "verse.analysis.dryvr": [[32, 4, 1, "", "all_sensitivities_calc"], [33, 4, 1, "", "calcCenterPoint"], [34, 4, 1, "", "calcDelta"], [35, 4, 1, "", "calc_bloated_tube"], [36, 4, 1, "", "get_reachtube_segment"], [37, 4, 1, "", "randomPoint"], [38, 4, 1, "", "trimTraces"]], "verse.analysis.incremental": [[40, 1, 1, "", "CachedRTTrans"], [41, 1, 1, "", "CachedReachTrans"], [42, 1, 1, "", "CachedSegment"], [43, 1, 1, "", "CachedTransition"], [44, 1, 1, "", "CachedTube"], [45, 1, 1, "", "ReachTubeCache"], [46, 1, 1, "", "SimTraceCache"], [47, 1, 1, "", "TubeCache"], [48, 4, 1, "", "combine_all"], [49, 4, 1, "", "convert_reach_trans"], [50, 4, 1, "", "convert_sim_trans"], [51, 4, 1, "", "reach_trans_suit"], [52, 4, 1, "", "sim_trans_suit"], [53, 4, 1, "", "to_simulate"]], "verse.analysis.incremental.CachedRTTrans": [[40, 2, 1, "", "__init__"]], "verse.analysis.incremental.CachedReachTrans": [[41, 2, 1, "", "__init__"]], "verse.analysis.incremental.CachedSegment": [[42, 2, 1, "", "__init__"]], "verse.analysis.incremental.CachedTransition": [[43, 2, 1, "", "__init__"]], "verse.analysis.incremental.CachedTube": [[44, 2, 1, "", "__init__"]], "verse.analysis.incremental.ReachTubeCache": [[45, 2, 1, "", "__init__"]], "verse.analysis.incremental.SimTraceCache": [[46, 2, 1, "", "__init__"]], "verse.analysis.incremental.TubeCache": [[47, 2, 1, "", "__init__"]], "verse.analysis.mixmonotone": [[55, 4, 1, "", "calculate_bloated_tube_mixmono_cont"], [56, 4, 1, "", "calculate_bloated_tube_mixmono_disc"], [57, 4, 1, "", "compute_reachtube_mixmono_cont"], [58, 4, 1, "", "compute_reachtube_mixmono_disc"], [59, 4, 1, "", "find_max"], [60, 4, 1, "", "find_max_symbolic"], [61, 4, 1, "", "find_min"], [62, 4, 1, "", "find_min_symbolic"]], "verse.analysis.simulator": [[64, 1, 1, "", "SimConsts"], [65, 1, 1, "", "Simulator"], [66, 4, 1, "", "checkHeight"], [67, 4, 1, "", "check_sim_transitions"], [68, 4, 1, "", "convertEnumToStr"], [69, 4, 1, "", "convertStrToEnum"], [70, 4, 1, "", "disc_field"], [71, 4, 1, "", "pack_env"], [72, 4, 1, "", "red"]], "verse.analysis.simulator.SimConsts": [[64, 2, 1, "", "__init__"]], "verse.analysis.simulator.Simulator": [[65, 2, 1, "", "__init__"]], "verse.analysis.utils": [[74, 4, 1, "", "are_polygons_intersecting"], [75, 4, 1, "", "class_from_path"], [76, 4, 1, "", "confidence_ellipsoid"], [77, 4, 1, "", "confidence_polytope"], [78, 4, 1, "", "constrain"], [79, 4, 1, "", "dedup"], [80, 4, 1, "", "distance_to_circle"], [81, 4, 1, "", "distance_to_rect"], [82, 4, 1, "", "do_every"], [83, 4, 1, "", "get_class_path"], [84, 4, 1, "", "has_corner_inside"], [85, 4, 1, "", "interval_distance"], [86, 4, 1, "", "is_consistent_dataset"], [87, 4, 1, "", "is_valid_observation"], [88, 4, 1, "", "lmap"], [89, 4, 1, "", "near_split"], [90, 4, 1, "", "not_zero"], [91, 4, 1, "", "point_in_ellipse"], [92, 4, 1, "", "point_in_rectangle"], [93, 4, 1, "", "point_in_rotated_rectangle"], [94, 4, 1, "", "project_polygon"], [95, 4, 1, "", "rect_corners"], [96, 4, 1, "", "rotated_rectangles_intersect"], [97, 4, 1, "", "sample_rect"], [98, 4, 1, "", "solve_trinom"], [99, 4, 1, "", "to_serializable"], [100, 4, 1, "", "wrap_to_pi"]], "verse.analysis.verifier": [[102, 1, 1, "", "ReachConsts"], [103, 1, 1, "", "Verifier"], [104, 4, 1, "", "checkHeight"], [105, 4, 1, "", "combine_rect"]], "verse.analysis.verifier.ReachConsts": [[102, 2, 1, "", "__init__"]], "verse.analysis.verifier.Verifier": [[103, 2, 1, "", "__init__"], [103, 2, 1, "", "calculate_full_bloated_tube_simple"], [103, 2, 1, "", "check_cache_bloated_tube"]], "verse.automaton": [[107, 0, 0, "-", "guard"], [112, 0, 0, "-", "hybrid_automaton"], [114, 0, 0, "-", "hybrid_io_automaton"], [116, 0, 0, "-", "reset"]], "verse.automaton.guard": [[108, 1, 1, "", "GuardExpressionAst"], [109, 1, 1, "", "LogicTreeNode"], [110, 1, 1, "", "NodeSubstituter"], [111, 1, 1, "", "ValueSubstituter"]], "verse.automaton.guard.GuardExpressionAst": [[108, 2, 1, "", "__init__"], [108, 2, 1, "", "evaluate_guard_disc"], [108, 2, 1, "", "evaluate_guard_hybrid"], [108, 2, 1, "", "generate_z3_expression"]], "verse.automaton.guard.LogicTreeNode": [[109, 2, 1, "", "__init__"]], "verse.automaton.guard.NodeSubstituter": [[110, 2, 1, "", "__init__"], [110, 2, 1, "", "generic_visit"], [110, 2, 1, "", "visit"]], "verse.automaton.guard.ValueSubstituter": [[111, 2, 1, "", "__init__"], [111, 2, 1, "", "generic_visit"], [111, 2, 1, "", "visit"]], "verse.automaton.hybrid_automaton": [[113, 1, 1, "", "HybridAutomaton"]], "verse.automaton.hybrid_automaton.HybridAutomaton": [[113, 2, 1, "", "__init__"]], "verse.automaton.hybrid_io_automaton": [[115, 1, 1, "", "HybridIoAutomaton"]], "verse.automaton.hybrid_io_automaton.HybridIoAutomaton": [[115, 2, 1, "", "__init__"]], "verse.automaton.reset": [[117, 1, 1, "", "ResetExpression"]], "verse.automaton.reset.ResetExpression": [[117, 2, 1, "", "__init__"]], "verse.map": [[119, 0, 0, "-", "example_map"], [149, 0, 0, "-", "lane"], [151, 0, 0, "-", "lane_3d"], [153, 0, 0, "-", "lane_map"], [155, 0, 0, "-", "lane_map_3d"], [157, 0, 0, "-", "lane_segment"], [163, 0, 0, "-", "lane_segment_3d"], [175, 0, 0, "-", "opendrive_parser"]], "verse.map.example_map": [[120, 0, 0, "-", "intersection"], [122, 0, 0, "-", "map_tacas"], [129, 0, 0, "-", "simple_map"], [132, 0, 0, "-", "simple_map2"], [139, 0, 0, "-", "simple_map_3d"]], "verse.map.example_map.intersection": [[121, 1, 1, "", "Intersection"]], "verse.map.example_map.intersection.Intersection": [[121, 2, 1, "", "__init__"]], "verse.map.example_map.map_tacas": [[123, 1, 1, "", "M1"], [124, 1, 1, "", "M2"], [125, 1, 1, "", "M3"], [126, 1, 1, "", "M5"], [127, 1, 1, "", "M6"], [128, 4, 1, "", "get_end"]], "verse.map.example_map.map_tacas.M1": [[123, 2, 1, "", "__init__"]], "verse.map.example_map.map_tacas.M2": [[124, 2, 1, "", "__init__"]], "verse.map.example_map.map_tacas.M3": [[125, 2, 1, "", "__init__"]], "verse.map.example_map.map_tacas.M5": [[126, 2, 1, "", "__init__"]], "verse.map.example_map.map_tacas.M6": [[127, 2, 1, "", "__init__"]], "verse.map.example_map.simple_map": [[130, 1, 1, "", "SimpleMap"], [131, 1, 1, "", "SimpleMap2"]], "verse.map.example_map.simple_map.SimpleMap": [[130, 2, 1, "", "__init__"]], "verse.map.example_map.simple_map.SimpleMap2": [[131, 2, 1, "", "__init__"]], "verse.map.example_map.simple_map2": [[133, 1, 1, "", "SimpleMap2"], [134, 1, 1, "", "SimpleMap3"], [135, 1, 1, "", "SimpleMap4"], [136, 1, 1, "", "SimpleMap4Switch2"], [137, 1, 1, "", "SimpleMap5"], [138, 1, 1, "", "SimpleMap6"]], "verse.map.example_map.simple_map2.SimpleMap2": [[133, 2, 1, "", "__init__"]], "verse.map.example_map.simple_map2.SimpleMap3": [[134, 2, 1, "", "__init__"]], "verse.map.example_map.simple_map2.SimpleMap4": [[135, 2, 1, "", "__init__"]], "verse.map.example_map.simple_map2.SimpleMap4Switch2": [[136, 2, 1, "", "__init__"]], "verse.map.example_map.simple_map2.SimpleMap5": [[137, 2, 1, "", "__init__"]], "verse.map.example_map.simple_map2.SimpleMap6": [[138, 2, 1, "", "__init__"]], "verse.map.example_map.simple_map_3d": [[140, 1, 1, "", "SimpleMap1"], [141, 1, 1, "", "SimpleMap2"], [142, 1, 1, "", "SimpleMap3"], [143, 1, 1, "", "SimpleMap4"], [144, 1, 1, "", "SimpleMap5"], [145, 1, 1, "", "SimpleMap6"], [146, 1, 1, "", "SimpleMap7"], [147, 4, 1, "", "get_center_radius"], [148, 4, 1, "", "get_end"]], "verse.map.example_map.simple_map_3d.SimpleMap1": [[140, 2, 1, "", "__init__"]], "verse.map.example_map.simple_map_3d.SimpleMap2": [[141, 2, 1, "", "__init__"]], "verse.map.example_map.simple_map_3d.SimpleMap3": [[142, 2, 1, "", "__init__"]], "verse.map.example_map.simple_map_3d.SimpleMap4": [[143, 2, 1, "", "__init__"]], "verse.map.example_map.simple_map_3d.SimpleMap5": [[144, 2, 1, "", "__init__"]], "verse.map.example_map.simple_map_3d.SimpleMap6": [[145, 2, 1, "", "__init__"]], "verse.map.example_map.simple_map_3d.SimpleMap7": [[146, 2, 1, "", "__init__"]], "verse.map.lane": [[150, 1, 1, "", "Lane"]], "verse.map.lane.Lane": [[150, 2, 1, "", "__init__"]], "verse.map.lane_3d": [[152, 1, 1, "", "Lane_3d"]], "verse.map.lane_3d.Lane_3d": [[152, 2, 1, "", "__init__"]], "verse.map.lane_map": [[154, 1, 1, "", "LaneMap"]], "verse.map.lane_map.LaneMap": [[154, 2, 1, "", "__init__"]], "verse.map.lane_map_3d": [[156, 1, 1, "", "LaneMap_3d"]], "verse.map.lane_map_3d.LaneMap_3d": [[156, 2, 1, "", "__init__"]], "verse.map.lane_segment": [[158, 1, 1, "", "AbstractLane"], [159, 1, 1, "", "CircularLane"], [160, 1, 1, "", "LaneSegment"], [161, 1, 1, "", "LineType"], [162, 1, 1, "", "StraightLane"]], "verse.map.lane_segment.AbstractLane": [[158, 2, 1, "", "__init__"], [158, 2, 1, "", "distance"], [158, 2, 1, "", "distance_with_heading"], [158, 2, 1, "", "from_config"], [158, 2, 1, "", "heading_at"], [158, 2, 1, "", "is_reachable_from"], [158, 2, 1, "", "local_coordinates"], [158, 3, 1, "", "metaclass__"], [158, 2, 1, "", "on_lane"], [158, 2, 1, "", "position"], [158, 2, 1, "", "to_config"], [158, 2, 1, "", "width_at"]], "verse.map.lane_segment.CircularLane": [[159, 2, 1, "", "__init__"], [159, 2, 1, "", "distance"], [159, 2, 1, "", "distance_with_heading"], [159, 2, 1, "", "from_config"], [159, 2, 1, "", "heading_at"], [159, 2, 1, "", "is_reachable_from"], [159, 2, 1, "", "local_coordinates"], [159, 3, 1, "", "metaclass__"], [159, 2, 1, "", "on_lane"], [159, 2, 1, "", "position"], [159, 2, 1, "", "to_config"], [159, 2, 1, "", "width_at"]], "verse.map.lane_segment.LaneSegment": [[160, 2, 1, "", "__init__"]], "verse.map.lane_segment.LineType": [[161, 2, 1, "", "__init__"]], "verse.map.lane_segment.StraightLane": [[162, 2, 1, "", "__init__"], [162, 2, 1, "", "distance"], [162, 2, 1, "", "distance_with_heading"], [162, 2, 1, "", "from_config"], [162, 2, 1, "", "heading_at"], [162, 2, 1, "", "is_reachable_from"], [162, 2, 1, "", "local_coordinates"], [162, 3, 1, "", "metaclass__"], [162, 2, 1, "", "on_lane"], [162, 2, 1, "", "position"], [162, 2, 1, "", "to_config"], [162, 2, 1, "", "width_at"]], "verse.map.lane_segment_3d": [[164, 1, 1, "", "AbstractLane_3d"], [165, 1, 1, "", "CircularLane_3d_v1"], [166, 1, 1, "", "CircularLane_3d_v2"], [167, 1, 1, "", "LineType_3d"], [168, 1, 1, "", "StraightLane_3d"], [169, 4, 1, "", "func_a"], [170, 4, 1, "", "func_b"], [171, 4, 1, "", "get_center_radius"], [172, 4, 1, "", "get_coor_by_rt"], [173, 4, 1, "", "get_rtp_by_coor"], [174, 4, 1, "", "get_theta_by_coor"]], "verse.map.lane_segment_3d.AbstractLane_3d": [[164, 2, 1, "", "__init__"], [164, 2, 1, "", "altitude"], [164, 2, 1, "", "distance"], [164, 2, 1, "", "distance_with_heading"], [164, 2, 1, "", "from_config"], [164, 2, 1, "", "heading_at"], [164, 2, 1, "", "is_reachable_from"], [164, 2, 1, "", "local_coordinates"], [164, 3, 1, "", "metaclass__"], [164, 2, 1, "", "on_lane"], [164, 2, 1, "", "position"], [164, 2, 1, "", "to_config"], [164, 2, 1, "", "width_at"]], "verse.map.lane_segment_3d.CircularLane_3d_v1": [[165, 2, 1, "", "__init__"], [165, 2, 1, "", "altitude"], [165, 2, 1, "", "distance"], [165, 2, 1, "", "distance_with_heading"], [165, 2, 1, "", "from_config"], [165, 2, 1, "", "heading_at"], [165, 2, 1, "", "is_reachable_from"], [165, 2, 1, "", "local_coordinates"], [165, 3, 1, "", "metaclass__"], [165, 2, 1, "", "on_lane"], [165, 2, 1, "", "position"], [165, 2, 1, "", "to_config"], [165, 2, 1, "", "width_at"]], "verse.map.lane_segment_3d.CircularLane_3d_v2": [[166, 2, 1, "", "__init__"], [166, 2, 1, "", "altitude"], [166, 2, 1, "", "distance"], [166, 2, 1, "", "distance_with_heading"], [166, 2, 1, "", "from_config"], [166, 2, 1, "", "heading_at"], [166, 2, 1, "", "is_reachable_from"], [166, 2, 1, "", "local_coordinates"], [166, 3, 1, "", "metaclass__"], [166, 2, 1, "", "on_lane"], [166, 2, 1, "", "position"], [166, 2, 1, "", "to_config"], [166, 2, 1, "", "width_at"]], "verse.map.lane_segment_3d.LineType_3d": [[167, 2, 1, "", "__init__"]], "verse.map.lane_segment_3d.StraightLane_3d": [[168, 2, 1, "", "__init__"], [168, 2, 1, "", "altitude"], [168, 2, 1, "", "distance"], [168, 2, 1, "", "distance_with_heading"], [168, 2, 1, "", "from_config"], [168, 2, 1, "", "heading_at"], [168, 2, 1, "", "is_reachable_from"], [168, 2, 1, "", "local_coordinates"], [168, 3, 1, "", "metaclass__"], [168, 2, 1, "", "on_lane"], [168, 2, 1, "", "position"], [168, 2, 1, "", "to_config"], [168, 2, 1, "", "width_at"]], "verse.map.opendrive_parser": [[176, 4, 1, "", "check_valid_side"], [177, 4, 1, "", "condense_matrix"], [178, 4, 1, "", "file_parser"], [179, 4, 1, "", "opendrive_map"], [180, 4, 1, "", "road_traverser"]], "verse.parser": [[182, 0, 0, "-", "astunparser"], [189, 0, 0, "-", "parser"]], "verse.parser.astunparser": [[183, 1, 1, "", "Unparser"], [184, 4, 1, "", "interleave"], [185, 4, 1, "", "main"], [186, 4, 1, "", "roundtrip"], [187, 4, 1, "", "testdir"], [188, 4, 1, "", "unparse"]], "verse.parser.astunparser.Unparser": [[183, 2, 1, "", "__init__"], [183, 2, 1, "", "dispatch"], [183, 2, 1, "", "enter"], [183, 2, 1, "", "fill"], [183, 2, 1, "", "leave"], [183, 2, 1, "", "write"]], "verse.parser.parser": [[190, 1, 1, "", "ArgSubstituter"], [191, 1, 1, "", "Assert"], [192, 1, 1, "", "CompiledAssert"], [193, 1, 1, "", "CondVal"], [194, 1, 1, "", "CondValCase"], [195, 1, 1, "", "ControllerIR"], [196, 1, 1, "", "CustomIR"], [197, 1, 1, "", "Env"], [198, 1, 1, "", "Lambda"], [199, 1, 1, "", "LambdaArg"], [200, 1, 1, "", "ModeDef"], [201, 1, 1, "", "ModePath"], [202, 1, 1, "", "Reduction"], [203, 1, 1, "", "ReductionType"], [204, 1, 1, "", "ScopeLevel"], [205, 1, 1, "", "StateDef"], [206, 1, 1, "", "_Assert"], [207, 4, 1, "", "ast_dump"], [208, 4, 1, "", "compile_expr"], [209, 4, 1, "", "find"], [210, 4, 1, "", "fully_cond"], [211, 4, 1, "", "is_main_check"], [212, 4, 1, "", "merge_assert"], [213, 4, 1, "", "merge_conds"], [214, 4, 1, "", "merge_if"], [215, 4, 1, "", "merge_if_single"], [216, 4, 1, "", "merge_if_val"], [217, 4, 1, "", "not_ir_ast"], [218, 4, 1, "", "proc"], [219, 4, 1, "", "proc_assign"], [220, 4, 1, "", "unparse"]], "verse.parser.parser.ArgSubstituter": [[190, 2, 1, "", "__init__"], [190, 2, 1, "", "generic_visit"], [190, 2, 1, "", "visit"]], "verse.parser.parser.Assert": [[191, 2, 1, "", "__init__"]], "verse.parser.parser.CompiledAssert": [[192, 2, 1, "", "__init__"]], "verse.parser.parser.CondVal": [[193, 2, 1, "", "__init__"]], "verse.parser.parser.CondValCase": [[194, 2, 1, "", "__init__"]], "verse.parser.parser.ControllerIR": [[195, 2, 1, "", "__init__"], [195, 2, 1, "", "ir_eq"]], "verse.parser.parser.CustomIR": [[196, 2, 1, "", "__init__"]], "verse.parser.parser.Env": [[197, 2, 1, "", "__init__"]], "verse.parser.parser.Lambda": [[198, 2, 1, "", "__init__"]], "verse.parser.parser.LambdaArg": [[199, 2, 1, "", "__init__"]], "verse.parser.parser.ModeDef": [[200, 2, 1, "", "__init__"]], "verse.parser.parser.ModePath": [[201, 2, 1, "", "__init__"]], "verse.parser.parser.Reduction": [[202, 2, 1, "", "__init__"]], "verse.parser.parser.ScopeLevel": [[204, 2, 1, "", "__init__"]], "verse.parser.parser.StateDef": [[205, 2, 1, "", "__init__"]], "verse.parser.parser._Assert": [[206, 2, 1, "", "__init__"]], "verse.plotter": [[222, 0, 0, "-", "plotter2D"], [237, 0, 0, "-", "plotter2D_old"], [243, 0, 0, "-", "plotter3D"], [250, 0, 0, "-", "plotter3D_new"]], "verse.plotter.plotter2D": [[223, 4, 1, "", "check_dim"], [224, 4, 1, "", "create_anime_dict"], [225, 4, 1, "", "draw_map"], [226, 5, 1, "", "duration"], [227, 4, 1, "", "get_text_pos"], [228, 4, 1, "", "num_digits"], [229, 4, 1, "", "reachtube_anime"], [230, 4, 1, "", "reachtube_tree"], [231, 4, 1, "", "reachtube_tree_single"], [232, 4, 1, "", "sample_trace"], [233, 4, 1, "", "simulation_anime"], [234, 4, 1, "", "simulation_tree"], [235, 4, 1, "", "simulation_tree_single"], [236, 4, 1, "", "update_style"]], "verse.plotter.plotter2D_old": [[238, 4, 1, "", "generate_simulation_anime"], [239, 4, 1, "", "plot"], [240, 4, 1, "", "plot_map"], [241, 4, 1, "", "plot_reachtube_tree"], [242, 4, 1, "", "plot_simulation_tree"]], "verse.plotter.plotter3D": [[244, 4, 1, "", "plot3dMap"], [245, 4, 1, "", "plot3dReachtube"], [246, 4, 1, "", "plot3dReachtubeSingle"], [247, 4, 1, "", "plot_line_3d"], [248, 4, 1, "", "plot_point_3d"], [249, 4, 1, "", "plot_polytope_3d"]], "verse.plotter.plotter3D_new": [[251, 4, 1, "", "check_dim"], [252, 4, 1, "", "draw_map_3d"], [253, 4, 1, "", "reachtube_tree_3d"], [254, 4, 1, "", "reachtube_tree_single_3d"], [255, 4, 1, "", "sample_trace"], [256, 4, 1, "", "simulation_tree_3d"]], "verse.scenario": [[260, 0, 0, "-", "scenario"]], "verse.scenario.scenario": [[261, 1, 1, "", "Benchmark"], [262, 1, 1, "", "ExprConfig"], [263, 1, 1, "", "Scenario"], [264, 1, 1, "", "ScenarioConfig"], [265, 4, 1, "", "check_ray_init"], [266, 4, 1, "", "red"]], "verse.scenario.scenario.Benchmark": [[261, 2, 1, "", "__init__"]], "verse.scenario.scenario.ExprConfig": [[262, 2, 1, "", "__init__"]], "verse.scenario.scenario.Scenario": [[263, 2, 1, "", "__init__"]], "verse.scenario.scenario.ScenarioConfig": [[264, 2, 1, "", "__init__"]], "verse.sensor": [[268, 0, 0, "-", "base_sensor"], [276, 0, 0, "-", "example_sensor"]], "verse.sensor.base_sensor": [[269, 1, 1, "", "BaseSensor"], [270, 4, 1, "", "add_states_2d"], [271, 4, 1, "", "add_states_3d"], [272, 4, 1, "", "adds"], [273, 4, 1, "", "set_states_2d"], [274, 4, 1, "", "set_states_3d"], [275, 4, 1, "", "sets"]], "verse.sensor.base_sensor.BaseSensor": [[269, 2, 1, "", "__init__"]], "verse.sensor.example_sensor": [[277, 0, 0, "-", "craft_sensor"], [285, 0, 0, "-", "quadrotor_sensor"], [293, 0, 0, "-", "single_sensor"], [307, 0, 0, "-", "thermo_sensor"]], "verse.sensor.example_sensor.craft_sensor": [[278, 1, 1, "", "CraftSensor"], [279, 4, 1, "", "add_states_2d_ball"], [280, 4, 1, "", "add_states_3d_ball"], [281, 4, 1, "", "adds"], [282, 4, 1, "", "set_states_2d_ball"], [283, 4, 1, "", "set_states_3d_ball"], [284, 4, 1, "", "sets"]], "verse.sensor.example_sensor.craft_sensor.CraftSensor": [[278, 2, 1, "", "__init__"]], "verse.sensor.example_sensor.quadrotor_sensor": [[286, 1, 1, "", "QuadrotorSensor"], [287, 4, 1, "", "add_states_2d_ball"], [288, 4, 1, "", "add_states_3d_ball"], [289, 4, 1, "", "adds"], [290, 4, 1, "", "set_states_2d_ball"], [291, 4, 1, "", "set_states_3d_ball"], [292, 4, 1, "", "sets"]], "verse.sensor.example_sensor.quadrotor_sensor.QuadrotorSensor": [[286, 2, 1, "", "__init__"]], "verse.sensor.example_sensor.single_sensor": [[294, 1, 1, "", "FakeSensor3"], [295, 1, 1, "", "FakeSensor4"], [296, 1, 1, "", "SingleSensor"], [297, 4, 1, "", "add_states_2d"], [298, 4, 1, "", "add_states_2d_ball"], [299, 4, 1, "", "add_states_3d"], [300, 4, 1, "", "add_states_3d_ball"], [301, 4, 1, "", "adds"], [302, 4, 1, "", "set_states_2d"], [303, 4, 1, "", "set_states_2d_ball"], [304, 4, 1, "", "set_states_3d"], [305, 4, 1, "", "set_states_3d_ball"], [306, 4, 1, "", "sets"]], "verse.sensor.example_sensor.single_sensor.FakeSensor3": [[294, 2, 1, "", "__init__"]], "verse.sensor.example_sensor.single_sensor.FakeSensor4": [[295, 2, 1, "", "__init__"]], "verse.sensor.example_sensor.single_sensor.SingleSensor": [[296, 2, 1, "", "__init__"]], "verse.sensor.example_sensor.thermo_sensor": [[308, 1, 1, "", "ThermoSensor"], [309, 4, 1, "", "add_states_2d_ball"], [310, 4, 1, "", "add_states_3d_ball"], [311, 4, 1, "", "adds"], [312, 4, 1, "", "set_states_2d_ball"], [313, 4, 1, "", "set_states_3d_ball"], [314, 4, 1, "", "sets"]], "verse.sensor.example_sensor.thermo_sensor.ThermoSensor": [[308, 2, 1, "", "__init__"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:function", "5": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "data", "Python data"]}, "titleterms": {"vers": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 318], "agent": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 315], "base_ag": [2, 3], "baseag": 3, "example_ag": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "ball_ag": [5, 6], "ballag": 6, "car_ag": [7, 8, 9, 10, 11, 12], "carag": 8, "caragentdebounc": 9, "caragentswitch2": 10, "npcagent": 11, "weirdcarag": 12, "origin_ag": [13, 14, 15, 16], "craft_ag": 14, "thermo_ag": 15, "vanderpol_ag": 16, "quadrotor_ag": [17, 18, 19], "ffnnc": 18, "quadrotorag": 19, "robot_ag": [20, 21], "robotag": 21, "sign_ag": [22, 23], "signag": 23, "analysi": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105], "analysis_tre": [25, 26, 27, 28, 29, 30], "analysistre": 26, "analysistreenod": 27, "color_interp": 28, "first_transit": 29, "index_of": 30, "dryvr": [31, 32, 33, 34, 35, 36, 37, 38], "all_sensitivities_calc": 32, "calccenterpoint": 33, "calcdelta": 34, "calc_bloated_tub": 35, "get_reachtube_seg": 36, "randompoint": 37, "trimtrac": 38, "increment": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53], "cachedrttran": 40, "cachedreachtran": 41, "cachedseg": 42, "cachedtransit": 43, "cachedtub": 44, "reachtubecach": 45, "simtracecach": 46, "tubecach": 47, "combine_al": 48, "convert_reach_tran": 49, "convert_sim_tran": 50, "reach_trans_suit": 51, "sim_trans_suit": 52, "to_simul": 53, "mixmonoton": [54, 55, 56, 57, 58, 59, 60, 61, 62], "calculate_bloated_tube_mixmono_cont": 55, "calculate_bloated_tube_mixmono_disc": 56, "compute_reachtube_mixmono_cont": 57, "compute_reachtube_mixmono_disc": 58, "find_max": 59, "find_max_symbol": 60, "find_min": 61, "find_min_symbol": 62, "simul": [63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 320], "simconst": 64, "checkheight": [66, 104], "check_sim_transit": 67, "convertenumtostr": 68, "convertstrtoenum": 69, "disc_field": 70, "pack_env": 71, "red": [72, 266], "util": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "are_polygons_intersect": 74, "class_from_path": 75, "confidence_ellipsoid": 76, "confidence_polytop": 77, "constrain": 78, "dedup": 79, "distance_to_circl": 80, "distance_to_rect": 81, "do_everi": 82, "get_class_path": 83, "has_corner_insid": 84, "interval_dist": 85, "is_consistent_dataset": 86, "is_valid_observ": 87, "lmap": 88, "near_split": 89, "not_zero": 90, "point_in_ellips": 91, "point_in_rectangl": 92, "point_in_rotated_rectangl": 93, "project_polygon": 94, "rect_corn": 95, "rotated_rectangles_intersect": 96, "sample_rect": 97, "solve_trinom": 98, "to_serializ": 99, "wrap_to_pi": 100, "verifi": [101, 102, 103, 104, 105], "reachconst": 102, "combine_rect": 105, "automaton": [106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117], "guard": [107, 108, 109, 110, 111], "guardexpressionast": 108, "logictreenod": 109, "nodesubstitut": 110, "valuesubstitut": 111, "hybrid_automaton": [112, 113], "hybridautomaton": 113, "hybrid_io_automaton": [114, 115], "hybridioautomaton": 115, "reset": [116, 117], "resetexpress": 117, "map": [118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 319], "example_map": [119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148], "intersect": [120, 121], "map_taca": [122, 123, 124, 125, 126, 127, 128], "m1": 123, "m2": 124, "m3": 125, "m5": 126, "m6": 127, "get_end": [128, 148], "simple_map": [129, 130, 131], "simplemap": 130, "simplemap2": [131, 133, 141], "simple_map2": [132, 133, 134, 135, 136, 137, 138], "simplemap3": [134, 142], "simplemap4": [135, 143], "simplemap4switch2": 136, "simplemap5": [137, 144], "simplemap6": [138, 145], "simple_map_3d": [139, 140, 141, 142, 143, 144, 145, 146, 147, 148], "simplemap1": 140, "simplemap7": 146, "get_center_radiu": [147, 171], "lane": [149, 150], "lane_3d": [151, 152], "lane_map": [153, 154], "lanemap": 154, "lane_map_3d": [155, 156], "lanemap_3d": 156, "lane_seg": [157, 158, 159, 160, 161, 162], "abstractlan": 158, "circularlan": 159, "laneseg": 160, "linetyp": 161, "straightlan": 162, "lane_segment_3d": [163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174], "abstractlane_3d": 164, "circularlane_3d_v1": 165, "circularlane_3d_v2": 166, "linetype_3d": 167, "straightlane_3d": 168, "func_a": 169, "func_b": 170, "get_coor_by_rt": 172, "get_rtp_by_coor": 173, "get_theta_by_coor": 174, "opendrive_pars": [175, 176, 177, 178, 179, 180], "check_valid_sid": 176, "condense_matrix": 177, "file_pars": 178, "opendrive_map": 179, "road_travers": 180, "parser": [181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 321], "astunpars": [182, 183, 184, 185, 186, 187, 188], "unpars": [183, 188, 220], "interleav": 184, "main": 185, "roundtrip": 186, "testdir": 187, "argsubstitut": 190, "assert": 191, "compiledassert": 192, "condval": 193, "condvalcas": 194, "controllerir": 195, "customir": 196, "env": 197, "lambda": 198, "lambdaarg": 199, "modedef": 200, "modepath": 201, "reduct": [202, 321], "reductiontyp": 203, "scopelevel": 204, "statedef": 205, "_assert": 206, "ast_dump": 207, "compile_expr": 208, "find": 209, "fully_cond": 210, "is_main_check": 211, "merge_assert": 212, "merge_cond": 213, "merge_if": 214, "merge_if_singl": 215, "merge_if_v": 216, "not_ir_ast": 217, "proc": 218, "proc_assign": 219, "plotter": [221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258], "plotter2d": [222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236], "check_dim": [223, 251], "create_anime_dict": 224, "draw_map": 225, "durat": 226, "get_text_po": 227, "num_digit": 228, "reachtube_anim": [229, 322], "reachtube_tre": [230, 322], "reachtube_tree_singl": 231, "sample_trac": [232, 255], "simulation_anim": [233, 322], "simulation_tre": [234, 322], "simulation_tree_singl": 235, "update_styl": [236, 258], "plotter2d_old": [237, 238, 239, 240, 241, 242], "generate_simulation_anim": 238, "plot": 239, "plot_map": 240, "plot_reachtube_tre": 241, "plot_simulation_tre": 242, "plotter3d": [243, 244, 245, 246, 247, 248, 249], "plot3dmap": 244, "plot3dreachtub": 245, "plot3dreachtubesingl": 246, "plot_line_3d": 247, "plot_point_3d": 248, "plot_polytope_3d": 249, "plotter3d_new": [250, 251, 252, 253, 254, 255, 256, 257, 258], "draw_map_3d": 252, "reachtube_tree_3d": 253, "reachtube_tree_single_3d": 254, "simulation_tree_3d": 256, "simulation_tree_single_3d": 257, "scenario": [259, 260, 261, 262, 263, 264, 265, 266, 323], "benchmark": 261, "exprconfig": 262, "scenarioconfig": 264, "check_ray_init": 265, "sensor": [267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 324], "base_sensor": [268, 269, 270, 271, 272, 273, 274, 275], "basesensor": 269, "add_states_2d": [270, 297], "add_states_3d": [271, 299], "add": [272, 281, 289, 301, 311], "set_states_2d": [273, 302], "set_states_3d": [274, 304], "set": [275, 284, 292, 306, 314], "example_sensor": [276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314], "craft_sensor": [277, 278, 279, 280, 281, 282, 283, 284], "craftsensor": 278, "add_states_2d_bal": [279, 287, 298, 309], "add_states_3d_bal": [280, 288, 300, 310], "set_states_2d_bal": [282, 290, 303, 312], "set_states_3d_bal": [283, 291, 305, 313], "quadrotor_sensor": [285, 286, 287, 288, 289, 290, 291, 292], "quadrotorsensor": 286, "single_sensor": [293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306], "fakesensor3": 294, "fakesensor4": 295, "singlesensor": 296, "thermo_sensor": [307, 308, 309, 310, 311, 312, 313, 314], "thermosensor": 308, "contributor": 316, "get": 317, "start": 317, "welcom": 318, "": 318, "document": 318, "content": 318, "api": 318, "indic": 318, "tabl": 318, "reachtub": 320, "goal": 321, "work": 321, "principl": 321, "condit": 321, "valu": 321, "name": 321, "limit": 321, "visual": 322, "function": 322, "list": 322, "common": 322, "paramter": 322, "2d": 322, "3d": 322}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"verse": [[0, "module-verse"]], "verse.agents": [[1, "module-verse.agents"]], "verse.agents.base_agent": [[2, "module-verse.agents.base_agent"]], "verse.agents.base_agent.BaseAgent": [[3, "verse-agents-base-agent-baseagent"]], "verse.agents.example_agent": [[4, "module-verse.agents.example_agent"]], "verse.agents.example_agent.ball_agent": [[5, "module-verse.agents.example_agent.ball_agent"]], "verse.agents.example_agent.ball_agent.BallAgent": [[6, "verse-agents-example-agent-ball-agent-ballagent"]], "verse.agents.example_agent.car_agent": [[7, "module-verse.agents.example_agent.car_agent"]], "verse.agents.example_agent.car_agent.CarAgent": [[8, "verse-agents-example-agent-car-agent-caragent"]], "verse.agents.example_agent.car_agent.CarAgentDebounced": [[9, "verse-agents-example-agent-car-agent-caragentdebounced"]], "verse.agents.example_agent.car_agent.CarAgentSwitch2": [[10, "verse-agents-example-agent-car-agent-caragentswitch2"]], "verse.agents.example_agent.car_agent.NPCAgent": [[11, "verse-agents-example-agent-car-agent-npcagent"]], "verse.agents.example_agent.car_agent.WeirdCarAgent": [[12, "verse-agents-example-agent-car-agent-weirdcaragent"]], "verse.agents.example_agent.origin_agent": [[13, "module-verse.agents.example_agent.origin_agent"]], "verse.agents.example_agent.origin_agent.craft_agent": [[14, "verse-agents-example-agent-origin-agent-craft-agent"]], "verse.agents.example_agent.origin_agent.thermo_agent": [[15, "verse-agents-example-agent-origin-agent-thermo-agent"]], "verse.agents.example_agent.origin_agent.vanderpol_agent": [[16, "verse-agents-example-agent-origin-agent-vanderpol-agent"]], "verse.agents.example_agent.quadrotor_agent": [[17, "module-verse.agents.example_agent.quadrotor_agent"]], "verse.agents.example_agent.quadrotor_agent.FFNNC": [[18, "verse-agents-example-agent-quadrotor-agent-ffnnc"]], "verse.agents.example_agent.quadrotor_agent.QuadrotorAgent": [[19, "verse-agents-example-agent-quadrotor-agent-quadrotoragent"]], "verse.agents.example_agent.robot_agent": [[20, "module-verse.agents.example_agent.robot_agent"]], "verse.agents.example_agent.robot_agent.RobotAgent": [[21, "verse-agents-example-agent-robot-agent-robotagent"]], "verse.agents.example_agent.sign_agent": [[22, "module-verse.agents.example_agent.sign_agent"]], "verse.agents.example_agent.sign_agent.SignAgent": [[23, "verse-agents-example-agent-sign-agent-signagent"]], "verse.analysis": [[24, "module-verse.analysis"]], "verse.analysis.analysis_tree": [[25, "module-verse.analysis.analysis_tree"]], "verse.analysis.analysis_tree.AnalysisTree": [[26, "verse-analysis-analysis-tree-analysistree"]], "verse.analysis.analysis_tree.AnalysisTreeNode": [[27, "verse-analysis-analysis-tree-analysistreenode"]], "verse.analysis.analysis_tree.color_interp": [[28, "verse-analysis-analysis-tree-color-interp"]], "verse.analysis.analysis_tree.first_transitions": [[29, "verse-analysis-analysis-tree-first-transitions"]], "verse.analysis.analysis_tree.index_of": [[30, "verse-analysis-analysis-tree-index-of"]], "verse.analysis.dryvr": [[31, "module-verse.analysis.dryvr"]], "verse.analysis.dryvr.all_sensitivities_calc": [[32, "verse-analysis-dryvr-all-sensitivities-calc"]], "verse.analysis.dryvr.calcCenterPoint": [[33, "verse-analysis-dryvr-calccenterpoint"]], "verse.analysis.dryvr.calcDelta": [[34, "verse-analysis-dryvr-calcdelta"]], "verse.analysis.dryvr.calc_bloated_tube": [[35, "verse-analysis-dryvr-calc-bloated-tube"]], "verse.analysis.dryvr.get_reachtube_segment": [[36, "verse-analysis-dryvr-get-reachtube-segment"]], "verse.analysis.dryvr.randomPoint": [[37, "verse-analysis-dryvr-randompoint"]], "verse.analysis.dryvr.trimTraces": [[38, "verse-analysis-dryvr-trimtraces"]], "verse.analysis.incremental": [[39, "module-verse.analysis.incremental"]], "verse.analysis.incremental.CachedRTTrans": [[40, "verse-analysis-incremental-cachedrttrans"]], "verse.analysis.incremental.CachedReachTrans": [[41, "verse-analysis-incremental-cachedreachtrans"]], "verse.analysis.incremental.CachedSegment": [[42, "verse-analysis-incremental-cachedsegment"]], "verse.analysis.incremental.CachedTransition": [[43, "verse-analysis-incremental-cachedtransition"]], "verse.analysis.incremental.CachedTube": [[44, "verse-analysis-incremental-cachedtube"]], "verse.analysis.incremental.ReachTubeCache": [[45, "verse-analysis-incremental-reachtubecache"]], "verse.analysis.incremental.SimTraceCache": [[46, "verse-analysis-incremental-simtracecache"]], "verse.analysis.incremental.TubeCache": [[47, "verse-analysis-incremental-tubecache"]], "verse.analysis.incremental.combine_all": [[48, "verse-analysis-incremental-combine-all"]], "verse.analysis.incremental.convert_reach_trans": [[49, "verse-analysis-incremental-convert-reach-trans"]], "verse.analysis.incremental.convert_sim_trans": [[50, "verse-analysis-incremental-convert-sim-trans"]], "verse.analysis.incremental.reach_trans_suit": [[51, "verse-analysis-incremental-reach-trans-suit"]], "verse.analysis.incremental.sim_trans_suit": [[52, "verse-analysis-incremental-sim-trans-suit"]], "verse.analysis.incremental.to_simulate": [[53, "verse-analysis-incremental-to-simulate"]], "verse.analysis.mixmonotone": [[54, "module-verse.analysis.mixmonotone"]], "verse.analysis.mixmonotone.calculate_bloated_tube_mixmono_cont": [[55, "verse-analysis-mixmonotone-calculate-bloated-tube-mixmono-cont"]], "verse.analysis.mixmonotone.calculate_bloated_tube_mixmono_disc": [[56, "verse-analysis-mixmonotone-calculate-bloated-tube-mixmono-disc"]], "verse.analysis.mixmonotone.compute_reachtube_mixmono_cont": [[57, "verse-analysis-mixmonotone-compute-reachtube-mixmono-cont"]], "verse.analysis.mixmonotone.compute_reachtube_mixmono_disc": [[58, "verse-analysis-mixmonotone-compute-reachtube-mixmono-disc"]], "verse.analysis.mixmonotone.find_max": [[59, "verse-analysis-mixmonotone-find-max"]], "verse.analysis.mixmonotone.find_max_symbolic": [[60, "verse-analysis-mixmonotone-find-max-symbolic"]], "verse.analysis.mixmonotone.find_min": [[61, "verse-analysis-mixmonotone-find-min"]], "verse.analysis.mixmonotone.find_min_symbolic": [[62, "verse-analysis-mixmonotone-find-min-symbolic"]], "verse.analysis.simulator": [[63, "module-verse.analysis.simulator"]], "verse.analysis.simulator.SimConsts": [[64, "verse-analysis-simulator-simconsts"]], "verse.analysis.simulator.Simulator": [[65, "verse-analysis-simulator-simulator"]], "verse.analysis.simulator.checkHeight": [[66, "verse-analysis-simulator-checkheight"]], "verse.analysis.simulator.check_sim_transitions": [[67, "verse-analysis-simulator-check-sim-transitions"]], "verse.analysis.simulator.convertEnumToStr": [[68, "verse-analysis-simulator-convertenumtostr"]], "verse.analysis.simulator.convertStrToEnum": [[69, "verse-analysis-simulator-convertstrtoenum"]], "verse.analysis.simulator.disc_field": [[70, "verse-analysis-simulator-disc-field"]], "verse.analysis.simulator.pack_env": [[71, "verse-analysis-simulator-pack-env"]], "verse.analysis.simulator.red": [[72, "verse-analysis-simulator-red"]], "verse.analysis.utils": [[73, "module-verse.analysis.utils"]], "verse.analysis.utils.are_polygons_intersecting": [[74, "verse-analysis-utils-are-polygons-intersecting"]], "verse.analysis.utils.class_from_path": [[75, "verse-analysis-utils-class-from-path"]], "verse.analysis.utils.confidence_ellipsoid": [[76, "verse-analysis-utils-confidence-ellipsoid"]], "verse.analysis.utils.confidence_polytope": [[77, "verse-analysis-utils-confidence-polytope"]], "verse.analysis.utils.constrain": [[78, "verse-analysis-utils-constrain"]], "verse.analysis.utils.dedup": [[79, "verse-analysis-utils-dedup"]], "verse.analysis.utils.distance_to_circle": [[80, "verse-analysis-utils-distance-to-circle"]], "verse.analysis.utils.distance_to_rect": [[81, "verse-analysis-utils-distance-to-rect"]], "verse.analysis.utils.do_every": [[82, "verse-analysis-utils-do-every"]], "verse.analysis.utils.get_class_path": [[83, "verse-analysis-utils-get-class-path"]], "verse.analysis.utils.has_corner_inside": [[84, "verse-analysis-utils-has-corner-inside"]], "verse.analysis.utils.interval_distance": [[85, "verse-analysis-utils-interval-distance"]], "verse.analysis.utils.is_consistent_dataset": [[86, "verse-analysis-utils-is-consistent-dataset"]], "verse.analysis.utils.is_valid_observation": [[87, "verse-analysis-utils-is-valid-observation"]], "verse.analysis.utils.lmap": [[88, "verse-analysis-utils-lmap"]], "verse.analysis.utils.near_split": [[89, "verse-analysis-utils-near-split"]], "verse.analysis.utils.not_zero": [[90, "verse-analysis-utils-not-zero"]], "verse.analysis.utils.point_in_ellipse": [[91, "verse-analysis-utils-point-in-ellipse"]], "verse.analysis.utils.point_in_rectangle": [[92, "verse-analysis-utils-point-in-rectangle"]], "verse.analysis.utils.point_in_rotated_rectangle": [[93, "verse-analysis-utils-point-in-rotated-rectangle"]], "verse.analysis.utils.project_polygon": [[94, "verse-analysis-utils-project-polygon"]], "verse.analysis.utils.rect_corners": [[95, "verse-analysis-utils-rect-corners"]], "verse.analysis.utils.rotated_rectangles_intersect": [[96, "verse-analysis-utils-rotated-rectangles-intersect"]], "verse.analysis.utils.sample_rect": [[97, "verse-analysis-utils-sample-rect"]], "verse.analysis.utils.solve_trinom": [[98, "verse-analysis-utils-solve-trinom"]], "verse.analysis.utils.to_serializable": [[99, "verse-analysis-utils-to-serializable"]], "verse.analysis.utils.wrap_to_pi": [[100, "verse-analysis-utils-wrap-to-pi"]], "verse.analysis.verifier": [[101, "module-verse.analysis.verifier"]], "verse.analysis.verifier.ReachConsts": [[102, "verse-analysis-verifier-reachconsts"]], "verse.analysis.verifier.Verifier": [[103, "verse-analysis-verifier-verifier"]], "verse.analysis.verifier.checkHeight": [[104, "verse-analysis-verifier-checkheight"]], "verse.analysis.verifier.combine_rect": [[105, "verse-analysis-verifier-combine-rect"]], "verse.automaton": [[106, "module-verse.automaton"]], "verse.automaton.guard": [[107, "module-verse.automaton.guard"]], "verse.automaton.guard.GuardExpressionAst": [[108, "verse-automaton-guard-guardexpressionast"]], "verse.automaton.guard.LogicTreeNode": [[109, "verse-automaton-guard-logictreenode"]], "verse.automaton.guard.NodeSubstituter": [[110, "verse-automaton-guard-nodesubstituter"]], "verse.automaton.guard.ValueSubstituter": [[111, "verse-automaton-guard-valuesubstituter"]], "verse.automaton.hybrid_automaton": [[112, "module-verse.automaton.hybrid_automaton"]], "verse.automaton.hybrid_automaton.HybridAutomaton": [[113, "verse-automaton-hybrid-automaton-hybridautomaton"]], "verse.automaton.hybrid_io_automaton": [[114, "module-verse.automaton.hybrid_io_automaton"]], "verse.automaton.hybrid_io_automaton.HybridIoAutomaton": [[115, "verse-automaton-hybrid-io-automaton-hybridioautomaton"]], "verse.automaton.reset": [[116, "module-verse.automaton.reset"]], "verse.automaton.reset.ResetExpression": [[117, "verse-automaton-reset-resetexpression"]], "verse.map": [[118, "module-verse.map"]], "verse.map.example_map": [[119, "module-verse.map.example_map"]], "verse.map.example_map.intersection": [[120, "module-verse.map.example_map.intersection"]], "verse.map.example_map.intersection.Intersection": [[121, "verse-map-example-map-intersection-intersection"]], "verse.map.example_map.map_tacas": [[122, "module-verse.map.example_map.map_tacas"]], "verse.map.example_map.map_tacas.M1": [[123, "verse-map-example-map-map-tacas-m1"]], "verse.map.example_map.map_tacas.M2": [[124, "verse-map-example-map-map-tacas-m2"]], "verse.map.example_map.map_tacas.M3": [[125, "verse-map-example-map-map-tacas-m3"]], "verse.map.example_map.map_tacas.M5": [[126, "verse-map-example-map-map-tacas-m5"]], "verse.map.example_map.map_tacas.M6": [[127, "verse-map-example-map-map-tacas-m6"]], "verse.map.example_map.map_tacas.get_end": [[128, "verse-map-example-map-map-tacas-get-end"]], "verse.map.example_map.simple_map": [[129, "module-verse.map.example_map.simple_map"]], "verse.map.example_map.simple_map.SimpleMap": [[130, "verse-map-example-map-simple-map-simplemap"]], "verse.map.example_map.simple_map.SimpleMap2": [[131, "verse-map-example-map-simple-map-simplemap2"]], "verse.map.example_map.simple_map2": [[132, "module-verse.map.example_map.simple_map2"]], "verse.map.example_map.simple_map2.SimpleMap2": [[133, "verse-map-example-map-simple-map2-simplemap2"]], "verse.map.example_map.simple_map2.SimpleMap3": [[134, "verse-map-example-map-simple-map2-simplemap3"]], "verse.map.example_map.simple_map2.SimpleMap4": [[135, "verse-map-example-map-simple-map2-simplemap4"]], "verse.map.example_map.simple_map2.SimpleMap4Switch2": [[136, "verse-map-example-map-simple-map2-simplemap4switch2"]], "verse.map.example_map.simple_map2.SimpleMap5": [[137, "verse-map-example-map-simple-map2-simplemap5"]], "verse.map.example_map.simple_map2.SimpleMap6": [[138, "verse-map-example-map-simple-map2-simplemap6"]], "verse.map.example_map.simple_map_3d": [[139, "module-verse.map.example_map.simple_map_3d"]], "verse.map.example_map.simple_map_3d.SimpleMap1": [[140, "verse-map-example-map-simple-map-3d-simplemap1"]], "verse.map.example_map.simple_map_3d.SimpleMap2": [[141, "verse-map-example-map-simple-map-3d-simplemap2"]], "verse.map.example_map.simple_map_3d.SimpleMap3": [[142, "verse-map-example-map-simple-map-3d-simplemap3"]], "verse.map.example_map.simple_map_3d.SimpleMap4": [[143, "verse-map-example-map-simple-map-3d-simplemap4"]], "verse.map.example_map.simple_map_3d.SimpleMap5": [[144, "verse-map-example-map-simple-map-3d-simplemap5"]], "verse.map.example_map.simple_map_3d.SimpleMap6": [[145, "verse-map-example-map-simple-map-3d-simplemap6"]], "verse.map.example_map.simple_map_3d.SimpleMap7": [[146, "verse-map-example-map-simple-map-3d-simplemap7"]], "verse.map.example_map.simple_map_3d.get_center_radius": [[147, "verse-map-example-map-simple-map-3d-get-center-radius"]], "verse.map.example_map.simple_map_3d.get_end": [[148, "verse-map-example-map-simple-map-3d-get-end"]], "verse.map.lane": [[149, "module-verse.map.lane"]], "verse.map.lane.Lane": [[150, "verse-map-lane-lane"]], "verse.map.lane_3d": [[151, "module-verse.map.lane_3d"]], "verse.map.lane_3d.Lane_3d": [[152, "verse-map-lane-3d-lane-3d"]], "verse.map.lane_map": [[153, "module-verse.map.lane_map"]], "verse.map.lane_map.LaneMap": [[154, "verse-map-lane-map-lanemap"]], "verse.map.lane_map_3d": [[155, "module-verse.map.lane_map_3d"]], "verse.map.lane_map_3d.LaneMap_3d": [[156, "verse-map-lane-map-3d-lanemap-3d"]], "verse.map.lane_segment": [[157, "module-verse.map.lane_segment"]], "verse.map.lane_segment.AbstractLane": [[158, "verse-map-lane-segment-abstractlane"]], "verse.map.lane_segment.CircularLane": [[159, "verse-map-lane-segment-circularlane"]], "verse.map.lane_segment.LaneSegment": [[160, "verse-map-lane-segment-lanesegment"]], "verse.map.lane_segment.LineType": [[161, "verse-map-lane-segment-linetype"]], "verse.map.lane_segment.StraightLane": [[162, "verse-map-lane-segment-straightlane"]], "verse.map.lane_segment_3d": [[163, "module-verse.map.lane_segment_3d"]], "verse.map.lane_segment_3d.AbstractLane_3d": [[164, "verse-map-lane-segment-3d-abstractlane-3d"]], "verse.map.lane_segment_3d.CircularLane_3d_v1": [[165, "verse-map-lane-segment-3d-circularlane-3d-v1"]], "verse.map.lane_segment_3d.CircularLane_3d_v2": [[166, "verse-map-lane-segment-3d-circularlane-3d-v2"]], "verse.map.lane_segment_3d.LineType_3d": [[167, "verse-map-lane-segment-3d-linetype-3d"]], "verse.map.lane_segment_3d.StraightLane_3d": [[168, "verse-map-lane-segment-3d-straightlane-3d"]], "verse.map.lane_segment_3d.func_a": [[169, "verse-map-lane-segment-3d-func-a"]], "verse.map.lane_segment_3d.func_b": [[170, "verse-map-lane-segment-3d-func-b"]], "verse.map.lane_segment_3d.get_center_radius": [[171, "verse-map-lane-segment-3d-get-center-radius"]], "verse.map.lane_segment_3d.get_coor_by_rt": [[172, "verse-map-lane-segment-3d-get-coor-by-rt"]], "verse.map.lane_segment_3d.get_rtp_by_coor": [[173, "verse-map-lane-segment-3d-get-rtp-by-coor"]], "verse.map.lane_segment_3d.get_theta_by_coor": [[174, "verse-map-lane-segment-3d-get-theta-by-coor"]], "verse.map.opendrive_parser": [[175, "module-verse.map.opendrive_parser"]], "verse.map.opendrive_parser.check_valid_side": [[176, "verse-map-opendrive-parser-check-valid-side"]], "verse.map.opendrive_parser.condense_matrix": [[177, "verse-map-opendrive-parser-condense-matrix"]], "verse.map.opendrive_parser.file_parser": [[178, "verse-map-opendrive-parser-file-parser"]], "verse.map.opendrive_parser.opendrive_map": [[179, "verse-map-opendrive-parser-opendrive-map"]], "verse.map.opendrive_parser.road_traverser": [[180, "verse-map-opendrive-parser-road-traverser"]], "verse.parser": [[181, "module-verse.parser"]], "verse.parser.astunparser": [[182, "module-verse.parser.astunparser"]], "verse.parser.astunparser.Unparser": [[183, "verse-parser-astunparser-unparser"]], "verse.parser.astunparser.interleave": [[184, "verse-parser-astunparser-interleave"]], "verse.parser.astunparser.main": [[185, "verse-parser-astunparser-main"]], "verse.parser.astunparser.roundtrip": [[186, "verse-parser-astunparser-roundtrip"]], "verse.parser.astunparser.testdir": [[187, "verse-parser-astunparser-testdir"]], "verse.parser.astunparser.unparse": [[188, "verse-parser-astunparser-unparse"]], "verse.parser.parser": [[189, "module-verse.parser.parser"]], "verse.parser.parser.ArgSubstituter": [[190, "verse-parser-parser-argsubstituter"]], "verse.parser.parser.Assert": [[191, "verse-parser-parser-assert"]], "verse.parser.parser.CompiledAssert": [[192, "verse-parser-parser-compiledassert"]], "verse.parser.parser.CondVal": [[193, "verse-parser-parser-condval"]], "verse.parser.parser.CondValCase": [[194, "verse-parser-parser-condvalcase"]], "verse.parser.parser.ControllerIR": [[195, "verse-parser-parser-controllerir"]], "verse.parser.parser.CustomIR": [[196, "verse-parser-parser-customir"]], "verse.parser.parser.Env": [[197, "verse-parser-parser-env"]], "verse.parser.parser.Lambda": [[198, "verse-parser-parser-lambda"]], "verse.parser.parser.LambdaArg": [[199, "verse-parser-parser-lambdaarg"]], "verse.parser.parser.ModeDef": [[200, "verse-parser-parser-modedef"]], "verse.parser.parser.ModePath": [[201, "verse-parser-parser-modepath"]], "verse.parser.parser.Reduction": [[202, "verse-parser-parser-reduction"]], "verse.parser.parser.ReductionType": [[203, "verse-parser-parser-reductiontype"]], "verse.parser.parser.ScopeLevel": [[204, "verse-parser-parser-scopelevel"]], "verse.parser.parser.StateDef": [[205, "verse-parser-parser-statedef"]], "verse.parser.parser._Assert": [[206, "verse-parser-parser-assert"]], "verse.parser.parser.ast_dump": [[207, "verse-parser-parser-ast-dump"]], "verse.parser.parser.compile_expr": [[208, "verse-parser-parser-compile-expr"]], "verse.parser.parser.find": [[209, "verse-parser-parser-find"]], "verse.parser.parser.fully_cond": [[210, "verse-parser-parser-fully-cond"]], "verse.parser.parser.is_main_check": [[211, "verse-parser-parser-is-main-check"]], "verse.parser.parser.merge_assert": [[212, "verse-parser-parser-merge-assert"]], "verse.parser.parser.merge_conds": [[213, "verse-parser-parser-merge-conds"]], "verse.parser.parser.merge_if": [[214, "verse-parser-parser-merge-if"]], "verse.parser.parser.merge_if_single": [[215, "verse-parser-parser-merge-if-single"]], "verse.parser.parser.merge_if_val": [[216, "verse-parser-parser-merge-if-val"]], "verse.parser.parser.not_ir_ast": [[217, "verse-parser-parser-not-ir-ast"]], "verse.parser.parser.proc": [[218, "verse-parser-parser-proc"]], "verse.parser.parser.proc_assign": [[219, "verse-parser-parser-proc-assign"]], "verse.parser.parser.unparse": [[220, "verse-parser-parser-unparse"]], "verse.plotter": [[221, "module-verse.plotter"]], "verse.plotter.plotter2D": [[222, "module-verse.plotter.plotter2D"]], "verse.plotter.plotter2D.check_dim": [[223, "verse-plotter-plotter2d-check-dim"]], "verse.plotter.plotter2D.create_anime_dict": [[224, "verse-plotter-plotter2d-create-anime-dict"]], "verse.plotter.plotter2D.draw_map": [[225, "verse-plotter-plotter2d-draw-map"]], "verse.plotter.plotter2D.duration": [[226, "verse-plotter-plotter2d-duration"]], "verse.plotter.plotter2D.get_text_pos": [[227, "verse-plotter-plotter2d-get-text-pos"]], "verse.plotter.plotter2D.num_digits": [[228, "verse-plotter-plotter2d-num-digits"]], "verse.plotter.plotter2D.reachtube_anime": [[229, "verse-plotter-plotter2d-reachtube-anime"]], "verse.plotter.plotter2D.reachtube_tree": [[230, "verse-plotter-plotter2d-reachtube-tree"]], "verse.plotter.plotter2D.reachtube_tree_single": [[231, "verse-plotter-plotter2d-reachtube-tree-single"]], "verse.plotter.plotter2D.sample_trace": [[232, "verse-plotter-plotter2d-sample-trace"]], "verse.plotter.plotter2D.simulation_anime": [[233, "verse-plotter-plotter2d-simulation-anime"]], "verse.plotter.plotter2D.simulation_tree": [[234, "verse-plotter-plotter2d-simulation-tree"]], "verse.plotter.plotter2D.simulation_tree_single": [[235, "verse-plotter-plotter2d-simulation-tree-single"]], "verse.plotter.plotter2D.update_style": [[236, "verse-plotter-plotter2d-update-style"]], "verse.plotter.plotter2D_old": [[237, "module-verse.plotter.plotter2D_old"]], "verse.plotter.plotter2D_old.generate_simulation_anime": [[238, "verse-plotter-plotter2d-old-generate-simulation-anime"]], "verse.plotter.plotter2D_old.plot": [[239, "verse-plotter-plotter2d-old-plot"]], "verse.plotter.plotter2D_old.plot_map": [[240, "verse-plotter-plotter2d-old-plot-map"]], "verse.plotter.plotter2D_old.plot_reachtube_tree": [[241, "verse-plotter-plotter2d-old-plot-reachtube-tree"]], "verse.plotter.plotter2D_old.plot_simulation_tree": [[242, "verse-plotter-plotter2d-old-plot-simulation-tree"]], "verse.plotter.plotter3D": [[243, "module-verse.plotter.plotter3D"]], "verse.plotter.plotter3D.plot3dMap": [[244, "verse-plotter-plotter3d-plot3dmap"]], "verse.plotter.plotter3D.plot3dReachtube": [[245, "verse-plotter-plotter3d-plot3dreachtube"]], "verse.plotter.plotter3D.plot3dReachtubeSingle": [[246, "verse-plotter-plotter3d-plot3dreachtubesingle"]], "verse.plotter.plotter3D.plot_line_3d": [[247, "verse-plotter-plotter3d-plot-line-3d"]], "verse.plotter.plotter3D.plot_point_3d": [[248, "verse-plotter-plotter3d-plot-point-3d"]], "verse.plotter.plotter3D.plot_polytope_3d": [[249, "verse-plotter-plotter3d-plot-polytope-3d"]], "verse.plotter.plotter3D_new": [[250, "module-verse.plotter.plotter3D_new"]], "verse.plotter.plotter3D_new.check_dim": [[251, "verse-plotter-plotter3d-new-check-dim"]], "verse.plotter.plotter3D_new.draw_map_3d": [[252, "verse-plotter-plotter3d-new-draw-map-3d"]], "verse.plotter.plotter3D_new.reachtube_tree_3d": [[253, "verse-plotter-plotter3d-new-reachtube-tree-3d"]], "verse.plotter.plotter3D_new.reachtube_tree_single_3d": [[254, "verse-plotter-plotter3d-new-reachtube-tree-single-3d"]], "verse.plotter.plotter3D_new.sample_trace": [[255, "verse-plotter-plotter3d-new-sample-trace"]], "verse.plotter.plotter3D_new.simulation_tree_3d": [[256, "verse-plotter-plotter3d-new-simulation-tree-3d"]], "verse.plotter.plotter3D_new.simulation_tree_single_3d": [[257, "verse-plotter-plotter3d-new-simulation-tree-single-3d"]], "verse.plotter.plotter3D_new.update_style": [[258, "verse-plotter-plotter3d-new-update-style"]], "verse.scenario": [[259, "module-verse.scenario"]], "verse.scenario.scenario": [[260, "module-verse.scenario.scenario"]], "verse.scenario.scenario.Benchmark": [[261, "verse-scenario-scenario-benchmark"]], "verse.scenario.scenario.ExprConfig": [[262, "verse-scenario-scenario-exprconfig"]], "verse.scenario.scenario.Scenario": [[263, "verse-scenario-scenario-scenario"]], "verse.scenario.scenario.ScenarioConfig": [[264, "verse-scenario-scenario-scenarioconfig"]], "verse.scenario.scenario.check_ray_init": [[265, "verse-scenario-scenario-check-ray-init"]], "verse.scenario.scenario.red": [[266, "verse-scenario-scenario-red"]], "verse.sensor": [[267, "module-verse.sensor"]], "verse.sensor.base_sensor": [[268, "module-verse.sensor.base_sensor"]], "verse.sensor.base_sensor.BaseSensor": [[269, "verse-sensor-base-sensor-basesensor"]], "verse.sensor.base_sensor.add_states_2d": [[270, "verse-sensor-base-sensor-add-states-2d"]], "verse.sensor.base_sensor.add_states_3d": [[271, "verse-sensor-base-sensor-add-states-3d"]], "verse.sensor.base_sensor.adds": [[272, "verse-sensor-base-sensor-adds"]], "verse.sensor.base_sensor.set_states_2d": [[273, "verse-sensor-base-sensor-set-states-2d"]], "verse.sensor.base_sensor.set_states_3d": [[274, "verse-sensor-base-sensor-set-states-3d"]], "verse.sensor.base_sensor.sets": [[275, "verse-sensor-base-sensor-sets"]], "verse.sensor.example_sensor": [[276, "module-verse.sensor.example_sensor"]], "verse.sensor.example_sensor.craft_sensor": [[277, "module-verse.sensor.example_sensor.craft_sensor"]], "verse.sensor.example_sensor.craft_sensor.CraftSensor": [[278, "verse-sensor-example-sensor-craft-sensor-craftsensor"]], "verse.sensor.example_sensor.craft_sensor.add_states_2d_ball": [[279, "verse-sensor-example-sensor-craft-sensor-add-states-2d-ball"]], "verse.sensor.example_sensor.craft_sensor.add_states_3d_ball": [[280, "verse-sensor-example-sensor-craft-sensor-add-states-3d-ball"]], "verse.sensor.example_sensor.craft_sensor.adds": [[281, "verse-sensor-example-sensor-craft-sensor-adds"]], "verse.sensor.example_sensor.craft_sensor.set_states_2d_ball": [[282, "verse-sensor-example-sensor-craft-sensor-set-states-2d-ball"]], "verse.sensor.example_sensor.craft_sensor.set_states_3d_ball": [[283, "verse-sensor-example-sensor-craft-sensor-set-states-3d-ball"]], "verse.sensor.example_sensor.craft_sensor.sets": [[284, "verse-sensor-example-sensor-craft-sensor-sets"]], "verse.sensor.example_sensor.quadrotor_sensor": [[285, "module-verse.sensor.example_sensor.quadrotor_sensor"]], "verse.sensor.example_sensor.quadrotor_sensor.QuadrotorSensor": [[286, "verse-sensor-example-sensor-quadrotor-sensor-quadrotorsensor"]], "verse.sensor.example_sensor.quadrotor_sensor.add_states_2d_ball": [[287, "verse-sensor-example-sensor-quadrotor-sensor-add-states-2d-ball"]], "verse.sensor.example_sensor.quadrotor_sensor.add_states_3d_ball": [[288, "verse-sensor-example-sensor-quadrotor-sensor-add-states-3d-ball"]], "verse.sensor.example_sensor.quadrotor_sensor.adds": [[289, "verse-sensor-example-sensor-quadrotor-sensor-adds"]], "verse.sensor.example_sensor.quadrotor_sensor.set_states_2d_ball": [[290, "verse-sensor-example-sensor-quadrotor-sensor-set-states-2d-ball"]], "verse.sensor.example_sensor.quadrotor_sensor.set_states_3d_ball": [[291, "verse-sensor-example-sensor-quadrotor-sensor-set-states-3d-ball"]], "verse.sensor.example_sensor.quadrotor_sensor.sets": [[292, "verse-sensor-example-sensor-quadrotor-sensor-sets"]], "verse.sensor.example_sensor.single_sensor": [[293, "module-verse.sensor.example_sensor.single_sensor"]], "verse.sensor.example_sensor.single_sensor.FakeSensor3": [[294, "verse-sensor-example-sensor-single-sensor-fakesensor3"]], "verse.sensor.example_sensor.single_sensor.FakeSensor4": [[295, "verse-sensor-example-sensor-single-sensor-fakesensor4"]], "verse.sensor.example_sensor.single_sensor.SingleSensor": [[296, "verse-sensor-example-sensor-single-sensor-singlesensor"]], "verse.sensor.example_sensor.single_sensor.add_states_2d": [[297, "verse-sensor-example-sensor-single-sensor-add-states-2d"]], "verse.sensor.example_sensor.single_sensor.add_states_2d_ball": [[298, "verse-sensor-example-sensor-single-sensor-add-states-2d-ball"]], "verse.sensor.example_sensor.single_sensor.add_states_3d": [[299, "verse-sensor-example-sensor-single-sensor-add-states-3d"]], "verse.sensor.example_sensor.single_sensor.add_states_3d_ball": [[300, "verse-sensor-example-sensor-single-sensor-add-states-3d-ball"]], "verse.sensor.example_sensor.single_sensor.adds": [[301, "verse-sensor-example-sensor-single-sensor-adds"]], "verse.sensor.example_sensor.single_sensor.set_states_2d": [[302, "verse-sensor-example-sensor-single-sensor-set-states-2d"]], "verse.sensor.example_sensor.single_sensor.set_states_2d_ball": [[303, "verse-sensor-example-sensor-single-sensor-set-states-2d-ball"]], "verse.sensor.example_sensor.single_sensor.set_states_3d": [[304, "verse-sensor-example-sensor-single-sensor-set-states-3d"]], "verse.sensor.example_sensor.single_sensor.set_states_3d_ball": [[305, "verse-sensor-example-sensor-single-sensor-set-states-3d-ball"]], "verse.sensor.example_sensor.single_sensor.sets": [[306, "verse-sensor-example-sensor-single-sensor-sets"]], "verse.sensor.example_sensor.thermo_sensor": [[307, "module-verse.sensor.example_sensor.thermo_sensor"]], "verse.sensor.example_sensor.thermo_sensor.ThermoSensor": [[308, "verse-sensor-example-sensor-thermo-sensor-thermosensor"]], "verse.sensor.example_sensor.thermo_sensor.add_states_2d_ball": [[309, "verse-sensor-example-sensor-thermo-sensor-add-states-2d-ball"]], "verse.sensor.example_sensor.thermo_sensor.add_states_3d_ball": [[310, "verse-sensor-example-sensor-thermo-sensor-add-states-3d-ball"]], "verse.sensor.example_sensor.thermo_sensor.adds": [[311, "verse-sensor-example-sensor-thermo-sensor-adds"]], "verse.sensor.example_sensor.thermo_sensor.set_states_2d_ball": [[312, "verse-sensor-example-sensor-thermo-sensor-set-states-2d-ball"]], "verse.sensor.example_sensor.thermo_sensor.set_states_3d_ball": [[313, "verse-sensor-example-sensor-thermo-sensor-set-states-3d-ball"]], "verse.sensor.example_sensor.thermo_sensor.sets": [[314, "verse-sensor-example-sensor-thermo-sensor-sets"]], "Agent": [[315, "agent"]], "Contributors": [[316, "contributors"]], "Getting Started": [[317, "getting-started"]], "Welcome to verse\u2019s documentation!": [[318, "welcome-to-verse-s-documentation"]], "Contents:": [[318, null]], "API Documentation": [[318, "api-documentation"]], "Indices and tables": [[318, "indices-and-tables"]], "Map": [[319, "map"]], "Simulations": [[320, "simulations"]], "Reachtubes": [[320, "reachtubes"]], "Parser": [[321, "parser"]], "Goals": [[321, "goals"]], "Working Principle": [[321, "working-principle"]], "Conditional Values": [[321, "conditional-values"]], "<a name=\"Reductions\"></a>Reductions": [[321, "reductions"]], "Limitations": [[321, "limitations"]], "Visualization": [[322, "visualization"]], "Function list": [[322, "function-list"]], "Common paramteres": [[322, "common-paramteres"]], "2D Visualization": [[322, "d-visualization"]], "simulation_tree": [[322, "simulation-tree"]], "simulation_anime": [[322, "simulation-anime"]], "reachtube_tree": [[322, "reachtube-tree"]], "reachtube_anime": [[322, "reachtube-anime"]], "3D Visualization": [[322, "id1"]], "Scenario": [[323, "scenario"]], "Sensor": [[324, "sensor"]]}, "indexentries": {"module": [[0, "module-verse"], [1, "module-verse.agents"], [2, "module-verse.agents.base_agent"], [4, "module-verse.agents.example_agent"], [5, "module-verse.agents.example_agent.ball_agent"], [7, "module-verse.agents.example_agent.car_agent"], [13, "module-verse.agents.example_agent.origin_agent"], [17, "module-verse.agents.example_agent.quadrotor_agent"], [20, "module-verse.agents.example_agent.robot_agent"], [22, "module-verse.agents.example_agent.sign_agent"], [24, "module-verse.analysis"], [25, "module-verse.analysis.analysis_tree"], [31, "module-verse.analysis.dryvr"], [39, "module-verse.analysis.incremental"], [54, "module-verse.analysis.mixmonotone"], [63, "module-verse.analysis.simulator"], [73, "module-verse.analysis.utils"], [101, "module-verse.analysis.verifier"], [106, "module-verse.automaton"], [107, "module-verse.automaton.guard"], [112, "module-verse.automaton.hybrid_automaton"], [114, "module-verse.automaton.hybrid_io_automaton"], [116, "module-verse.automaton.reset"], [118, "module-verse.map"], [119, "module-verse.map.example_map"], [120, "module-verse.map.example_map.intersection"], [122, "module-verse.map.example_map.map_tacas"], [129, "module-verse.map.example_map.simple_map"], [132, "module-verse.map.example_map.simple_map2"], [139, "module-verse.map.example_map.simple_map_3d"], [149, "module-verse.map.lane"], [151, "module-verse.map.lane_3d"], [153, "module-verse.map.lane_map"], [155, "module-verse.map.lane_map_3d"], [157, "module-verse.map.lane_segment"], [163, "module-verse.map.lane_segment_3d"], [175, "module-verse.map.opendrive_parser"], [181, "module-verse.parser"], [182, "module-verse.parser.astunparser"], [189, "module-verse.parser.parser"], [221, "module-verse.plotter"], [222, "module-verse.plotter.plotter2D"], [237, "module-verse.plotter.plotter2D_old"], [243, "module-verse.plotter.plotter3D"], [250, "module-verse.plotter.plotter3D_new"], [259, "module-verse.scenario"], [260, "module-verse.scenario.scenario"], [267, "module-verse.sensor"], [268, "module-verse.sensor.base_sensor"], [276, "module-verse.sensor.example_sensor"], [277, "module-verse.sensor.example_sensor.craft_sensor"], [285, "module-verse.sensor.example_sensor.quadrotor_sensor"], [293, "module-verse.sensor.example_sensor.single_sensor"], [307, "module-verse.sensor.example_sensor.thermo_sensor"]], "verse": [[0, "module-verse"]], "verse.agents": [[1, "module-verse.agents"]], "verse.agents.base_agent": [[2, "module-verse.agents.base_agent"]], "baseagent (class in verse.agents.base_agent)": [[3, "verse.agents.base_agent.BaseAgent"]], "tc_simulate() (verse.agents.base_agent.baseagent method)": [[3, "verse.agents.base_agent.BaseAgent.TC_simulate"]], "__init__() (verse.agents.base_agent.baseagent method)": [[3, "verse.agents.base_agent.BaseAgent.__init__"]], "verse.agents.example_agent": [[4, "module-verse.agents.example_agent"]], "verse.agents.example_agent.ball_agent": [[5, "module-verse.agents.example_agent.ball_agent"]], "ballagent (class in verse.agents.example_agent.ball_agent)": [[6, "verse.agents.example_agent.ball_agent.BallAgent"]], "tc_simulate() (verse.agents.example_agent.ball_agent.ballagent method)": [[6, "verse.agents.example_agent.ball_agent.BallAgent.TC_simulate"]], "__init__() (verse.agents.example_agent.ball_agent.ballagent method)": [[6, "verse.agents.example_agent.ball_agent.BallAgent.__init__"]], "dynamic() (verse.agents.example_agent.ball_agent.ballagent static method)": [[6, "verse.agents.example_agent.ball_agent.BallAgent.dynamic"]], "verse.agents.example_agent.car_agent": [[7, "module-verse.agents.example_agent.car_agent"]], "caragent (class in verse.agents.example_agent.car_agent)": [[8, "verse.agents.example_agent.car_agent.CarAgent"]], "tc_simulate() (verse.agents.example_agent.car_agent.caragent method)": [[8, "verse.agents.example_agent.car_agent.CarAgent.TC_simulate"]], "__init__() (verse.agents.example_agent.car_agent.caragent method)": [[8, "verse.agents.example_agent.car_agent.CarAgent.__init__"]], "caragentdebounced (class in verse.agents.example_agent.car_agent)": [[9, "verse.agents.example_agent.car_agent.CarAgentDebounced"]], "tc_simulate() (verse.agents.example_agent.car_agent.caragentdebounced method)": [[9, "verse.agents.example_agent.car_agent.CarAgentDebounced.TC_simulate"]], "__init__() (verse.agents.example_agent.car_agent.caragentdebounced method)": [[9, "verse.agents.example_agent.car_agent.CarAgentDebounced.__init__"]], "caragentswitch2 (class in verse.agents.example_agent.car_agent)": [[10, "verse.agents.example_agent.car_agent.CarAgentSwitch2"]], "tc_simulate() (verse.agents.example_agent.car_agent.caragentswitch2 method)": [[10, "verse.agents.example_agent.car_agent.CarAgentSwitch2.TC_simulate"]], "__init__() (verse.agents.example_agent.car_agent.caragentswitch2 method)": [[10, "verse.agents.example_agent.car_agent.CarAgentSwitch2.__init__"]], "npcagent (class in verse.agents.example_agent.car_agent)": [[11, "verse.agents.example_agent.car_agent.NPCAgent"]], "tc_simulate() (verse.agents.example_agent.car_agent.npcagent method)": [[11, "verse.agents.example_agent.car_agent.NPCAgent.TC_simulate"]], "__init__() (verse.agents.example_agent.car_agent.npcagent method)": [[11, "verse.agents.example_agent.car_agent.NPCAgent.__init__"]], "action_handler() (verse.agents.example_agent.car_agent.npcagent method)": [[11, "verse.agents.example_agent.car_agent.NPCAgent.action_handler"]], "tc_simulate() (verse.agents.example_agent.car_agent.weirdcaragent method)": [[12, "verse.agents.example_agent.car_agent.WeirdCarAgent.TC_simulate"]], "weirdcaragent (class in verse.agents.example_agent.car_agent)": [[12, "verse.agents.example_agent.car_agent.WeirdCarAgent"]], "__init__() (verse.agents.example_agent.car_agent.weirdcaragent method)": [[12, "verse.agents.example_agent.car_agent.WeirdCarAgent.__init__"]], "verse.agents.example_agent.origin_agent": [[13, "module-verse.agents.example_agent.origin_agent"]], "tc_simulate() (verse.agents.example_agent.origin_agent.craft_agent method)": [[14, "verse.agents.example_agent.origin_agent.craft_agent.TC_simulate"]], "__init__() (verse.agents.example_agent.origin_agent.craft_agent method)": [[14, "verse.agents.example_agent.origin_agent.craft_agent.__init__"]], "craft_agent (class in verse.agents.example_agent.origin_agent)": [[14, "verse.agents.example_agent.origin_agent.craft_agent"]], "tc_simulate() (verse.agents.example_agent.origin_agent.thermo_agent method)": [[15, "verse.agents.example_agent.origin_agent.thermo_agent.TC_simulate"]], "__init__() (verse.agents.example_agent.origin_agent.thermo_agent method)": [[15, "verse.agents.example_agent.origin_agent.thermo_agent.__init__"]], "thermo_agent (class in verse.agents.example_agent.origin_agent)": [[15, "verse.agents.example_agent.origin_agent.thermo_agent"]], "tc_simulate() (verse.agents.example_agent.origin_agent.vanderpol_agent method)": [[16, "verse.agents.example_agent.origin_agent.vanderpol_agent.TC_simulate"]], "__init__() (verse.agents.example_agent.origin_agent.vanderpol_agent method)": [[16, "verse.agents.example_agent.origin_agent.vanderpol_agent.__init__"]], "vanderpol_agent (class in verse.agents.example_agent.origin_agent)": [[16, "verse.agents.example_agent.origin_agent.vanderpol_agent"]], "verse.agents.example_agent.quadrotor_agent": [[17, "module-verse.agents.example_agent.quadrotor_agent"]], "ffnnc (class in verse.agents.example_agent.quadrotor_agent)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC"]], "__init__() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.__init__"]], "add_module() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.add_module"]], "apply() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.apply"]], "bfloat16() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.bfloat16"]], "buffers() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.buffers"]], "children() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.children"]], "cpu() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.cpu"]], "cuda() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.cuda"]], "double() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.double"]], "eval() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.eval"]], "extra_repr() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.extra_repr"]], "float() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.float"]], "forward() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.forward"]], "get_buffer() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.get_buffer"]], "get_extra_state() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.get_extra_state"]], "get_parameter() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.get_parameter"]], "get_submodule() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.get_submodule"]], "half() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.half"]], "ipu() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.ipu"]], "load_state_dict() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.load_state_dict"]], "modules() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.modules"]], "named_buffers() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.named_buffers"]], "named_children() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.named_children"]], "named_modules() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.named_modules"]], "named_parameters() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.named_parameters"]], "parameters() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.parameters"]], "register_backward_hook() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.register_backward_hook"]], "register_buffer() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.register_buffer"]], "register_forward_hook() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.register_forward_hook"]], "register_forward_pre_hook() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.register_forward_pre_hook"]], "register_full_backward_hook() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.register_full_backward_hook"]], "register_load_state_dict_post_hook() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.register_load_state_dict_post_hook"]], "register_module() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.register_module"]], "register_parameter() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.register_parameter"]], "requires_grad_() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.requires_grad_"]], "set_extra_state() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.set_extra_state"]], "share_memory() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.share_memory"]], "state_dict() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.state_dict"]], "to() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.to"]], "to_empty() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.to_empty"]], "train() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.train"]], "type() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.type"]], "xpu() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.xpu"]], "zero_grad() (verse.agents.example_agent.quadrotor_agent.ffnnc method)": [[18, "verse.agents.example_agent.quadrotor_agent.FFNNC.zero_grad"]], "quadrotoragent (class in verse.agents.example_agent.quadrotor_agent)": [[19, "verse.agents.example_agent.quadrotor_agent.QuadrotorAgent"]], "tc_simulate() (verse.agents.example_agent.quadrotor_agent.quadrotoragent method)": [[19, "verse.agents.example_agent.quadrotor_agent.QuadrotorAgent.TC_simulate"]], "__init__() (verse.agents.example_agent.quadrotor_agent.quadrotoragent method)": [[19, "verse.agents.example_agent.quadrotor_agent.QuadrotorAgent.__init__"]], "verse.agents.example_agent.robot_agent": [[20, "module-verse.agents.example_agent.robot_agent"]], "robotagent (class in verse.agents.example_agent.robot_agent)": [[21, "verse.agents.example_agent.robot_agent.RobotAgent"]], "tc_simulate() (verse.agents.example_agent.robot_agent.robotagent method)": [[21, "verse.agents.example_agent.robot_agent.RobotAgent.TC_simulate"]], "__init__() (verse.agents.example_agent.robot_agent.robotagent method)": [[21, "verse.agents.example_agent.robot_agent.RobotAgent.__init__"]], "verse.agents.example_agent.sign_agent": [[22, "module-verse.agents.example_agent.sign_agent"]], "signagent (class in verse.agents.example_agent.sign_agent)": [[23, "verse.agents.example_agent.sign_agent.SignAgent"]], "tc_simulate() (verse.agents.example_agent.sign_agent.signagent method)": [[23, "verse.agents.example_agent.sign_agent.SignAgent.TC_simulate"]], "__init__() (verse.agents.example_agent.sign_agent.signagent method)": [[23, "verse.agents.example_agent.sign_agent.SignAgent.__init__"]], "verse.analysis": [[24, "module-verse.analysis"]], "verse.analysis.analysis_tree": [[25, "module-verse.analysis.analysis_tree"]], "analysistree (class in verse.analysis.analysis_tree)": [[26, "verse.analysis.analysis_tree.AnalysisTree"]], "__init__() (verse.analysis.analysis_tree.analysistree method)": [[26, "verse.analysis.analysis_tree.AnalysisTree.__init__"]], "contains() (verse.analysis.analysis_tree.analysistree method)": [[26, "verse.analysis.analysis_tree.AnalysisTree.contains"]], "visualize_dot() (verse.analysis.analysis_tree.analysistree method)": [[26, "verse.analysis.analysis_tree.AnalysisTree.visualize_dot"]], "analysistreenode (class in verse.analysis.analysis_tree)": [[27, "verse.analysis.analysis_tree.AnalysisTreeNode"]], "__init__() (verse.analysis.analysis_tree.analysistreenode method)": [[27, "verse.analysis.analysis_tree.AnalysisTreeNode.__init__"]], "trace (verse.analysis.analysis_tree.analysistreenode attribute)": [[27, "verse.analysis.analysis_tree.AnalysisTreeNode.trace"]], "color_interp() (in module verse.analysis.analysis_tree)": [[28, "verse.analysis.analysis_tree.color_interp"]], "first_transitions() (in module verse.analysis.analysis_tree)": [[29, "verse.analysis.analysis_tree.first_transitions"]], "index_of() (in module verse.analysis.analysis_tree)": [[30, "verse.analysis.analysis_tree.index_of"]], "verse.analysis.dryvr": [[31, "module-verse.analysis.dryvr"]], "all_sensitivities_calc() (in module verse.analysis.dryvr)": [[32, "verse.analysis.dryvr.all_sensitivities_calc"]], "calccenterpoint() (in module verse.analysis.dryvr)": [[33, "verse.analysis.dryvr.calcCenterPoint"]], "calcdelta() (in module verse.analysis.dryvr)": [[34, "verse.analysis.dryvr.calcDelta"]], "calc_bloated_tube() (in module verse.analysis.dryvr)": [[35, "verse.analysis.dryvr.calc_bloated_tube"]], "get_reachtube_segment() (in module verse.analysis.dryvr)": [[36, "verse.analysis.dryvr.get_reachtube_segment"]], "randompoint() (in module verse.analysis.dryvr)": [[37, "verse.analysis.dryvr.randomPoint"]], "trimtraces() (in module verse.analysis.dryvr)": [[38, "verse.analysis.dryvr.trimTraces"]], "verse.analysis.incremental": [[39, "module-verse.analysis.incremental"]], "cachedrttrans (class in verse.analysis.incremental)": [[40, "verse.analysis.incremental.CachedRTTrans"]], "__init__() (verse.analysis.incremental.cachedrttrans method)": [[40, "verse.analysis.incremental.CachedRTTrans.__init__"]], "cachedreachtrans (class in verse.analysis.incremental)": [[41, "verse.analysis.incremental.CachedReachTrans"]], "__init__() (verse.analysis.incremental.cachedreachtrans method)": [[41, "verse.analysis.incremental.CachedReachTrans.__init__"]], "cachedsegment (class in verse.analysis.incremental)": [[42, "verse.analysis.incremental.CachedSegment"]], "__init__() (verse.analysis.incremental.cachedsegment method)": [[42, "verse.analysis.incremental.CachedSegment.__init__"]], "cachedtransition (class in verse.analysis.incremental)": [[43, "verse.analysis.incremental.CachedTransition"]], "__init__() (verse.analysis.incremental.cachedtransition method)": [[43, "verse.analysis.incremental.CachedTransition.__init__"]], "cachedtube (class in verse.analysis.incremental)": [[44, "verse.analysis.incremental.CachedTube"]], "__init__() (verse.analysis.incremental.cachedtube method)": [[44, "verse.analysis.incremental.CachedTube.__init__"]], "reachtubecache (class in verse.analysis.incremental)": [[45, "verse.analysis.incremental.ReachTubeCache"]], "__init__() (verse.analysis.incremental.reachtubecache method)": [[45, "verse.analysis.incremental.ReachTubeCache.__init__"]], "simtracecache (class in verse.analysis.incremental)": [[46, "verse.analysis.incremental.SimTraceCache"]], "__init__() (verse.analysis.incremental.simtracecache method)": [[46, "verse.analysis.incremental.SimTraceCache.__init__"]], "tubecache (class in verse.analysis.incremental)": [[47, "verse.analysis.incremental.TubeCache"]], "__init__() (verse.analysis.incremental.tubecache method)": [[47, "verse.analysis.incremental.TubeCache.__init__"]], "combine_all() (in module verse.analysis.incremental)": [[48, "verse.analysis.incremental.combine_all"]], "convert_reach_trans() (in module verse.analysis.incremental)": [[49, "verse.analysis.incremental.convert_reach_trans"]], "convert_sim_trans() (in module verse.analysis.incremental)": [[50, "verse.analysis.incremental.convert_sim_trans"]], "reach_trans_suit() (in module verse.analysis.incremental)": [[51, "verse.analysis.incremental.reach_trans_suit"]], "sim_trans_suit() (in module verse.analysis.incremental)": [[52, "verse.analysis.incremental.sim_trans_suit"]], "to_simulate() (in module verse.analysis.incremental)": [[53, "verse.analysis.incremental.to_simulate"]], "verse.analysis.mixmonotone": [[54, "module-verse.analysis.mixmonotone"]], "calculate_bloated_tube_mixmono_cont() (in module verse.analysis.mixmonotone)": [[55, "verse.analysis.mixmonotone.calculate_bloated_tube_mixmono_cont"]], "calculate_bloated_tube_mixmono_disc() (in module verse.analysis.mixmonotone)": [[56, "verse.analysis.mixmonotone.calculate_bloated_tube_mixmono_disc"]], "compute_reachtube_mixmono_cont() (in module verse.analysis.mixmonotone)": [[57, "verse.analysis.mixmonotone.compute_reachtube_mixmono_cont"]], "compute_reachtube_mixmono_disc() (in module verse.analysis.mixmonotone)": [[58, "verse.analysis.mixmonotone.compute_reachtube_mixmono_disc"]], "find_max() (in module verse.analysis.mixmonotone)": [[59, "verse.analysis.mixmonotone.find_max"]], "find_max_symbolic() (in module verse.analysis.mixmonotone)": [[60, "verse.analysis.mixmonotone.find_max_symbolic"]], "find_min() (in module verse.analysis.mixmonotone)": [[61, "verse.analysis.mixmonotone.find_min"]], "find_min_symbolic() (in module verse.analysis.mixmonotone)": [[62, "verse.analysis.mixmonotone.find_min_symbolic"]], "verse.analysis.simulator": [[63, "module-verse.analysis.simulator"]], "simconsts (class in verse.analysis.simulator)": [[64, "verse.analysis.simulator.SimConsts"]], "__init__() (verse.analysis.simulator.simconsts method)": [[64, "verse.analysis.simulator.SimConsts.__init__"]], "simulator (class in verse.analysis.simulator)": [[65, "verse.analysis.simulator.Simulator"]], "__init__() (verse.analysis.simulator.simulator method)": [[65, "verse.analysis.simulator.Simulator.__init__"]], "checkheight() (in module verse.analysis.simulator)": [[66, "verse.analysis.simulator.checkHeight"]], "check_sim_transitions() (in module verse.analysis.simulator)": [[67, "verse.analysis.simulator.check_sim_transitions"]], "convertenumtostr() (in module verse.analysis.simulator)": [[68, "verse.analysis.simulator.convertEnumToStr"]], "convertstrtoenum() (in module verse.analysis.simulator)": [[69, "verse.analysis.simulator.convertStrToEnum"]], "disc_field() (in module verse.analysis.simulator)": [[70, "verse.analysis.simulator.disc_field"]], "pack_env() (in module verse.analysis.simulator)": [[71, "verse.analysis.simulator.pack_env"]], "red() (in module verse.analysis.simulator)": [[72, "verse.analysis.simulator.red"]], "verse.analysis.utils": [[73, "module-verse.analysis.utils"]], "are_polygons_intersecting() (in module verse.analysis.utils)": [[74, "verse.analysis.utils.are_polygons_intersecting"]], "class_from_path() (in module verse.analysis.utils)": [[75, "verse.analysis.utils.class_from_path"]], "confidence_ellipsoid() (in module verse.analysis.utils)": [[76, "verse.analysis.utils.confidence_ellipsoid"]], "confidence_polytope() (in module verse.analysis.utils)": [[77, "verse.analysis.utils.confidence_polytope"]], "constrain() (in module verse.analysis.utils)": [[78, "verse.analysis.utils.constrain"]], "dedup() (in module verse.analysis.utils)": [[79, "verse.analysis.utils.dedup"]], "distance_to_circle() (in module verse.analysis.utils)": [[80, "verse.analysis.utils.distance_to_circle"]], "distance_to_rect() (in module verse.analysis.utils)": [[81, "verse.analysis.utils.distance_to_rect"]], "do_every() (in module verse.analysis.utils)": [[82, "verse.analysis.utils.do_every"]], "get_class_path() (in module verse.analysis.utils)": [[83, "verse.analysis.utils.get_class_path"]], "has_corner_inside() (in module verse.analysis.utils)": [[84, "verse.analysis.utils.has_corner_inside"]], "interval_distance() (in module verse.analysis.utils)": [[85, "verse.analysis.utils.interval_distance"]], "is_consistent_dataset() (in module verse.analysis.utils)": [[86, "verse.analysis.utils.is_consistent_dataset"]], "is_valid_observation() (in module verse.analysis.utils)": [[87, "verse.analysis.utils.is_valid_observation"]], "lmap() (in module verse.analysis.utils)": [[88, "verse.analysis.utils.lmap"]], "near_split() (in module verse.analysis.utils)": [[89, "verse.analysis.utils.near_split"]], "not_zero() (in module verse.analysis.utils)": [[90, "verse.analysis.utils.not_zero"]], "point_in_ellipse() (in module verse.analysis.utils)": [[91, "verse.analysis.utils.point_in_ellipse"]], "point_in_rectangle() (in module verse.analysis.utils)": [[92, "verse.analysis.utils.point_in_rectangle"]], "point_in_rotated_rectangle() (in module verse.analysis.utils)": [[93, "verse.analysis.utils.point_in_rotated_rectangle"]], "project_polygon() (in module verse.analysis.utils)": [[94, "verse.analysis.utils.project_polygon"]], "rect_corners() (in module verse.analysis.utils)": [[95, "verse.analysis.utils.rect_corners"]], "rotated_rectangles_intersect() (in module verse.analysis.utils)": [[96, "verse.analysis.utils.rotated_rectangles_intersect"]], "sample_rect() (in module verse.analysis.utils)": [[97, "verse.analysis.utils.sample_rect"]], "solve_trinom() (in module verse.analysis.utils)": [[98, "verse.analysis.utils.solve_trinom"]], "to_serializable() (in module verse.analysis.utils)": [[99, "verse.analysis.utils.to_serializable"]], "wrap_to_pi() (in module verse.analysis.utils)": [[100, "verse.analysis.utils.wrap_to_pi"]], "verse.analysis.verifier": [[101, "module-verse.analysis.verifier"]], "reachconsts (class in verse.analysis.verifier)": [[102, "verse.analysis.verifier.ReachConsts"]], "__init__() (verse.analysis.verifier.reachconsts method)": [[102, "verse.analysis.verifier.ReachConsts.__init__"]], "verifier (class in verse.analysis.verifier)": [[103, "verse.analysis.verifier.Verifier"]], "__init__() (verse.analysis.verifier.verifier method)": [[103, "verse.analysis.verifier.Verifier.__init__"]], "calculate_full_bloated_tube_simple() (verse.analysis.verifier.verifier static method)": [[103, "verse.analysis.verifier.Verifier.calculate_full_bloated_tube_simple"]], "check_cache_bloated_tube() (verse.analysis.verifier.verifier method)": [[103, "verse.analysis.verifier.Verifier.check_cache_bloated_tube"]], "checkheight() (in module verse.analysis.verifier)": [[104, "verse.analysis.verifier.checkHeight"]], "combine_rect() (in module verse.analysis.verifier)": [[105, "verse.analysis.verifier.combine_rect"]], "verse.automaton": [[106, "module-verse.automaton"]], "verse.automaton.guard": [[107, "module-verse.automaton.guard"]], "guardexpressionast (class in verse.automaton.guard)": [[108, "verse.automaton.guard.GuardExpressionAst"]], "__init__() (verse.automaton.guard.guardexpressionast method)": [[108, "verse.automaton.guard.GuardExpressionAst.__init__"]], "evaluate_guard_disc() (verse.automaton.guard.guardexpressionast method)": [[108, "verse.automaton.guard.GuardExpressionAst.evaluate_guard_disc"]], "evaluate_guard_hybrid() (verse.automaton.guard.guardexpressionast method)": [[108, "verse.automaton.guard.GuardExpressionAst.evaluate_guard_hybrid"]], "generate_z3_expression() (verse.automaton.guard.guardexpressionast method)": [[108, "verse.automaton.guard.GuardExpressionAst.generate_z3_expression"]], "logictreenode (class in verse.automaton.guard)": [[109, "verse.automaton.guard.LogicTreeNode"]], "__init__() (verse.automaton.guard.logictreenode method)": [[109, "verse.automaton.guard.LogicTreeNode.__init__"]], "nodesubstituter (class in verse.automaton.guard)": [[110, "verse.automaton.guard.NodeSubstituter"]], "__init__() (verse.automaton.guard.nodesubstituter method)": [[110, "verse.automaton.guard.NodeSubstituter.__init__"]], "generic_visit() (verse.automaton.guard.nodesubstituter method)": [[110, "verse.automaton.guard.NodeSubstituter.generic_visit"]], "visit() (verse.automaton.guard.nodesubstituter method)": [[110, "verse.automaton.guard.NodeSubstituter.visit"]], "valuesubstituter (class in verse.automaton.guard)": [[111, "verse.automaton.guard.ValueSubstituter"]], "__init__() (verse.automaton.guard.valuesubstituter method)": [[111, "verse.automaton.guard.ValueSubstituter.__init__"]], "generic_visit() (verse.automaton.guard.valuesubstituter method)": [[111, "verse.automaton.guard.ValueSubstituter.generic_visit"]], "visit() (verse.automaton.guard.valuesubstituter method)": [[111, "verse.automaton.guard.ValueSubstituter.visit"]], "verse.automaton.hybrid_automaton": [[112, "module-verse.automaton.hybrid_automaton"]], "hybridautomaton (class in verse.automaton.hybrid_automaton)": [[113, "verse.automaton.hybrid_automaton.HybridAutomaton"]], "__init__() (verse.automaton.hybrid_automaton.hybridautomaton method)": [[113, "verse.automaton.hybrid_automaton.HybridAutomaton.__init__"]], "verse.automaton.hybrid_io_automaton": [[114, "module-verse.automaton.hybrid_io_automaton"]], "hybridioautomaton (class in verse.automaton.hybrid_io_automaton)": [[115, "verse.automaton.hybrid_io_automaton.HybridIoAutomaton"]], "__init__() (verse.automaton.hybrid_io_automaton.hybridioautomaton method)": [[115, "verse.automaton.hybrid_io_automaton.HybridIoAutomaton.__init__"]], "verse.automaton.reset": [[116, "module-verse.automaton.reset"]], "resetexpression (class in verse.automaton.reset)": [[117, "verse.automaton.reset.ResetExpression"]], "__init__() (verse.automaton.reset.resetexpression method)": [[117, "verse.automaton.reset.ResetExpression.__init__"]], "verse.map": [[118, "module-verse.map"]], "verse.map.example_map": [[119, "module-verse.map.example_map"]], "verse.map.example_map.intersection": [[120, "module-verse.map.example_map.intersection"]], "intersection (class in verse.map.example_map.intersection)": [[121, "verse.map.example_map.intersection.Intersection"]], "__init__() (verse.map.example_map.intersection.intersection method)": [[121, "verse.map.example_map.intersection.Intersection.__init__"]], "verse.map.example_map.map_tacas": [[122, "module-verse.map.example_map.map_tacas"]], "m1 (class in verse.map.example_map.map_tacas)": [[123, "verse.map.example_map.map_tacas.M1"]], "__init__() (verse.map.example_map.map_tacas.m1 method)": [[123, "verse.map.example_map.map_tacas.M1.__init__"]], "m2 (class in verse.map.example_map.map_tacas)": [[124, "verse.map.example_map.map_tacas.M2"]], "__init__() (verse.map.example_map.map_tacas.m2 method)": [[124, "verse.map.example_map.map_tacas.M2.__init__"]], "m3 (class in verse.map.example_map.map_tacas)": [[125, "verse.map.example_map.map_tacas.M3"]], "__init__() (verse.map.example_map.map_tacas.m3 method)": [[125, "verse.map.example_map.map_tacas.M3.__init__"]], "m5 (class in verse.map.example_map.map_tacas)": [[126, "verse.map.example_map.map_tacas.M5"]], "__init__() (verse.map.example_map.map_tacas.m5 method)": [[126, "verse.map.example_map.map_tacas.M5.__init__"]], "m6 (class in verse.map.example_map.map_tacas)": [[127, "verse.map.example_map.map_tacas.M6"]], "__init__() (verse.map.example_map.map_tacas.m6 method)": [[127, "verse.map.example_map.map_tacas.M6.__init__"]], "get_end() (in module verse.map.example_map.map_tacas)": [[128, "verse.map.example_map.map_tacas.get_end"]], "verse.map.example_map.simple_map": [[129, "module-verse.map.example_map.simple_map"]], "simplemap (class in verse.map.example_map.simple_map)": [[130, "verse.map.example_map.simple_map.SimpleMap"]], "__init__() (verse.map.example_map.simple_map.simplemap method)": [[130, "verse.map.example_map.simple_map.SimpleMap.__init__"]], "simplemap2 (class in verse.map.example_map.simple_map)": [[131, "verse.map.example_map.simple_map.SimpleMap2"]], "__init__() (verse.map.example_map.simple_map.simplemap2 method)": [[131, "verse.map.example_map.simple_map.SimpleMap2.__init__"]], "verse.map.example_map.simple_map2": [[132, "module-verse.map.example_map.simple_map2"]], "simplemap2 (class in verse.map.example_map.simple_map2)": [[133, "verse.map.example_map.simple_map2.SimpleMap2"]], "__init__() (verse.map.example_map.simple_map2.simplemap2 method)": [[133, "verse.map.example_map.simple_map2.SimpleMap2.__init__"]], "simplemap3 (class in verse.map.example_map.simple_map2)": [[134, "verse.map.example_map.simple_map2.SimpleMap3"]], "__init__() (verse.map.example_map.simple_map2.simplemap3 method)": [[134, "verse.map.example_map.simple_map2.SimpleMap3.__init__"]], "simplemap4 (class in verse.map.example_map.simple_map2)": [[135, "verse.map.example_map.simple_map2.SimpleMap4"]], "__init__() (verse.map.example_map.simple_map2.simplemap4 method)": [[135, "verse.map.example_map.simple_map2.SimpleMap4.__init__"]], "simplemap4switch2 (class in verse.map.example_map.simple_map2)": [[136, "verse.map.example_map.simple_map2.SimpleMap4Switch2"]], "__init__() (verse.map.example_map.simple_map2.simplemap4switch2 method)": [[136, "verse.map.example_map.simple_map2.SimpleMap4Switch2.__init__"]], "simplemap5 (class in verse.map.example_map.simple_map2)": [[137, "verse.map.example_map.simple_map2.SimpleMap5"]], "__init__() (verse.map.example_map.simple_map2.simplemap5 method)": [[137, "verse.map.example_map.simple_map2.SimpleMap5.__init__"]], "simplemap6 (class in verse.map.example_map.simple_map2)": [[138, "verse.map.example_map.simple_map2.SimpleMap6"]], "__init__() (verse.map.example_map.simple_map2.simplemap6 method)": [[138, "verse.map.example_map.simple_map2.SimpleMap6.__init__"]], "verse.map.example_map.simple_map_3d": [[139, "module-verse.map.example_map.simple_map_3d"]], "simplemap1 (class in verse.map.example_map.simple_map_3d)": [[140, "verse.map.example_map.simple_map_3d.SimpleMap1"]], "__init__() (verse.map.example_map.simple_map_3d.simplemap1 method)": [[140, "verse.map.example_map.simple_map_3d.SimpleMap1.__init__"]], "simplemap2 (class in verse.map.example_map.simple_map_3d)": [[141, "verse.map.example_map.simple_map_3d.SimpleMap2"]], "__init__() (verse.map.example_map.simple_map_3d.simplemap2 method)": [[141, "verse.map.example_map.simple_map_3d.SimpleMap2.__init__"]], "simplemap3 (class in verse.map.example_map.simple_map_3d)": [[142, "verse.map.example_map.simple_map_3d.SimpleMap3"]], "__init__() (verse.map.example_map.simple_map_3d.simplemap3 method)": [[142, "verse.map.example_map.simple_map_3d.SimpleMap3.__init__"]], "simplemap4 (class in verse.map.example_map.simple_map_3d)": [[143, "verse.map.example_map.simple_map_3d.SimpleMap4"]], "__init__() (verse.map.example_map.simple_map_3d.simplemap4 method)": [[143, "verse.map.example_map.simple_map_3d.SimpleMap4.__init__"]], "simplemap5 (class in verse.map.example_map.simple_map_3d)": [[144, "verse.map.example_map.simple_map_3d.SimpleMap5"]], "__init__() (verse.map.example_map.simple_map_3d.simplemap5 method)": [[144, "verse.map.example_map.simple_map_3d.SimpleMap5.__init__"]], "simplemap6 (class in verse.map.example_map.simple_map_3d)": [[145, "verse.map.example_map.simple_map_3d.SimpleMap6"]], "__init__() (verse.map.example_map.simple_map_3d.simplemap6 method)": [[145, "verse.map.example_map.simple_map_3d.SimpleMap6.__init__"]], "simplemap7 (class in verse.map.example_map.simple_map_3d)": [[146, "verse.map.example_map.simple_map_3d.SimpleMap7"]], "__init__() (verse.map.example_map.simple_map_3d.simplemap7 method)": [[146, "verse.map.example_map.simple_map_3d.SimpleMap7.__init__"]], "get_center_radius() (in module verse.map.example_map.simple_map_3d)": [[147, "verse.map.example_map.simple_map_3d.get_center_radius"]], "get_end() (in module verse.map.example_map.simple_map_3d)": [[148, "verse.map.example_map.simple_map_3d.get_end"]], "verse.map.lane": [[149, "module-verse.map.lane"]], "lane (class in verse.map.lane)": [[150, "verse.map.lane.Lane"]], "__init__() (verse.map.lane.lane method)": [[150, "verse.map.lane.Lane.__init__"]], "verse.map.lane_3d": [[151, "module-verse.map.lane_3d"]], "lane_3d (class in verse.map.lane_3d)": [[152, "verse.map.lane_3d.Lane_3d"]], "__init__() (verse.map.lane_3d.lane_3d method)": [[152, "verse.map.lane_3d.Lane_3d.__init__"]], "verse.map.lane_map": [[153, "module-verse.map.lane_map"]], "lanemap (class in verse.map.lane_map)": [[154, "verse.map.lane_map.LaneMap"]], "__init__() (verse.map.lane_map.lanemap method)": [[154, "verse.map.lane_map.LaneMap.__init__"]], "verse.map.lane_map_3d": [[155, "module-verse.map.lane_map_3d"]], "lanemap_3d (class in verse.map.lane_map_3d)": [[156, "verse.map.lane_map_3d.LaneMap_3d"]], "__init__() (verse.map.lane_map_3d.lanemap_3d method)": [[156, "verse.map.lane_map_3d.LaneMap_3d.__init__"]], "verse.map.lane_segment": [[157, "module-verse.map.lane_segment"]], "abstractlane (class in verse.map.lane_segment)": [[158, "verse.map.lane_segment.AbstractLane"]], "__init__() (verse.map.lane_segment.abstractlane method)": [[158, "verse.map.lane_segment.AbstractLane.__init__"]], "distance() (verse.map.lane_segment.abstractlane method)": [[158, "verse.map.lane_segment.AbstractLane.distance"]], "distance_with_heading() (verse.map.lane_segment.abstractlane method)": [[158, "verse.map.lane_segment.AbstractLane.distance_with_heading"]], "from_config() (verse.map.lane_segment.abstractlane class method)": [[158, "verse.map.lane_segment.AbstractLane.from_config"]], "heading_at() (verse.map.lane_segment.abstractlane method)": [[158, "verse.map.lane_segment.AbstractLane.heading_at"]], "is_reachable_from() (verse.map.lane_segment.abstractlane method)": [[158, "verse.map.lane_segment.AbstractLane.is_reachable_from"]], "local_coordinates() (verse.map.lane_segment.abstractlane method)": [[158, "verse.map.lane_segment.AbstractLane.local_coordinates"]], "metaclass__ (verse.map.lane_segment.abstractlane attribute)": [[158, "verse.map.lane_segment.AbstractLane.metaclass__"]], "on_lane() (verse.map.lane_segment.abstractlane method)": [[158, "verse.map.lane_segment.AbstractLane.on_lane"]], "position() (verse.map.lane_segment.abstractlane method)": [[158, "verse.map.lane_segment.AbstractLane.position"]], "to_config() (verse.map.lane_segment.abstractlane method)": [[158, "verse.map.lane_segment.AbstractLane.to_config"]], "width_at() (verse.map.lane_segment.abstractlane method)": [[158, "verse.map.lane_segment.AbstractLane.width_at"]], "circularlane (class in verse.map.lane_segment)": [[159, "verse.map.lane_segment.CircularLane"]], "__init__() (verse.map.lane_segment.circularlane method)": [[159, "verse.map.lane_segment.CircularLane.__init__"]], "distance() (verse.map.lane_segment.circularlane method)": [[159, "verse.map.lane_segment.CircularLane.distance"]], "distance_with_heading() (verse.map.lane_segment.circularlane method)": [[159, "verse.map.lane_segment.CircularLane.distance_with_heading"]], "from_config() (verse.map.lane_segment.circularlane class method)": [[159, "verse.map.lane_segment.CircularLane.from_config"]], "heading_at() (verse.map.lane_segment.circularlane method)": [[159, "verse.map.lane_segment.CircularLane.heading_at"]], "is_reachable_from() (verse.map.lane_segment.circularlane method)": [[159, "verse.map.lane_segment.CircularLane.is_reachable_from"]], "local_coordinates() (verse.map.lane_segment.circularlane method)": [[159, "verse.map.lane_segment.CircularLane.local_coordinates"]], "metaclass__ (verse.map.lane_segment.circularlane attribute)": [[159, "verse.map.lane_segment.CircularLane.metaclass__"]], "on_lane() (verse.map.lane_segment.circularlane method)": [[159, "verse.map.lane_segment.CircularLane.on_lane"]], "position() (verse.map.lane_segment.circularlane method)": [[159, "verse.map.lane_segment.CircularLane.position"]], "to_config() (verse.map.lane_segment.circularlane method)": [[159, "verse.map.lane_segment.CircularLane.to_config"]], "width_at() (verse.map.lane_segment.circularlane method)": [[159, "verse.map.lane_segment.CircularLane.width_at"]], "lanesegment (class in verse.map.lane_segment)": [[160, "verse.map.lane_segment.LaneSegment"]], "__init__() (verse.map.lane_segment.lanesegment method)": [[160, "verse.map.lane_segment.LaneSegment.__init__"]], "linetype (class in verse.map.lane_segment)": [[161, "verse.map.lane_segment.LineType"]], "__init__() (verse.map.lane_segment.linetype method)": [[161, "verse.map.lane_segment.LineType.__init__"]], "straightlane (class in verse.map.lane_segment)": [[162, "verse.map.lane_segment.StraightLane"]], "__init__() (verse.map.lane_segment.straightlane method)": [[162, "verse.map.lane_segment.StraightLane.__init__"]], "distance() (verse.map.lane_segment.straightlane method)": [[162, "verse.map.lane_segment.StraightLane.distance"]], "distance_with_heading() (verse.map.lane_segment.straightlane method)": [[162, "verse.map.lane_segment.StraightLane.distance_with_heading"]], "from_config() (verse.map.lane_segment.straightlane class method)": [[162, "verse.map.lane_segment.StraightLane.from_config"]], "heading_at() (verse.map.lane_segment.straightlane method)": [[162, "verse.map.lane_segment.StraightLane.heading_at"]], "is_reachable_from() (verse.map.lane_segment.straightlane method)": [[162, "verse.map.lane_segment.StraightLane.is_reachable_from"]], "local_coordinates() (verse.map.lane_segment.straightlane method)": [[162, "verse.map.lane_segment.StraightLane.local_coordinates"]], "metaclass__ (verse.map.lane_segment.straightlane attribute)": [[162, "verse.map.lane_segment.StraightLane.metaclass__"]], "on_lane() (verse.map.lane_segment.straightlane method)": [[162, "verse.map.lane_segment.StraightLane.on_lane"]], "position() (verse.map.lane_segment.straightlane method)": [[162, "verse.map.lane_segment.StraightLane.position"]], "to_config() (verse.map.lane_segment.straightlane method)": [[162, "verse.map.lane_segment.StraightLane.to_config"]], "width_at() (verse.map.lane_segment.straightlane method)": [[162, "verse.map.lane_segment.StraightLane.width_at"]], "verse.map.lane_segment_3d": [[163, "module-verse.map.lane_segment_3d"]], "abstractlane_3d (class in verse.map.lane_segment_3d)": [[164, "verse.map.lane_segment_3d.AbstractLane_3d"]], "__init__() (verse.map.lane_segment_3d.abstractlane_3d method)": [[164, "verse.map.lane_segment_3d.AbstractLane_3d.__init__"]], "altitude() (verse.map.lane_segment_3d.abstractlane_3d method)": [[164, "verse.map.lane_segment_3d.AbstractLane_3d.altitude"]], "distance() (verse.map.lane_segment_3d.abstractlane_3d method)": [[164, "verse.map.lane_segment_3d.AbstractLane_3d.distance"]], "distance_with_heading() (verse.map.lane_segment_3d.abstractlane_3d method)": [[164, "verse.map.lane_segment_3d.AbstractLane_3d.distance_with_heading"]], "from_config() (verse.map.lane_segment_3d.abstractlane_3d class method)": [[164, "verse.map.lane_segment_3d.AbstractLane_3d.from_config"]], "heading_at() (verse.map.lane_segment_3d.abstractlane_3d method)": [[164, "verse.map.lane_segment_3d.AbstractLane_3d.heading_at"]], "is_reachable_from() (verse.map.lane_segment_3d.abstractlane_3d method)": [[164, "verse.map.lane_segment_3d.AbstractLane_3d.is_reachable_from"]], "local_coordinates() (verse.map.lane_segment_3d.abstractlane_3d method)": [[164, "verse.map.lane_segment_3d.AbstractLane_3d.local_coordinates"]], "metaclass__ (verse.map.lane_segment_3d.abstractlane_3d attribute)": [[164, "verse.map.lane_segment_3d.AbstractLane_3d.metaclass__"]], "on_lane() (verse.map.lane_segment_3d.abstractlane_3d method)": [[164, "verse.map.lane_segment_3d.AbstractLane_3d.on_lane"]], "position() (verse.map.lane_segment_3d.abstractlane_3d method)": [[164, "verse.map.lane_segment_3d.AbstractLane_3d.position"]], "to_config() (verse.map.lane_segment_3d.abstractlane_3d method)": [[164, "verse.map.lane_segment_3d.AbstractLane_3d.to_config"]], "width_at() (verse.map.lane_segment_3d.abstractlane_3d method)": [[164, "verse.map.lane_segment_3d.AbstractLane_3d.width_at"]], "circularlane_3d_v1 (class in verse.map.lane_segment_3d)": [[165, "verse.map.lane_segment_3d.CircularLane_3d_v1"]], "__init__() (verse.map.lane_segment_3d.circularlane_3d_v1 method)": [[165, "verse.map.lane_segment_3d.CircularLane_3d_v1.__init__"]], "altitude() (verse.map.lane_segment_3d.circularlane_3d_v1 method)": [[165, "verse.map.lane_segment_3d.CircularLane_3d_v1.altitude"]], "distance() (verse.map.lane_segment_3d.circularlane_3d_v1 method)": [[165, "verse.map.lane_segment_3d.CircularLane_3d_v1.distance"]], "distance_with_heading() (verse.map.lane_segment_3d.circularlane_3d_v1 method)": [[165, "verse.map.lane_segment_3d.CircularLane_3d_v1.distance_with_heading"]], "from_config() (verse.map.lane_segment_3d.circularlane_3d_v1 class method)": [[165, "verse.map.lane_segment_3d.CircularLane_3d_v1.from_config"]], "heading_at() (verse.map.lane_segment_3d.circularlane_3d_v1 method)": [[165, "verse.map.lane_segment_3d.CircularLane_3d_v1.heading_at"]], "is_reachable_from() (verse.map.lane_segment_3d.circularlane_3d_v1 method)": [[165, "verse.map.lane_segment_3d.CircularLane_3d_v1.is_reachable_from"]], "local_coordinates() (verse.map.lane_segment_3d.circularlane_3d_v1 method)": [[165, "verse.map.lane_segment_3d.CircularLane_3d_v1.local_coordinates"]], "metaclass__ (verse.map.lane_segment_3d.circularlane_3d_v1 attribute)": [[165, "verse.map.lane_segment_3d.CircularLane_3d_v1.metaclass__"]], "on_lane() (verse.map.lane_segment_3d.circularlane_3d_v1 method)": [[165, "verse.map.lane_segment_3d.CircularLane_3d_v1.on_lane"]], "position() (verse.map.lane_segment_3d.circularlane_3d_v1 method)": [[165, "verse.map.lane_segment_3d.CircularLane_3d_v1.position"]], "to_config() (verse.map.lane_segment_3d.circularlane_3d_v1 method)": [[165, "verse.map.lane_segment_3d.CircularLane_3d_v1.to_config"]], "width_at() (verse.map.lane_segment_3d.circularlane_3d_v1 method)": [[165, "verse.map.lane_segment_3d.CircularLane_3d_v1.width_at"]], "circularlane_3d_v2 (class in verse.map.lane_segment_3d)": [[166, "verse.map.lane_segment_3d.CircularLane_3d_v2"]], "__init__() (verse.map.lane_segment_3d.circularlane_3d_v2 method)": [[166, "verse.map.lane_segment_3d.CircularLane_3d_v2.__init__"]], "altitude() (verse.map.lane_segment_3d.circularlane_3d_v2 method)": [[166, "verse.map.lane_segment_3d.CircularLane_3d_v2.altitude"]], "distance() (verse.map.lane_segment_3d.circularlane_3d_v2 method)": [[166, "verse.map.lane_segment_3d.CircularLane_3d_v2.distance"]], "distance_with_heading() (verse.map.lane_segment_3d.circularlane_3d_v2 method)": [[166, "verse.map.lane_segment_3d.CircularLane_3d_v2.distance_with_heading"]], "from_config() (verse.map.lane_segment_3d.circularlane_3d_v2 class method)": [[166, "verse.map.lane_segment_3d.CircularLane_3d_v2.from_config"]], "heading_at() (verse.map.lane_segment_3d.circularlane_3d_v2 method)": [[166, "verse.map.lane_segment_3d.CircularLane_3d_v2.heading_at"]], "is_reachable_from() (verse.map.lane_segment_3d.circularlane_3d_v2 method)": [[166, "verse.map.lane_segment_3d.CircularLane_3d_v2.is_reachable_from"]], "local_coordinates() (verse.map.lane_segment_3d.circularlane_3d_v2 method)": [[166, "verse.map.lane_segment_3d.CircularLane_3d_v2.local_coordinates"]], "metaclass__ (verse.map.lane_segment_3d.circularlane_3d_v2 attribute)": [[166, "verse.map.lane_segment_3d.CircularLane_3d_v2.metaclass__"]], "on_lane() (verse.map.lane_segment_3d.circularlane_3d_v2 method)": [[166, "verse.map.lane_segment_3d.CircularLane_3d_v2.on_lane"]], "position() (verse.map.lane_segment_3d.circularlane_3d_v2 method)": [[166, "verse.map.lane_segment_3d.CircularLane_3d_v2.position"]], "to_config() (verse.map.lane_segment_3d.circularlane_3d_v2 method)": [[166, "verse.map.lane_segment_3d.CircularLane_3d_v2.to_config"]], "width_at() (verse.map.lane_segment_3d.circularlane_3d_v2 method)": [[166, "verse.map.lane_segment_3d.CircularLane_3d_v2.width_at"]], "linetype_3d (class in verse.map.lane_segment_3d)": [[167, "verse.map.lane_segment_3d.LineType_3d"]], "__init__() (verse.map.lane_segment_3d.linetype_3d method)": [[167, "verse.map.lane_segment_3d.LineType_3d.__init__"]], "straightlane_3d (class in verse.map.lane_segment_3d)": [[168, "verse.map.lane_segment_3d.StraightLane_3d"]], "__init__() (verse.map.lane_segment_3d.straightlane_3d method)": [[168, "verse.map.lane_segment_3d.StraightLane_3d.__init__"]], "altitude() (verse.map.lane_segment_3d.straightlane_3d method)": [[168, "verse.map.lane_segment_3d.StraightLane_3d.altitude"]], "distance() (verse.map.lane_segment_3d.straightlane_3d method)": [[168, "verse.map.lane_segment_3d.StraightLane_3d.distance"]], "distance_with_heading() (verse.map.lane_segment_3d.straightlane_3d method)": [[168, "verse.map.lane_segment_3d.StraightLane_3d.distance_with_heading"]], "from_config() (verse.map.lane_segment_3d.straightlane_3d class method)": [[168, "verse.map.lane_segment_3d.StraightLane_3d.from_config"]], "heading_at() (verse.map.lane_segment_3d.straightlane_3d method)": [[168, "verse.map.lane_segment_3d.StraightLane_3d.heading_at"]], "is_reachable_from() (verse.map.lane_segment_3d.straightlane_3d method)": [[168, "verse.map.lane_segment_3d.StraightLane_3d.is_reachable_from"]], "local_coordinates() (verse.map.lane_segment_3d.straightlane_3d method)": [[168, "verse.map.lane_segment_3d.StraightLane_3d.local_coordinates"]], "metaclass__ (verse.map.lane_segment_3d.straightlane_3d attribute)": [[168, "verse.map.lane_segment_3d.StraightLane_3d.metaclass__"]], "on_lane() (verse.map.lane_segment_3d.straightlane_3d method)": [[168, "verse.map.lane_segment_3d.StraightLane_3d.on_lane"]], "position() (verse.map.lane_segment_3d.straightlane_3d method)": [[168, "verse.map.lane_segment_3d.StraightLane_3d.position"]], "to_config() (verse.map.lane_segment_3d.straightlane_3d method)": [[168, "verse.map.lane_segment_3d.StraightLane_3d.to_config"]], "width_at() (verse.map.lane_segment_3d.straightlane_3d method)": [[168, "verse.map.lane_segment_3d.StraightLane_3d.width_at"]], "func_a() (in module verse.map.lane_segment_3d)": [[169, "verse.map.lane_segment_3d.func_a"]], "func_b() (in module verse.map.lane_segment_3d)": [[170, "verse.map.lane_segment_3d.func_b"]], "get_center_radius() (in module verse.map.lane_segment_3d)": [[171, "verse.map.lane_segment_3d.get_center_radius"]], "get_coor_by_rt() (in module verse.map.lane_segment_3d)": [[172, "verse.map.lane_segment_3d.get_coor_by_rt"]], "get_rtp_by_coor() (in module verse.map.lane_segment_3d)": [[173, "verse.map.lane_segment_3d.get_rtp_by_coor"]], "get_theta_by_coor() (in module verse.map.lane_segment_3d)": [[174, "verse.map.lane_segment_3d.get_theta_by_coor"]], "verse.map.opendrive_parser": [[175, "module-verse.map.opendrive_parser"]], "check_valid_side() (in module verse.map.opendrive_parser)": [[176, "verse.map.opendrive_parser.check_valid_side"]], "condense_matrix() (in module verse.map.opendrive_parser)": [[177, "verse.map.opendrive_parser.condense_matrix"]], "file_parser() (in module verse.map.opendrive_parser)": [[178, "verse.map.opendrive_parser.file_parser"]], "opendrive_map() (in module verse.map.opendrive_parser)": [[179, "verse.map.opendrive_parser.opendrive_map"]], "road_traverser() (in module verse.map.opendrive_parser)": [[180, "verse.map.opendrive_parser.road_traverser"]], "verse.parser": [[181, "module-verse.parser"]], "verse.parser.astunparser": [[182, "module-verse.parser.astunparser"]], "unparser (class in verse.parser.astunparser)": [[183, "verse.parser.astunparser.Unparser"]], "__init__() (verse.parser.astunparser.unparser method)": [[183, "verse.parser.astunparser.Unparser.__init__"]], "dispatch() (verse.parser.astunparser.unparser method)": [[183, "verse.parser.astunparser.Unparser.dispatch"]], "enter() (verse.parser.astunparser.unparser method)": [[183, "verse.parser.astunparser.Unparser.enter"]], "fill() (verse.parser.astunparser.unparser method)": [[183, "verse.parser.astunparser.Unparser.fill"]], "leave() (verse.parser.astunparser.unparser method)": [[183, "verse.parser.astunparser.Unparser.leave"]], "write() (verse.parser.astunparser.unparser method)": [[183, "verse.parser.astunparser.Unparser.write"]], "interleave() (in module verse.parser.astunparser)": [[184, "verse.parser.astunparser.interleave"]], "main() (in module verse.parser.astunparser)": [[185, "verse.parser.astunparser.main"]], "roundtrip() (in module verse.parser.astunparser)": [[186, "verse.parser.astunparser.roundtrip"]], "testdir() (in module verse.parser.astunparser)": [[187, "verse.parser.astunparser.testdir"]], "unparse() (in module verse.parser.astunparser)": [[188, "verse.parser.astunparser.unparse"]], "verse.parser.parser": [[189, "module-verse.parser.parser"]], "argsubstituter (class in verse.parser.parser)": [[190, "verse.parser.parser.ArgSubstituter"]], "__init__() (verse.parser.parser.argsubstituter method)": [[190, "verse.parser.parser.ArgSubstituter.__init__"]], "generic_visit() (verse.parser.parser.argsubstituter method)": [[190, "verse.parser.parser.ArgSubstituter.generic_visit"]], "visit() (verse.parser.parser.argsubstituter method)": [[190, "verse.parser.parser.ArgSubstituter.visit"]], "assert (class in verse.parser.parser)": [[191, "verse.parser.parser.Assert"]], "__init__() (verse.parser.parser.assert method)": [[191, "verse.parser.parser.Assert.__init__"]], "compiledassert (class in verse.parser.parser)": [[192, "verse.parser.parser.CompiledAssert"]], "__init__() (verse.parser.parser.compiledassert method)": [[192, "verse.parser.parser.CompiledAssert.__init__"]], "condval (class in verse.parser.parser)": [[193, "verse.parser.parser.CondVal"]], "__init__() (verse.parser.parser.condval method)": [[193, "verse.parser.parser.CondVal.__init__"]], "condvalcase (class in verse.parser.parser)": [[194, "verse.parser.parser.CondValCase"]], "__init__() (verse.parser.parser.condvalcase method)": [[194, "verse.parser.parser.CondValCase.__init__"]], "controllerir (class in verse.parser.parser)": [[195, "verse.parser.parser.ControllerIR"]], "__init__() (verse.parser.parser.controllerir method)": [[195, "verse.parser.parser.ControllerIR.__init__"]], "ir_eq() (verse.parser.parser.controllerir static method)": [[195, "verse.parser.parser.ControllerIR.ir_eq"]], "customir (class in verse.parser.parser)": [[196, "verse.parser.parser.CustomIR"]], "__init__() (verse.parser.parser.customir method)": [[196, "verse.parser.parser.CustomIR.__init__"]], "env (class in verse.parser.parser)": [[197, "verse.parser.parser.Env"]], "__init__() (verse.parser.parser.env method)": [[197, "verse.parser.parser.Env.__init__"]], "lambda (class in verse.parser.parser)": [[198, "verse.parser.parser.Lambda"]], "__init__() (verse.parser.parser.lambda method)": [[198, "verse.parser.parser.Lambda.__init__"]], "lambdaarg (class in verse.parser.parser)": [[199, "verse.parser.parser.LambdaArg"]], "__init__() (verse.parser.parser.lambdaarg method)": [[199, "verse.parser.parser.LambdaArg.__init__"]], "modedef (class in verse.parser.parser)": [[200, "verse.parser.parser.ModeDef"]], "__init__() (verse.parser.parser.modedef method)": [[200, "verse.parser.parser.ModeDef.__init__"]], "modepath (class in verse.parser.parser)": [[201, "verse.parser.parser.ModePath"]], "__init__() (verse.parser.parser.modepath method)": [[201, "verse.parser.parser.ModePath.__init__"]], "reduction (class in verse.parser.parser)": [[202, "verse.parser.parser.Reduction"]], "__init__() (verse.parser.parser.reduction method)": [[202, "verse.parser.parser.Reduction.__init__"]], "reductiontype (class in verse.parser.parser)": [[203, "verse.parser.parser.ReductionType"]], "scopelevel (class in verse.parser.parser)": [[204, "verse.parser.parser.ScopeLevel"]], "__init__() (verse.parser.parser.scopelevel method)": [[204, "verse.parser.parser.ScopeLevel.__init__"]], "statedef (class in verse.parser.parser)": [[205, "verse.parser.parser.StateDef"]], "__init__() (verse.parser.parser.statedef method)": [[205, "verse.parser.parser.StateDef.__init__"]], "_assert (class in verse.parser.parser)": [[206, "verse.parser.parser._Assert"]], "__init__() (verse.parser.parser._assert method)": [[206, "verse.parser.parser._Assert.__init__"]], "ast_dump() (in module verse.parser.parser)": [[207, "verse.parser.parser.ast_dump"]], "compile_expr() (in module verse.parser.parser)": [[208, "verse.parser.parser.compile_expr"]], "find() (in module verse.parser.parser)": [[209, "verse.parser.parser.find"]], "fully_cond() (in module verse.parser.parser)": [[210, "verse.parser.parser.fully_cond"]], "is_main_check() (in module verse.parser.parser)": [[211, "verse.parser.parser.is_main_check"]], "merge_assert() (in module verse.parser.parser)": [[212, "verse.parser.parser.merge_assert"]], "merge_conds() (in module verse.parser.parser)": [[213, "verse.parser.parser.merge_conds"]], "merge_if() (in module verse.parser.parser)": [[214, "verse.parser.parser.merge_if"]], "merge_if_single() (in module verse.parser.parser)": [[215, "verse.parser.parser.merge_if_single"]], "merge_if_val() (in module verse.parser.parser)": [[216, "verse.parser.parser.merge_if_val"]], "not_ir_ast() (in module verse.parser.parser)": [[217, "verse.parser.parser.not_ir_ast"]], "proc() (in module verse.parser.parser)": [[218, "verse.parser.parser.proc"]], "proc_assign() (in module verse.parser.parser)": [[219, "verse.parser.parser.proc_assign"]], "unparse() (in module verse.parser.parser)": [[220, "verse.parser.parser.unparse"]], "verse.plotter": [[221, "module-verse.plotter"]], "verse.plotter.plotter2d": [[222, "module-verse.plotter.plotter2D"]], "check_dim() (in module verse.plotter.plotter2d)": [[223, "verse.plotter.plotter2D.check_dim"]], "create_anime_dict() (in module verse.plotter.plotter2d)": [[224, "verse.plotter.plotter2D.create_anime_dict"]], "draw_map() (in module verse.plotter.plotter2d)": [[225, "verse.plotter.plotter2D.draw_map"]], "duration (in module verse.plotter.plotter2d)": [[226, "verse.plotter.plotter2D.duration"]], "get_text_pos() (in module verse.plotter.plotter2d)": [[227, "verse.plotter.plotter2D.get_text_pos"]], "num_digits() (in module verse.plotter.plotter2d)": [[228, "verse.plotter.plotter2D.num_digits"]], "reachtube_anime() (in module verse.plotter.plotter2d)": [[229, "verse.plotter.plotter2D.reachtube_anime"]], "reachtube_tree() (in module verse.plotter.plotter2d)": [[230, "verse.plotter.plotter2D.reachtube_tree"]], "reachtube_tree_single() (in module verse.plotter.plotter2d)": [[231, "verse.plotter.plotter2D.reachtube_tree_single"]], "sample_trace() (in module verse.plotter.plotter2d)": [[232, "verse.plotter.plotter2D.sample_trace"]], "simulation_anime() (in module verse.plotter.plotter2d)": [[233, "verse.plotter.plotter2D.simulation_anime"]], "simulation_tree() (in module verse.plotter.plotter2d)": [[234, "verse.plotter.plotter2D.simulation_tree"]], "simulation_tree_single() (in module verse.plotter.plotter2d)": [[235, "verse.plotter.plotter2D.simulation_tree_single"]], "update_style() (in module verse.plotter.plotter2d)": [[236, "verse.plotter.plotter2D.update_style"]], "verse.plotter.plotter2d_old": [[237, "module-verse.plotter.plotter2D_old"]], "generate_simulation_anime() (in module verse.plotter.plotter2d_old)": [[238, "verse.plotter.plotter2D_old.generate_simulation_anime"]], "plot() (in module verse.plotter.plotter2d_old)": [[239, "verse.plotter.plotter2D_old.plot"]], "plot_map() (in module verse.plotter.plotter2d_old)": [[240, "verse.plotter.plotter2D_old.plot_map"]], "plot_reachtube_tree() (in module verse.plotter.plotter2d_old)": [[241, "verse.plotter.plotter2D_old.plot_reachtube_tree"]], "plot_simulation_tree() (in module verse.plotter.plotter2d_old)": [[242, "verse.plotter.plotter2D_old.plot_simulation_tree"]], "verse.plotter.plotter3d": [[243, "module-verse.plotter.plotter3D"]], "plot3dmap() (in module verse.plotter.plotter3d)": [[244, "verse.plotter.plotter3D.plot3dMap"]], "plot3dreachtube() (in module verse.plotter.plotter3d)": [[245, "verse.plotter.plotter3D.plot3dReachtube"]], "plot3dreachtubesingle() (in module verse.plotter.plotter3d)": [[246, "verse.plotter.plotter3D.plot3dReachtubeSingle"]], "plot_line_3d() (in module verse.plotter.plotter3d)": [[247, "verse.plotter.plotter3D.plot_line_3d"]], "plot_point_3d() (in module verse.plotter.plotter3d)": [[248, "verse.plotter.plotter3D.plot_point_3d"]], "plot_polytope_3d() (in module verse.plotter.plotter3d)": [[249, "verse.plotter.plotter3D.plot_polytope_3d"]], "verse.plotter.plotter3d_new": [[250, "module-verse.plotter.plotter3D_new"]], "check_dim() (in module verse.plotter.plotter3d_new)": [[251, "verse.plotter.plotter3D_new.check_dim"]], "draw_map_3d() (in module verse.plotter.plotter3d_new)": [[252, "verse.plotter.plotter3D_new.draw_map_3d"]], "reachtube_tree_3d() (in module verse.plotter.plotter3d_new)": [[253, "verse.plotter.plotter3D_new.reachtube_tree_3d"]], "reachtube_tree_single_3d() (in module verse.plotter.plotter3d_new)": [[254, "verse.plotter.plotter3D_new.reachtube_tree_single_3d"]], "sample_trace() (in module verse.plotter.plotter3d_new)": [[255, "verse.plotter.plotter3D_new.sample_trace"]], "simulation_tree_3d() (in module verse.plotter.plotter3d_new)": [[256, "verse.plotter.plotter3D_new.simulation_tree_3d"]], "verse.scenario": [[259, "module-verse.scenario"]], "verse.scenario.scenario": [[260, "module-verse.scenario.scenario"]], "benchmark (class in verse.scenario.scenario)": [[261, "verse.scenario.scenario.Benchmark"]], "__init__() (verse.scenario.scenario.benchmark method)": [[261, "verse.scenario.scenario.Benchmark.__init__"]], "exprconfig (class in verse.scenario.scenario)": [[262, "verse.scenario.scenario.ExprConfig"]], "__init__() (verse.scenario.scenario.exprconfig method)": [[262, "verse.scenario.scenario.ExprConfig.__init__"]], "scenario (class in verse.scenario.scenario)": [[263, "verse.scenario.scenario.Scenario"]], "__init__() (verse.scenario.scenario.scenario method)": [[263, "verse.scenario.scenario.Scenario.__init__"]], "scenarioconfig (class in verse.scenario.scenario)": [[264, "verse.scenario.scenario.ScenarioConfig"]], "__init__() (verse.scenario.scenario.scenarioconfig method)": [[264, "verse.scenario.scenario.ScenarioConfig.__init__"]], "check_ray_init() (in module verse.scenario.scenario)": [[265, "verse.scenario.scenario.check_ray_init"]], "red() (in module verse.scenario.scenario)": [[266, "verse.scenario.scenario.red"]], "verse.sensor": [[267, "module-verse.sensor"]], "verse.sensor.base_sensor": [[268, "module-verse.sensor.base_sensor"]], "basesensor (class in verse.sensor.base_sensor)": [[269, "verse.sensor.base_sensor.BaseSensor"]], "__init__() (verse.sensor.base_sensor.basesensor method)": [[269, "verse.sensor.base_sensor.BaseSensor.__init__"]], "add_states_2d() (in module verse.sensor.base_sensor)": [[270, "verse.sensor.base_sensor.add_states_2d"]], "add_states_3d() (in module verse.sensor.base_sensor)": [[271, "verse.sensor.base_sensor.add_states_3d"]], "adds() (in module verse.sensor.base_sensor)": [[272, "verse.sensor.base_sensor.adds"]], "set_states_2d() (in module verse.sensor.base_sensor)": [[273, "verse.sensor.base_sensor.set_states_2d"]], "set_states_3d() (in module verse.sensor.base_sensor)": [[274, "verse.sensor.base_sensor.set_states_3d"]], "sets() (in module verse.sensor.base_sensor)": [[275, "verse.sensor.base_sensor.sets"]], "verse.sensor.example_sensor": [[276, "module-verse.sensor.example_sensor"]], "verse.sensor.example_sensor.craft_sensor": [[277, "module-verse.sensor.example_sensor.craft_sensor"]], "craftsensor (class in verse.sensor.example_sensor.craft_sensor)": [[278, "verse.sensor.example_sensor.craft_sensor.CraftSensor"]], "__init__() (verse.sensor.example_sensor.craft_sensor.craftsensor method)": [[278, "verse.sensor.example_sensor.craft_sensor.CraftSensor.__init__"]], "add_states_2d_ball() (in module verse.sensor.example_sensor.craft_sensor)": [[279, "verse.sensor.example_sensor.craft_sensor.add_states_2d_ball"]], "add_states_3d_ball() (in module verse.sensor.example_sensor.craft_sensor)": [[280, "verse.sensor.example_sensor.craft_sensor.add_states_3d_ball"]], "adds() (in module verse.sensor.example_sensor.craft_sensor)": [[281, "verse.sensor.example_sensor.craft_sensor.adds"]], "set_states_2d_ball() (in module verse.sensor.example_sensor.craft_sensor)": [[282, "verse.sensor.example_sensor.craft_sensor.set_states_2d_ball"]], "set_states_3d_ball() (in module verse.sensor.example_sensor.craft_sensor)": [[283, "verse.sensor.example_sensor.craft_sensor.set_states_3d_ball"]], "sets() (in module verse.sensor.example_sensor.craft_sensor)": [[284, "verse.sensor.example_sensor.craft_sensor.sets"]], "verse.sensor.example_sensor.quadrotor_sensor": [[285, "module-verse.sensor.example_sensor.quadrotor_sensor"]], "quadrotorsensor (class in verse.sensor.example_sensor.quadrotor_sensor)": [[286, "verse.sensor.example_sensor.quadrotor_sensor.QuadrotorSensor"]], "__init__() (verse.sensor.example_sensor.quadrotor_sensor.quadrotorsensor method)": [[286, "verse.sensor.example_sensor.quadrotor_sensor.QuadrotorSensor.__init__"]], "add_states_2d_ball() (in module verse.sensor.example_sensor.quadrotor_sensor)": [[287, "verse.sensor.example_sensor.quadrotor_sensor.add_states_2d_ball"]], "add_states_3d_ball() (in module verse.sensor.example_sensor.quadrotor_sensor)": [[288, "verse.sensor.example_sensor.quadrotor_sensor.add_states_3d_ball"]], "adds() (in module verse.sensor.example_sensor.quadrotor_sensor)": [[289, "verse.sensor.example_sensor.quadrotor_sensor.adds"]], "set_states_2d_ball() (in module verse.sensor.example_sensor.quadrotor_sensor)": [[290, "verse.sensor.example_sensor.quadrotor_sensor.set_states_2d_ball"]], "set_states_3d_ball() (in module verse.sensor.example_sensor.quadrotor_sensor)": [[291, "verse.sensor.example_sensor.quadrotor_sensor.set_states_3d_ball"]], "sets() (in module verse.sensor.example_sensor.quadrotor_sensor)": [[292, "verse.sensor.example_sensor.quadrotor_sensor.sets"]], "verse.sensor.example_sensor.single_sensor": [[293, "module-verse.sensor.example_sensor.single_sensor"]], "fakesensor3 (class in verse.sensor.example_sensor.single_sensor)": [[294, "verse.sensor.example_sensor.single_sensor.FakeSensor3"]], "__init__() (verse.sensor.example_sensor.single_sensor.fakesensor3 method)": [[294, "verse.sensor.example_sensor.single_sensor.FakeSensor3.__init__"]], "fakesensor4 (class in verse.sensor.example_sensor.single_sensor)": [[295, "verse.sensor.example_sensor.single_sensor.FakeSensor4"]], "__init__() (verse.sensor.example_sensor.single_sensor.fakesensor4 method)": [[295, "verse.sensor.example_sensor.single_sensor.FakeSensor4.__init__"]], "singlesensor (class in verse.sensor.example_sensor.single_sensor)": [[296, "verse.sensor.example_sensor.single_sensor.SingleSensor"]], "__init__() (verse.sensor.example_sensor.single_sensor.singlesensor method)": [[296, "verse.sensor.example_sensor.single_sensor.SingleSensor.__init__"]], "add_states_2d() (in module verse.sensor.example_sensor.single_sensor)": [[297, "verse.sensor.example_sensor.single_sensor.add_states_2d"]], "add_states_2d_ball() (in module verse.sensor.example_sensor.single_sensor)": [[298, "verse.sensor.example_sensor.single_sensor.add_states_2d_ball"]], "add_states_3d() (in module verse.sensor.example_sensor.single_sensor)": [[299, "verse.sensor.example_sensor.single_sensor.add_states_3d"]], "add_states_3d_ball() (in module verse.sensor.example_sensor.single_sensor)": [[300, "verse.sensor.example_sensor.single_sensor.add_states_3d_ball"]], "adds() (in module verse.sensor.example_sensor.single_sensor)": [[301, "verse.sensor.example_sensor.single_sensor.adds"]], "set_states_2d() (in module verse.sensor.example_sensor.single_sensor)": [[302, "verse.sensor.example_sensor.single_sensor.set_states_2d"]], "set_states_2d_ball() (in module verse.sensor.example_sensor.single_sensor)": [[303, "verse.sensor.example_sensor.single_sensor.set_states_2d_ball"]], "set_states_3d() (in module verse.sensor.example_sensor.single_sensor)": [[304, "verse.sensor.example_sensor.single_sensor.set_states_3d"]], "set_states_3d_ball() (in module verse.sensor.example_sensor.single_sensor)": [[305, "verse.sensor.example_sensor.single_sensor.set_states_3d_ball"]], "sets() (in module verse.sensor.example_sensor.single_sensor)": [[306, "verse.sensor.example_sensor.single_sensor.sets"]], "verse.sensor.example_sensor.thermo_sensor": [[307, "module-verse.sensor.example_sensor.thermo_sensor"]], "thermosensor (class in verse.sensor.example_sensor.thermo_sensor)": [[308, "verse.sensor.example_sensor.thermo_sensor.ThermoSensor"]], "__init__() (verse.sensor.example_sensor.thermo_sensor.thermosensor method)": [[308, "verse.sensor.example_sensor.thermo_sensor.ThermoSensor.__init__"]], "add_states_2d_ball() (in module verse.sensor.example_sensor.thermo_sensor)": [[309, "verse.sensor.example_sensor.thermo_sensor.add_states_2d_ball"]], "add_states_3d_ball() (in module verse.sensor.example_sensor.thermo_sensor)": [[310, "verse.sensor.example_sensor.thermo_sensor.add_states_3d_ball"]], "adds() (in module verse.sensor.example_sensor.thermo_sensor)": [[311, "verse.sensor.example_sensor.thermo_sensor.adds"]], "set_states_2d_ball() (in module verse.sensor.example_sensor.thermo_sensor)": [[312, "verse.sensor.example_sensor.thermo_sensor.set_states_2d_ball"]], "set_states_3d_ball() (in module verse.sensor.example_sensor.thermo_sensor)": [[313, "verse.sensor.example_sensor.thermo_sensor.set_states_3d_ball"]], "sets() (in module verse.sensor.example_sensor.thermo_sensor)": [[314, "verse.sensor.example_sensor.thermo_sensor.sets"]]}})